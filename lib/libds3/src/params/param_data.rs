// **********************************
// *** AUTOGENERATED, DO NOT EDIT ***
// **********************************
use super::*;
use std::collections::HashMap;
use std::lazy::SyncLazy;

pub static RENDER_VTABLE: SyncLazy<
    HashMap<String, Box<dyn Fn(*const c_void, &imgui::Ui) + Send + Sync>>,
> = SyncLazy::new(|| {
    [
        ("ActionButtonParam".to_string(), unsafe {
            get_render_lambda::<ActionButtonParam>()
        }),
        ("AiSoundParam".to_string(), unsafe {
            get_render_lambda::<AiSoundParam>()
        }),
        ("AtkParam_Npc".to_string(), unsafe {
            get_render_lambda::<AtkParam_Npc>()
        }),
        ("AtkParam_Pc".to_string(), unsafe {
            get_render_lambda::<AtkParam_Pc>()
        }),
        ("AttackElementCorrectParam".to_string(), unsafe {
            get_render_lambda::<AttackElementCorrectParam>()
        }),
        ("BehaviorParam".to_string(), unsafe {
            get_render_lambda::<BehaviorParam>()
        }),
        ("BehaviorParam_PC".to_string(), unsafe {
            get_render_lambda::<BehaviorParam_PC>()
        }),
        ("BonfireWarpParam".to_string(), unsafe {
            get_render_lambda::<BonfireWarpParam>()
        }),
        ("BudgetParam".to_string(), unsafe {
            get_render_lambda::<BudgetParam>()
        }),
        ("Bullet".to_string(), unsafe {
            get_render_lambda::<Bullet>()
        }),
        ("BulletCreateLimitParam".to_string(), unsafe {
            get_render_lambda::<BulletCreateLimitParam>()
        }),
        ("CalcCorrectGraph".to_string(), unsafe {
            get_render_lambda::<CalcCorrectGraph>()
        }),
        ("Ceremony".to_string(), unsafe {
            get_render_lambda::<Ceremony>()
        }),
        ("CharacterLoadParam".to_string(), unsafe {
            get_render_lambda::<CharacterLoadParam>()
        }),
        ("CharaInitParam".to_string(), unsafe {
            get_render_lambda::<CharaInitParam>()
        }),
        ("CharMakeMenuListItemParam".to_string(), unsafe {
            get_render_lambda::<CharMakeMenuListItemParam>()
        }),
        ("CharMakeMenuTopParam".to_string(), unsafe {
            get_render_lambda::<CharMakeMenuTopParam>()
        }),
        ("ClearCountCorrectParam".to_string(), unsafe {
            get_render_lambda::<ClearCountCorrectParam>()
        }),
        ("CoolTimeParam".to_string(), unsafe {
            get_render_lambda::<CoolTimeParam>()
        }),
        ("CultSettingParam".to_string(), unsafe {
            get_render_lambda::<CultSettingParam>()
        }),
        ("DecalParam".to_string(), unsafe {
            get_render_lambda::<DecalParam>()
        }),
        ("DirectionCameraParam".to_string(), unsafe {
            get_render_lambda::<DirectionCameraParam>()
        }),
        ("EquipMtrlSetParam".to_string(), unsafe {
            get_render_lambda::<EquipMtrlSetParam>()
        }),
        ("EquipParamAccessory".to_string(), unsafe {
            get_render_lambda::<EquipParamAccessory>()
        }),
        ("EquipParamGoods".to_string(), unsafe {
            get_render_lambda::<EquipParamGoods>()
        }),
        ("EquipParamProtector".to_string(), unsafe {
            get_render_lambda::<EquipParamProtector>()
        }),
        ("EquipParamWeapon".to_string(), unsafe {
            get_render_lambda::<EquipParamWeapon>()
        }),
        ("FaceGenParam".to_string(), unsafe {
            get_render_lambda::<FaceGenParam>()
        }),
        ("FaceParam".to_string(), unsafe {
            get_render_lambda::<FaceParam>()
        }),
        ("FaceRangeParam".to_string(), unsafe {
            get_render_lambda::<FaceRangeParam>()
        }),
        ("FootSfxParam".to_string(), unsafe {
            get_render_lambda::<FootSfxParam>()
        }),
        ("GameAreaParam".to_string(), unsafe {
            get_render_lambda::<GameAreaParam>()
        }),
        ("GameProgressParam".to_string(), unsafe {
            get_render_lambda::<GameProgressParam>()
        }),
        ("GemCategoryParam".to_string(), unsafe {
            get_render_lambda::<GemCategoryParam>()
        }),
        ("GemDropDopingParam".to_string(), unsafe {
            get_render_lambda::<GemDropDopingParam>()
        }),
        ("GemDropModifyParam".to_string(), unsafe {
            get_render_lambda::<GemDropModifyParam>()
        }),
        ("GemeffectParam".to_string(), unsafe {
            get_render_lambda::<GemeffectParam>()
        }),
        ("GemGenParam".to_string(), unsafe {
            get_render_lambda::<GemGenParam>()
        }),
        ("HitEffectSeParam".to_string(), unsafe {
            get_render_lambda::<HitEffectSeParam>()
        }),
        ("HitEffectSfxConceptParam".to_string(), unsafe {
            get_render_lambda::<HitEffectSfxConceptParam>()
        }),
        ("HitEffectSfxParam".to_string(), unsafe {
            get_render_lambda::<HitEffectSfxParam>()
        }),
        ("HitMtrlParam".to_string(), unsafe {
            get_render_lambda::<HitMtrlParam>()
        }),
        ("HPEstusFlaskRecoveryParam".to_string(), unsafe {
            get_render_lambda::<HPEstusFlaskRecoveryParam>()
        }),
        ("ItemLotParam".to_string(), unsafe {
            get_render_lambda::<ItemLotParam>()
        }),
        ("KnockBackParam".to_string(), unsafe {
            get_render_lambda::<KnockBackParam>()
        }),
        ("KnowledgeLoadScreenItemParam".to_string(), unsafe {
            get_render_lambda::<KnowledgeLoadScreenItemParam>()
        }),
        ("LoadBalancerDrawDistScaleParam".to_string(), unsafe {
            get_render_lambda::<LoadBalancerDrawDistScaleParam>()
        }),
        ("LoadBalancerParam".to_string(), unsafe {
            get_render_lambda::<LoadBalancerParam>()
        }),
        ("LockCamParam".to_string(), unsafe {
            get_render_lambda::<LockCamParam>()
        }),
        ("LodParam".to_string(), unsafe {
            get_render_lambda::<LodParam>()
        }),
        ("LodParam_ps4".to_string(), unsafe {
            get_render_lambda::<LodParam_ps4>()
        }),
        ("LodParam_xb1".to_string(), unsafe {
            get_render_lambda::<LodParam_xb1>()
        }),
        ("Magic".to_string(), unsafe { get_render_lambda::<Magic>() }),
        ("MapMimicryEstablishmentParam".to_string(), unsafe {
            get_render_lambda::<MapMimicryEstablishmentParam>()
        }),
        ("MenuOffscrRendParam".to_string(), unsafe {
            get_render_lambda::<MenuOffscrRendParam>()
        }),
        ("MenuPropertyLayoutParam".to_string(), unsafe {
            get_render_lambda::<MenuPropertyLayoutParam>()
        }),
        ("MenuPropertySpecParam".to_string(), unsafe {
            get_render_lambda::<MenuPropertySpecParam>()
        }),
        ("MenuValueTableParam".to_string(), unsafe {
            get_render_lambda::<MenuValueTableParam>()
        }),
        ("ModelSfxParam".to_string(), unsafe {
            get_render_lambda::<ModelSfxParam>()
        }),
        ("MoveParam".to_string(), unsafe {
            get_render_lambda::<MoveParam>()
        }),
        ("MPEstusFlaskRecoveryParam".to_string(), unsafe {
            get_render_lambda::<MPEstusFlaskRecoveryParam>()
        }),
        ("MultiHPEstusFlaskBonusParam".to_string(), unsafe {
            get_render_lambda::<MultiHPEstusFlaskBonusParam>()
        }),
        ("MultiMPEstusFlaskBonusParam".to_string(), unsafe {
            get_render_lambda::<MultiMPEstusFlaskBonusParam>()
        }),
        ("MultiPlayCorrectionParam".to_string(), unsafe {
            get_render_lambda::<MultiPlayCorrectionParam>()
        }),
        ("MultiSoulBonusRateParam".to_string(), unsafe {
            get_render_lambda::<MultiSoulBonusRateParam>()
        }),
        ("NetworkAreaParam".to_string(), unsafe {
            get_render_lambda::<NetworkAreaParam>()
        }),
        ("NetworkMsgParam".to_string(), unsafe {
            get_render_lambda::<NetworkMsgParam>()
        }),
        ("NetworkParam".to_string(), unsafe {
            get_render_lambda::<NetworkParam>()
        }),
        ("NewMenuColorTableParam".to_string(), unsafe {
            get_render_lambda::<NewMenuColorTableParam>()
        }),
        ("NpcAiActionParam".to_string(), unsafe {
            get_render_lambda::<NpcAiActionParam>()
        }),
        ("NpcParam".to_string(), unsafe {
            get_render_lambda::<NpcParam>()
        }),
        ("NpcThinkParam".to_string(), unsafe {
            get_render_lambda::<NpcThinkParam>()
        }),
        ("ObjActParam".to_string(), unsafe {
            get_render_lambda::<ObjActParam>()
        }),
        ("ObjectMaterialSfxParam".to_string(), unsafe {
            get_render_lambda::<ObjectMaterialSfxParam>()
        }),
        ("ObjectParam".to_string(), unsafe {
            get_render_lambda::<ObjectParam>()
        }),
        ("PhantomParam".to_string(), unsafe {
            get_render_lambda::<PhantomParam>()
        }),
        ("PlayRegionParam".to_string(), unsafe {
            get_render_lambda::<PlayRegionParam>()
        }),
        ("ProtectorGenParam".to_string(), unsafe {
            get_render_lambda::<ProtectorGenParam>()
        }),
        ("RagdollParam".to_string(), unsafe {
            get_render_lambda::<RagdollParam>()
        }),
        ("ReinforceParamProtector".to_string(), unsafe {
            get_render_lambda::<ReinforceParamProtector>()
        }),
        ("ReinforceParamWeapon".to_string(), unsafe {
            get_render_lambda::<ReinforceParamWeapon>()
        }),
        ("RoleParam".to_string(), unsafe {
            get_render_lambda::<RoleParam>()
        }),
        ("SeMaterialConvertParam".to_string(), unsafe {
            get_render_lambda::<SeMaterialConvertParam>()
        }),
        ("ShopLineupParam".to_string(), unsafe {
            get_render_lambda::<ShopLineupParam>()
        }),
        ("SkeletonParam".to_string(), unsafe {
            get_render_lambda::<SkeletonParam>()
        }),
        ("SpEffectParam".to_string(), unsafe {
            get_render_lambda::<SpEffectParam>()
        }),
        ("SpEffectVfxParam".to_string(), unsafe {
            get_render_lambda::<SpEffectVfxParam>()
        }),
        ("SwordArtsParam".to_string(), unsafe {
            get_render_lambda::<SwordArtsParam>()
        }),
        ("TalkParam".to_string(), unsafe {
            get_render_lambda::<TalkParam>()
        }),
        ("ThrowDirectionSfxParam".to_string(), unsafe {
            get_render_lambda::<ThrowDirectionSfxParam>()
        }),
        ("ThrowParam".to_string(), unsafe {
            get_render_lambda::<ThrowParam>()
        }),
        ("ToughnessParam".to_string(), unsafe {
            get_render_lambda::<ToughnessParam>()
        }),
        ("UpperArmParam".to_string(), unsafe {
            get_render_lambda::<UpperArmParam>()
        }),
        ("WeaponGenParam".to_string(), unsafe {
            get_render_lambda::<WeaponGenParam>()
        }),
        ("WepAbsorpPosParam".to_string(), unsafe {
            get_render_lambda::<WepAbsorpPosParam>()
        }),
        ("WetAspectParam".to_string(), unsafe {
            get_render_lambda::<WetAspectParam>()
        }),
        ("WhiteSignCoolTimeParam".to_string(), unsafe {
            get_render_lambda::<WhiteSignCoolTimeParam>()
        }),
        ("Wind".to_string(), unsafe { get_render_lambda::<Wind>() }),
    ]
    .into_iter()
    .collect()
});

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ActionButtonParam {
    pub region_type: u8,
    pub pad1: [u8; 3],
    pub dummy_poly1: i32,
    pub dummy_poly2: i32,
    pub radius: f32,
    pub angle: i32,
    pub depth: f32,
    pub width: f32,
    pub height: f32,
    pub base_height_offset: f32,
    pub angle_check_type: u8,
    pub pad2: [u8; 3],
    pub allow_angle: i32,
    pub text_box_type: u8,
    pub pad3: [u8; 3],
    pub text_id: i32,
    pub invalid_flag: i32,
    pub grayout_flag: i32,
    pub priority: i32,
    pub exec_invalid_time: f32,
    pub exec_button_circle: u8,
    pub pad4: [u8; 3],
}

impl RenderableParam for ActionButtonParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.region_type as _;
        if ui.input_int("regionType", &mut i).build() {
            self.region_type = i as _;
        }

        let mut i: i32 = self.dummy_poly1 as _;
        if ui.input_int("dummyPoly1", &mut i).build() {
            self.dummy_poly1 = i as _;
        }

        let mut i: i32 = self.dummy_poly2 as _;
        if ui.input_int("dummyPoly2", &mut i).build() {
            self.dummy_poly2 = i as _;
        }

        let mut i: f32 = self.radius;
        if ui.input_float("Radius", &mut i).build() {
            self.radius = i;
        }

        let mut i: i32 = self.angle as _;
        if ui.input_int("Angle", &mut i).build() {
            self.angle = i as _;
        }

        let mut i: f32 = self.depth;
        if ui.input_float("depth", &mut i).build() {
            self.depth = i;
        }

        let mut i: f32 = self.width;
        if ui.input_float("width", &mut i).build() {
            self.width = i;
        }

        let mut i: f32 = self.height;
        if ui.input_float("height", &mut i).build() {
            self.height = i;
        }

        let mut i: f32 = self.base_height_offset;
        if ui.input_float("baseHeightOffset", &mut i).build() {
            self.base_height_offset = i;
        }

        let mut i: i32 = self.angle_check_type as _;
        if ui.input_int("angleCheckType", &mut i).build() {
            self.angle_check_type = i as _;
        }

        let mut i: i32 = self.allow_angle as _;
        if ui.input_int("AllowAngle", &mut i).build() {
            self.allow_angle = i as _;
        }

        let mut i: i32 = self.text_box_type as _;
        if ui.input_int("textBoxType", &mut i).build() {
            self.text_box_type = i as _;
        }

        let mut i: i32 = self.text_id as _;
        if ui.input_int("textId", &mut i).build() {
            self.text_id = i as _;
        }

        let mut i: i32 = self.invalid_flag as _;
        if ui.input_int("InvalidFlag", &mut i).build() {
            self.invalid_flag = i as _;
        }

        let mut i: i32 = self.grayout_flag as _;
        if ui.input_int("grayoutFlag", &mut i).build() {
            self.grayout_flag = i as _;
        }

        let mut i: i32 = self.priority as _;
        if ui.input_int("priority", &mut i).build() {
            self.priority = i as _;
        }

        let mut i: f32 = self.exec_invalid_time;
        if ui.input_float("execInvalidTime", &mut i).build() {
            self.exec_invalid_time = i;
        }

        let mut i: i32 = self.exec_button_circle as _;
        if ui.input_int("execButtonCircle", &mut i).build() {
            self.exec_button_circle = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct AiSoundParam {
    pub radius: f32,
    pub life_frame: f32,
    pub b_sp_effect_enable: u8,
    pub r#type: u8,
    pub fake_target_type: u8,
    pub interest_category: u8,
    pub use_hit_damage_team: u8,
    pub pad: [u8; 19],
}

impl RenderableParam for AiSoundParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.radius;
        if ui.input_float("Radius", &mut i).build() {
            self.radius = i;
        }

        let mut i: f32 = self.life_frame;
        if ui.input_float("lifeFrame", &mut i).build() {
            self.life_frame = i;
        }

        let mut i: i32 = self.b_sp_effect_enable as _;
        if ui.input_int("bSpEffectEnable", &mut i).build() {
            self.b_sp_effect_enable = i as _;
        }

        let mut i: i32 = self.r#type as _;
        if ui.input_int("Type", &mut i).build() {
            self.r#type = i as _;
        }

        let mut i: i32 = self.fake_target_type as _;
        if ui.input_int("fakeTargetType", &mut i).build() {
            self.fake_target_type = i as _;
        }

        let mut i: i32 = self.interest_category as _;
        if ui.input_int("InterestCategory", &mut i).build() {
            self.interest_category = i as _;
        }

        let mut i: i32 = self.use_hit_damage_team as _;
        if ui.input_int("UseHitDamageTeam", &mut i).build() {
            self.use_hit_damage_team = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct AtkParam_Npc {
    pub hit0_radius: f32,
    pub hit1_radius: f32,
    pub hit2_radius: f32,
    pub hit3_radius: f32,
    pub knockback_dist: f32,
    pub hit_stop_time: f32,
    pub sp_effect0: i32,
    pub sp_effect1: i32,
    pub sp_effect2: i32,
    pub sp_effect3: i32,
    pub sp_effect4: i32,
    pub hit0_dmy_poly1: i16,
    pub hit1_dmy_poly1: i16,
    pub hit2_dmy_poly1: i16,
    pub hit3_dmy_poly1: i16,
    pub hit0_dmy_poly2: i16,
    pub hit1_dmy_poly2: i16,
    pub hit2_dmy_poly2: i16,
    pub hit3_dmy_poly2: i16,
    pub blowing: i16,
    pub atk_phys_correction: i16,
    pub atk_mag_correction: i16,
    pub atk_fire_correction: i16,
    pub atk_thun_correction: i16,
    pub atk_stam_correction: i16,
    pub guard_atk_rate_correction: i16,
    pub guard_break_correction: i16,
    pub atk_throw_escape_correction: i16,
    pub atk_super_armor_correction: i16,
    pub atk_phys: i16,
    pub atk_mag: i16,
    pub atk_fire: i16,
    pub atk_thun: i16,
    pub atk_stam: i16,
    pub guard_atk_rate: i16,
    pub guard_break_rate: i16,
    pub atk_super_armor: i16,
    pub atk_throw_escape: i16,
    pub atk_obj: i16,
    pub guard_stamina_cut_rate: i16,
    pub guard_rate: i16,
    pub throw_type_id: i16,
    pub hit0_hit_type: u8,
    pub hit1_hit_type: u8,
    pub hit2_hit_type: u8,
    pub hit3_hit_type: u8,
    pub hit0_priority: u8,
    pub hit1_priority: u8,
    pub hit2_priority: u8,
    pub hit3_priority: u8,
    pub damage_level: u8,
    pub map_hit_type: u8,
    pub guard_cut_cancel_rate: u8,
    pub atk_attribute: i8,
    pub sp_attribute: i8,
    pub atk_type: i8,
    pub atk_material: i8,
    pub atk_size: i8,
    pub def_material: i8,
    pub def_sfx_material: i8,
    pub hit_source_type: u8,
    pub throw_flag: u8,
    pub bitfield0: u8,
    pub atk_pow_for_sfx_se: u8,
    pub atk_dir_for_sfx_se: u8,
    pub bitfield1: u8,
    pub pad1: u8,
    pub regainable_slot_id: u8,
    pub death_cause_id: i32,
    pub decal_id1: i32,
    pub decal_id2: i32,
    pub spawn_ai_sound_id: i32,
    pub hit_ai_sound_id: i32,
    pub rumble_id0: i32,
    pub rumble_id1: i32,
    pub rumble_id2: i32,
    pub rumble_id3: i32,
    pub hit0_vfx_id: i32,
    pub hit0_dummy_poly_id0: i32,
    pub hit0_dummy_poly_id1: i32,
    pub hit1_vfx_id1: i32,
    pub hit1_dummy_poly_id0: i32,
    pub hit1_dummy_poly_id1: i32,
    pub hit2_vfx_id: i32,
    pub hit2_dummy_poly_id0: i32,
    pub hit2_dummy_poly_id1: i32,
    pub hit3_vfx_id: i32,
    pub hit3_dummy_poly_id0: i32,
    pub hit3_dummy_poly_id1: i32,
    pub hit4_vfx_id: i32,
    pub hit4_dummy_poly_id0: i32,
    pub hit4_dummy_poly_id1: i32,
    pub hit5_vfx_id: i32,
    pub hit5_dummy_poly_id0: i32,
    pub hit5_dummy_poly_id1: i32,
    pub hit6_vfx_id: i32,
    pub hit6_dummy_poly_id0: i32,
    pub hit6_dummy_poly_id1: i32,
    pub hit7_vfx_id: i32,
    pub hit7_dummy_poly_id0: i32,
    pub hit7_dummy_poly_id1: i32,
    pub hit4_radius: f32,
    pub hit5_radius: f32,
    pub hit6_radius: f32,
    pub hit7_radius: f32,
    pub hit8_radius: f32,
    pub hit9_radius: f32,
    pub hit10_radius: f32,
    pub hit11_radius: f32,
    pub hit12_radius: f32,
    pub hit13_radius: f32,
    pub hit14_radius: f32,
    pub hit15_radius: f32,
    pub hit4_dmy_poly1: i16,
    pub hit5_dmy_poly1: i16,
    pub hit6_dmy_poly1: i16,
    pub hit7_dmy_poly1: i16,
    pub hit8_dmy_poly1: i16,
    pub hit9_dmy_poly1: i16,
    pub hit10_dmy_poly1: i16,
    pub hit11_dmy_poly1: i16,
    pub hit12_dmy_poly1: i16,
    pub hit13_dmy_poly1: i16,
    pub hit14_dmy_poly1: i16,
    pub hit15_dmy_poly1: i16,
    pub hit4_dmy_poly2: i16,
    pub hit5_dmy_poly2: i16,
    pub hit6_dmy_poly2: i16,
    pub hit7_dmy_poly2: i16,
    pub hit8_dmy_poly2: i16,
    pub hit9_dmy_poly2: i16,
    pub hit10_dmy_poly2: i16,
    pub hit11_dmy_poly2: i16,
    pub hit12_dmy_poly2: i16,
    pub hit13_dmy_poly2: i16,
    pub hit14_dmy_poly2: i16,
    pub hit15_dmy_poly2: i16,
    pub hit4_hit_type: u8,
    pub hit5_hit_type: u8,
    pub hit6_hit_type: u8,
    pub hit7_hit_type: u8,
    pub hit8_hit_type: u8,
    pub hit9_hit_type: u8,
    pub hit10_hit_type: u8,
    pub hit11_hit_type: u8,
    pub hit12_hit_type: u8,
    pub hit13_hit_type: u8,
    pub hit14_hit_type: u8,
    pub hit15_hit_type: u8,
    pub field0x174: i32,
    pub field0x178: i32,
    pub field0x17_c: i32,
    pub def_material_val0: i16,
    pub def_material_val1: i16,
    pub def_material_val2: i16,
    pub atk_dark_correction: i16,
    pub atk_dark: i16,
    pub bitfield2: u8,
    pub field0x18_b: u8,
    pub phys_sp_correction: i16,
    pub mag_sp_correction: i16,
    pub fire_sp_correction: i16,
    pub thun_sp_correction: i16,
    pub damage_level_parameter: u8,
    pub field0x195: u8,
    pub dark_sp_correction: i16,
    pub atk_element_correct_id: i32,
    pub pad2: [u8; 12],
}

impl AtkParam_Npc {
    #[allow(unused)]
    pub fn set_disable_guard(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_guard(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_stamina_attack(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_stamina_attack(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_hit_sp_effect(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_hit_sp_effect(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_ignore_notify_miss_swing_for_ai(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn ignore_notify_miss_swing_for_ai(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_repeat_hit_sfx(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn repeat_hit_sfx(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_arrow_atk(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_arrow_atk(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ghost_atk(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ghost_atk(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_disable_no_damage(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_disable_no_damage(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_oppose_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn oppose_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_friendly_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn friendly_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_self_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn self_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_charge_atk(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_charge_atk(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_share_hit_list(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_share_hit_list(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_check_obj_penetration(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_check_obj_penetration(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x81(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x81(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x81_0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x81_0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_charge_atk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_charge_atk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_charge_atk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_charge_atk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for AtkParam_Npc {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.hit0_radius;
        if ui.input_float("Hit0_Radius", &mut i).build() {
            self.hit0_radius = i;
        }

        let mut i: f32 = self.hit1_radius;
        if ui.input_float("Hit1_Radius", &mut i).build() {
            self.hit1_radius = i;
        }

        let mut i: f32 = self.hit2_radius;
        if ui.input_float("Hit2_Radius", &mut i).build() {
            self.hit2_radius = i;
        }

        let mut i: f32 = self.hit3_radius;
        if ui.input_float("Hit3_Radius", &mut i).build() {
            self.hit3_radius = i;
        }

        let mut i: f32 = self.knockback_dist;
        if ui.input_float("KnockbackDist", &mut i).build() {
            self.knockback_dist = i;
        }

        let mut i: f32 = self.hit_stop_time;
        if ui.input_float("HitStopTime", &mut i).build() {
            self.hit_stop_time = i;
        }

        let mut i: i32 = self.sp_effect0 as _;
        if ui.input_int("spEffect0", &mut i).build() {
            self.sp_effect0 = i as _;
        }

        let mut i: i32 = self.sp_effect1 as _;
        if ui.input_int("spEffect1", &mut i).build() {
            self.sp_effect1 = i as _;
        }

        let mut i: i32 = self.sp_effect2 as _;
        if ui.input_int("spEffect2", &mut i).build() {
            self.sp_effect2 = i as _;
        }

        let mut i: i32 = self.sp_effect3 as _;
        if ui.input_int("spEffect3", &mut i).build() {
            self.sp_effect3 = i as _;
        }

        let mut i: i32 = self.sp_effect4 as _;
        if ui.input_int("spEffect4", &mut i).build() {
            self.sp_effect4 = i as _;
        }

        let mut i: i32 = self.hit0_dmy_poly1 as _;
        if ui.input_int("Hit0_DmyPoly1", &mut i).build() {
            self.hit0_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit1_dmy_poly1 as _;
        if ui.input_int("Hit1_DmyPoly1", &mut i).build() {
            self.hit1_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit2_dmy_poly1 as _;
        if ui.input_int("Hit2_DmyPoly1", &mut i).build() {
            self.hit2_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit3_dmy_poly1 as _;
        if ui.input_int("Hit3_DmyPoly1", &mut i).build() {
            self.hit3_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit0_dmy_poly2 as _;
        if ui.input_int("Hit0_DmyPoly2", &mut i).build() {
            self.hit0_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit1_dmy_poly2 as _;
        if ui.input_int("Hit1_DmyPoly2", &mut i).build() {
            self.hit1_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit2_dmy_poly2 as _;
        if ui.input_int("Hit2_DmyPoly2", &mut i).build() {
            self.hit2_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit3_dmy_poly2 as _;
        if ui.input_int("Hit3_DmyPoly2", &mut i).build() {
            self.hit3_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.blowing as _;
        if ui.input_int("Blowing", &mut i).build() {
            self.blowing = i as _;
        }

        let mut i: i32 = self.atk_phys_correction as _;
        if ui.input_int("AtkPhysCorrection", &mut i).build() {
            self.atk_phys_correction = i as _;
        }

        let mut i: i32 = self.atk_mag_correction as _;
        if ui.input_int("AtkMagCorrection", &mut i).build() {
            self.atk_mag_correction = i as _;
        }

        let mut i: i32 = self.atk_fire_correction as _;
        if ui.input_int("AtkFireCorrection", &mut i).build() {
            self.atk_fire_correction = i as _;
        }

        let mut i: i32 = self.atk_thun_correction as _;
        if ui.input_int("AtkThunCorrection", &mut i).build() {
            self.atk_thun_correction = i as _;
        }

        let mut i: i32 = self.atk_stam_correction as _;
        if ui.input_int("AtkStamCorrection", &mut i).build() {
            self.atk_stam_correction = i as _;
        }

        let mut i: i32 = self.guard_atk_rate_correction as _;
        if ui.input_int("GuardAtkRateCorrection", &mut i).build() {
            self.guard_atk_rate_correction = i as _;
        }

        let mut i: i32 = self.guard_break_correction as _;
        if ui.input_int("GuardBreakCorrection", &mut i).build() {
            self.guard_break_correction = i as _;
        }

        let mut i: i32 = self.atk_throw_escape_correction as _;
        if ui.input_int("AtkThrowEscapeCorrection", &mut i).build() {
            self.atk_throw_escape_correction = i as _;
        }

        let mut i: i32 = self.atk_super_armor_correction as _;
        if ui.input_int("AtkSuperArmorCorrection", &mut i).build() {
            self.atk_super_armor_correction = i as _;
        }

        let mut i: i32 = self.atk_phys as _;
        if ui.input_int("AtkPhys", &mut i).build() {
            self.atk_phys = i as _;
        }

        let mut i: i32 = self.atk_mag as _;
        if ui.input_int("AtkMag", &mut i).build() {
            self.atk_mag = i as _;
        }

        let mut i: i32 = self.atk_fire as _;
        if ui.input_int("AtkFire", &mut i).build() {
            self.atk_fire = i as _;
        }

        let mut i: i32 = self.atk_thun as _;
        if ui.input_int("AtkThun", &mut i).build() {
            self.atk_thun = i as _;
        }

        let mut i: i32 = self.atk_stam as _;
        if ui.input_int("AtkStam", &mut i).build() {
            self.atk_stam = i as _;
        }

        let mut i: i32 = self.guard_atk_rate as _;
        if ui.input_int("GuardAtkRate", &mut i).build() {
            self.guard_atk_rate = i as _;
        }

        let mut i: i32 = self.guard_break_rate as _;
        if ui.input_int("GuardBreakRate", &mut i).build() {
            self.guard_break_rate = i as _;
        }

        let mut i: i32 = self.atk_super_armor as _;
        if ui.input_int("AtkSuperArmor", &mut i).build() {
            self.atk_super_armor = i as _;
        }

        let mut i: i32 = self.atk_throw_escape as _;
        if ui.input_int("AtkThrowEscape", &mut i).build() {
            self.atk_throw_escape = i as _;
        }

        let mut i: i32 = self.atk_obj as _;
        if ui.input_int("AtkObj", &mut i).build() {
            self.atk_obj = i as _;
        }

        let mut i: i32 = self.guard_stamina_cut_rate as _;
        if ui.input_int("GuardStaminaCutRate", &mut i).build() {
            self.guard_stamina_cut_rate = i as _;
        }

        let mut i: i32 = self.guard_rate as _;
        if ui.input_int("GuardRate", &mut i).build() {
            self.guard_rate = i as _;
        }

        let mut i: i32 = self.throw_type_id as _;
        if ui.input_int("ThrowTypeID", &mut i).build() {
            self.throw_type_id = i as _;
        }

        let mut i: i32 = self.hit0_hit_type as _;
        if ui.input_int("Hit0_hitType", &mut i).build() {
            self.hit0_hit_type = i as _;
        }

        let mut i: i32 = self.hit1_hit_type as _;
        if ui.input_int("Hit1_hitType", &mut i).build() {
            self.hit1_hit_type = i as _;
        }

        let mut i: i32 = self.hit2_hit_type as _;
        if ui.input_int("Hit2_hitType", &mut i).build() {
            self.hit2_hit_type = i as _;
        }

        let mut i: i32 = self.hit3_hit_type as _;
        if ui.input_int("Hit3_hitType", &mut i).build() {
            self.hit3_hit_type = i as _;
        }

        let mut i: i32 = self.hit0_priority as _;
        if ui.input_int("hit0_Priority", &mut i).build() {
            self.hit0_priority = i as _;
        }

        let mut i: i32 = self.hit1_priority as _;
        if ui.input_int("hit1_Priority", &mut i).build() {
            self.hit1_priority = i as _;
        }

        let mut i: i32 = self.hit2_priority as _;
        if ui.input_int("hit2_Priority", &mut i).build() {
            self.hit2_priority = i as _;
        }

        let mut i: i32 = self.hit3_priority as _;
        if ui.input_int("hit3_Priority", &mut i).build() {
            self.hit3_priority = i as _;
        }

        let mut i: i32 = self.damage_level as _;
        if ui.input_int("damageLevel", &mut i).build() {
            self.damage_level = i as _;
        }

        let mut i: i32 = self.map_hit_type as _;
        if ui.input_int("mapHitType", &mut i).build() {
            self.map_hit_type = i as _;
        }

        let mut i: i32 = self.guard_cut_cancel_rate as _;
        if ui.input_int("GuardCutCancelRate", &mut i).build() {
            self.guard_cut_cancel_rate = i as _;
        }

        let mut i: i32 = self.atk_attribute as _;
        if ui.input_int("AtkAttribute", &mut i).build() {
            self.atk_attribute = i as _;
        }

        let mut i: i32 = self.sp_attribute as _;
        if ui.input_int("spAttribute", &mut i).build() {
            self.sp_attribute = i as _;
        }

        let mut i: i32 = self.atk_type as _;
        if ui.input_int("atkType", &mut i).build() {
            self.atk_type = i as _;
        }

        let mut i: i32 = self.atk_material as _;
        if ui.input_int("atkMaterial", &mut i).build() {
            self.atk_material = i as _;
        }

        let mut i: i32 = self.atk_size as _;
        if ui.input_int("atkSize", &mut i).build() {
            self.atk_size = i as _;
        }

        let mut i: i32 = self.def_material as _;
        if ui.input_int("DefMaterial", &mut i).build() {
            self.def_material = i as _;
        }

        let mut i: i32 = self.def_sfx_material as _;
        if ui.input_int("DefSfxMaterial", &mut i).build() {
            self.def_sfx_material = i as _;
        }

        let mut i: i32 = self.hit_source_type as _;
        if ui.input_int("HitSourceType", &mut i).build() {
            self.hit_source_type = i as _;
        }

        let mut i: i32 = self.throw_flag as _;
        if ui.input_int("ThrowFlag", &mut i).build() {
            self.throw_flag = i as _;
        }

        let mut b: bool = self.disable_guard();
        if ui.checkbox("disableGuard", &mut b) {
            self.set_disable_guard(b);
        }

        let mut b: bool = self.disable_stamina_attack();
        if ui.checkbox("disableStaminaAttack", &mut b) {
            self.set_disable_stamina_attack(b);
        }

        let mut b: bool = self.disable_hit_sp_effect();
        if ui.checkbox("disableHitSpEffect", &mut b) {
            self.set_disable_hit_sp_effect(b);
        }

        let mut b: bool = self.ignore_notify_miss_swing_for_ai();
        if ui.checkbox("IgnoreNotifyMissSwingForAI", &mut b) {
            self.set_ignore_notify_miss_swing_for_ai(b);
        }

        let mut b: bool = self.repeat_hit_sfx();
        if ui.checkbox("repeatHitSfx", &mut b) {
            self.set_repeat_hit_sfx(b);
        }

        let mut b: bool = self.is_arrow_atk();
        if ui.checkbox("IsArrowAtk", &mut b) {
            self.set_is_arrow_atk(b);
        }

        let mut b: bool = self.is_ghost_atk();
        if ui.checkbox("IsGhostAtk", &mut b) {
            self.set_is_ghost_atk(b);
        }

        let mut b: bool = self.is_disable_no_damage();
        if ui.checkbox("isDisableNoDamage", &mut b) {
            self.set_is_disable_no_damage(b);
        }

        let mut i: i32 = self.atk_pow_for_sfx_se as _;
        if ui.input_int("atkPowForSfxSe", &mut i).build() {
            self.atk_pow_for_sfx_se = i as _;
        }

        let mut i: i32 = self.atk_dir_for_sfx_se as _;
        if ui.input_int("atkDirForSfxSe", &mut i).build() {
            self.atk_dir_for_sfx_se = i as _;
        }

        let mut b: bool = self.oppose_target();
        if ui.checkbox("opposeTarget", &mut b) {
            self.set_oppose_target(b);
        }

        let mut b: bool = self.friendly_target();
        if ui.checkbox("friendlyTarget", &mut b) {
            self.set_friendly_target(b);
        }

        let mut b: bool = self.self_target();
        if ui.checkbox("selfTarget", &mut b) {
            self.set_self_target(b);
        }

        let mut b: bool = self.is_charge_atk();
        if ui.checkbox("isChargeAtk", &mut b) {
            self.set_is_charge_atk(b);
        }

        let mut b: bool = self.is_share_hit_list();
        if ui.checkbox("isShareHitList", &mut b) {
            self.set_is_share_hit_list(b);
        }

        let mut b: bool = self.is_check_obj_penetration();
        if ui.checkbox("isCheckObjPenetration", &mut b) {
            self.set_is_check_obj_penetration(b);
        }

        let mut b: bool = self.field0x81();
        if ui.checkbox("0x81", &mut b) {
            self.set_field0x81(b);
        }

        let mut b: bool = self.field0x81_0();
        if ui.checkbox("0x81_0", &mut b) {
            self.set_field0x81_0(b);
        }

        let mut i: i32 = self.pad1 as _;
        if ui.input_int("pad1", &mut i).build() {
            self.pad1 = i as _;
        }

        let mut i: i32 = self.regainable_slot_id as _;
        if ui.input_int("regainableSlotId", &mut i).build() {
            self.regainable_slot_id = i as _;
        }

        let mut i: i32 = self.death_cause_id as _;
        if ui.input_int("deathCauseId", &mut i).build() {
            self.death_cause_id = i as _;
        }

        let mut i: i32 = self.decal_id1 as _;
        if ui.input_int("decalId1", &mut i).build() {
            self.decal_id1 = i as _;
        }

        let mut i: i32 = self.decal_id2 as _;
        if ui.input_int("decalId2", &mut i).build() {
            self.decal_id2 = i as _;
        }

        let mut i: i32 = self.spawn_ai_sound_id as _;
        if ui.input_int("spawnAiSoundId", &mut i).build() {
            self.spawn_ai_sound_id = i as _;
        }

        let mut i: i32 = self.hit_ai_sound_id as _;
        if ui.input_int("HitAiSoundId", &mut i).build() {
            self.hit_ai_sound_id = i as _;
        }

        let mut i: i32 = self.rumble_id0 as _;
        if ui.input_int("RumbleId0", &mut i).build() {
            self.rumble_id0 = i as _;
        }

        let mut i: i32 = self.rumble_id1 as _;
        if ui.input_int("RumbleId1", &mut i).build() {
            self.rumble_id1 = i as _;
        }

        let mut i: i32 = self.rumble_id2 as _;
        if ui.input_int("RumbleId2", &mut i).build() {
            self.rumble_id2 = i as _;
        }

        let mut i: i32 = self.rumble_id3 as _;
        if ui.input_int("RumbleId3", &mut i).build() {
            self.rumble_id3 = i as _;
        }

        let mut i: i32 = self.hit0_vfx_id as _;
        if ui.input_int("Hit0_VfxId", &mut i).build() {
            self.hit0_vfx_id = i as _;
        }

        let mut i: i32 = self.hit0_dummy_poly_id0 as _;
        if ui.input_int("Hit0_DummyPolyId0", &mut i).build() {
            self.hit0_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit0_dummy_poly_id1 as _;
        if ui.input_int("Hit0_DummyPolyId1", &mut i).build() {
            self.hit0_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit1_vfx_id1 as _;
        if ui.input_int("Hit1_VfxId1", &mut i).build() {
            self.hit1_vfx_id1 = i as _;
        }

        let mut i: i32 = self.hit1_dummy_poly_id0 as _;
        if ui.input_int("Hit1_DummyPolyId0", &mut i).build() {
            self.hit1_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit1_dummy_poly_id1 as _;
        if ui.input_int("Hit1_DummyPolyId1", &mut i).build() {
            self.hit1_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit2_vfx_id as _;
        if ui.input_int("Hit2_VfxId", &mut i).build() {
            self.hit2_vfx_id = i as _;
        }

        let mut i: i32 = self.hit2_dummy_poly_id0 as _;
        if ui.input_int("Hit2_DummyPolyId0", &mut i).build() {
            self.hit2_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit2_dummy_poly_id1 as _;
        if ui.input_int("Hit2_DummyPolyId1", &mut i).build() {
            self.hit2_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit3_vfx_id as _;
        if ui.input_int("Hit3_VfxId", &mut i).build() {
            self.hit3_vfx_id = i as _;
        }

        let mut i: i32 = self.hit3_dummy_poly_id0 as _;
        if ui.input_int("Hit3_DummyPolyId0", &mut i).build() {
            self.hit3_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit3_dummy_poly_id1 as _;
        if ui.input_int("Hit3_DummyPolyId1", &mut i).build() {
            self.hit3_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit4_vfx_id as _;
        if ui.input_int("Hit4_VfxId", &mut i).build() {
            self.hit4_vfx_id = i as _;
        }

        let mut i: i32 = self.hit4_dummy_poly_id0 as _;
        if ui.input_int("Hit4_DummyPolyId0", &mut i).build() {
            self.hit4_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit4_dummy_poly_id1 as _;
        if ui.input_int("Hit4_DummyPolyId1", &mut i).build() {
            self.hit4_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit5_vfx_id as _;
        if ui.input_int("Hit5_VfxId", &mut i).build() {
            self.hit5_vfx_id = i as _;
        }

        let mut i: i32 = self.hit5_dummy_poly_id0 as _;
        if ui.input_int("Hit5_DummyPolyId0", &mut i).build() {
            self.hit5_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit5_dummy_poly_id1 as _;
        if ui.input_int("Hit5_DummyPolyId1", &mut i).build() {
            self.hit5_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit6_vfx_id as _;
        if ui.input_int("Hit6_VfxId", &mut i).build() {
            self.hit6_vfx_id = i as _;
        }

        let mut i: i32 = self.hit6_dummy_poly_id0 as _;
        if ui.input_int("Hit6_DummyPolyId0", &mut i).build() {
            self.hit6_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit6_dummy_poly_id1 as _;
        if ui.input_int("Hit6_DummyPolyId1", &mut i).build() {
            self.hit6_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit7_vfx_id as _;
        if ui.input_int("Hit7_VfxId", &mut i).build() {
            self.hit7_vfx_id = i as _;
        }

        let mut i: i32 = self.hit7_dummy_poly_id0 as _;
        if ui.input_int("Hit7_DummyPolyId0", &mut i).build() {
            self.hit7_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit7_dummy_poly_id1 as _;
        if ui.input_int("Hit7_DummyPolyId1", &mut i).build() {
            self.hit7_dummy_poly_id1 = i as _;
        }

        let mut i: f32 = self.hit4_radius;
        if ui.input_float("Hit4_Radius", &mut i).build() {
            self.hit4_radius = i;
        }

        let mut i: f32 = self.hit5_radius;
        if ui.input_float("Hit5_Radius", &mut i).build() {
            self.hit5_radius = i;
        }

        let mut i: f32 = self.hit6_radius;
        if ui.input_float("Hit6_Radius", &mut i).build() {
            self.hit6_radius = i;
        }

        let mut i: f32 = self.hit7_radius;
        if ui.input_float("Hit7_Radius", &mut i).build() {
            self.hit7_radius = i;
        }

        let mut i: f32 = self.hit8_radius;
        if ui.input_float("Hit8_Radius", &mut i).build() {
            self.hit8_radius = i;
        }

        let mut i: f32 = self.hit9_radius;
        if ui.input_float("Hit9_Radius", &mut i).build() {
            self.hit9_radius = i;
        }

        let mut i: f32 = self.hit10_radius;
        if ui.input_float("Hit10_Radius", &mut i).build() {
            self.hit10_radius = i;
        }

        let mut i: f32 = self.hit11_radius;
        if ui.input_float("Hit11_Radius", &mut i).build() {
            self.hit11_radius = i;
        }

        let mut i: f32 = self.hit12_radius;
        if ui.input_float("Hit12_Radius", &mut i).build() {
            self.hit12_radius = i;
        }

        let mut i: f32 = self.hit13_radius;
        if ui.input_float("Hit13_Radius", &mut i).build() {
            self.hit13_radius = i;
        }

        let mut i: f32 = self.hit14_radius;
        if ui.input_float("Hit14_Radius", &mut i).build() {
            self.hit14_radius = i;
        }

        let mut i: f32 = self.hit15_radius;
        if ui.input_float("Hit15_Radius", &mut i).build() {
            self.hit15_radius = i;
        }

        let mut i: i32 = self.hit4_dmy_poly1 as _;
        if ui.input_int("Hit4_DmyPoly1", &mut i).build() {
            self.hit4_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit5_dmy_poly1 as _;
        if ui.input_int("Hit5_DmyPoly1", &mut i).build() {
            self.hit5_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit6_dmy_poly1 as _;
        if ui.input_int("Hit6_DmyPoly1", &mut i).build() {
            self.hit6_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit7_dmy_poly1 as _;
        if ui.input_int("Hit7_DmyPoly1", &mut i).build() {
            self.hit7_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit8_dmy_poly1 as _;
        if ui.input_int("Hit8_DmyPoly1", &mut i).build() {
            self.hit8_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit9_dmy_poly1 as _;
        if ui.input_int("Hit9_DmyPoly1", &mut i).build() {
            self.hit9_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit10_dmy_poly1 as _;
        if ui.input_int("Hit10_DmyPoly1", &mut i).build() {
            self.hit10_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit11_dmy_poly1 as _;
        if ui.input_int("Hit11_DmyPoly1", &mut i).build() {
            self.hit11_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit12_dmy_poly1 as _;
        if ui.input_int("Hit12_DmyPoly1", &mut i).build() {
            self.hit12_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit13_dmy_poly1 as _;
        if ui.input_int("Hit13_DmyPoly1", &mut i).build() {
            self.hit13_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit14_dmy_poly1 as _;
        if ui.input_int("Hit14_DmyPoly1", &mut i).build() {
            self.hit14_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit15_dmy_poly1 as _;
        if ui.input_int("Hit15_DmyPoly1", &mut i).build() {
            self.hit15_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit4_dmy_poly2 as _;
        if ui.input_int("Hit4_DmyPoly2", &mut i).build() {
            self.hit4_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit5_dmy_poly2 as _;
        if ui.input_int("Hit5_DmyPoly2", &mut i).build() {
            self.hit5_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit6_dmy_poly2 as _;
        if ui.input_int("Hit6_DmyPoly2", &mut i).build() {
            self.hit6_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit7_dmy_poly2 as _;
        if ui.input_int("Hit7_DmyPoly2", &mut i).build() {
            self.hit7_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit8_dmy_poly2 as _;
        if ui.input_int("Hit8_DmyPoly2", &mut i).build() {
            self.hit8_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit9_dmy_poly2 as _;
        if ui.input_int("Hit9_DmyPoly2", &mut i).build() {
            self.hit9_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit10_dmy_poly2 as _;
        if ui.input_int("Hit10_DmyPoly2", &mut i).build() {
            self.hit10_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit11_dmy_poly2 as _;
        if ui.input_int("Hit11_DmyPoly2", &mut i).build() {
            self.hit11_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit12_dmy_poly2 as _;
        if ui.input_int("Hit12_DmyPoly2", &mut i).build() {
            self.hit12_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit13_dmy_poly2 as _;
        if ui.input_int("Hit13_DmyPoly2", &mut i).build() {
            self.hit13_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit14_dmy_poly2 as _;
        if ui.input_int("Hit14_DmyPoly2", &mut i).build() {
            self.hit14_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit15_dmy_poly2 as _;
        if ui.input_int("Hit15_DmyPoly2", &mut i).build() {
            self.hit15_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit4_hit_type as _;
        if ui.input_int("Hit4_hitType", &mut i).build() {
            self.hit4_hit_type = i as _;
        }

        let mut i: i32 = self.hit5_hit_type as _;
        if ui.input_int("Hit5_hitType", &mut i).build() {
            self.hit5_hit_type = i as _;
        }

        let mut i: i32 = self.hit6_hit_type as _;
        if ui.input_int("Hit6_hitType", &mut i).build() {
            self.hit6_hit_type = i as _;
        }

        let mut i: i32 = self.hit7_hit_type as _;
        if ui.input_int("Hit7_hitType", &mut i).build() {
            self.hit7_hit_type = i as _;
        }

        let mut i: i32 = self.hit8_hit_type as _;
        if ui.input_int("Hit8_hitType", &mut i).build() {
            self.hit8_hit_type = i as _;
        }

        let mut i: i32 = self.hit9_hit_type as _;
        if ui.input_int("Hit9_hitType", &mut i).build() {
            self.hit9_hit_type = i as _;
        }

        let mut i: i32 = self.hit10_hit_type as _;
        if ui.input_int("Hit10_hitType", &mut i).build() {
            self.hit10_hit_type = i as _;
        }

        let mut i: i32 = self.hit11_hit_type as _;
        if ui.input_int("Hit11_hitType", &mut i).build() {
            self.hit11_hit_type = i as _;
        }

        let mut i: i32 = self.hit12_hit_type as _;
        if ui.input_int("Hit12_hitType", &mut i).build() {
            self.hit12_hit_type = i as _;
        }

        let mut i: i32 = self.hit13_hit_type as _;
        if ui.input_int("Hit13_hitType", &mut i).build() {
            self.hit13_hit_type = i as _;
        }

        let mut i: i32 = self.hit14_hit_type as _;
        if ui.input_int("Hit14_hitType", &mut i).build() {
            self.hit14_hit_type = i as _;
        }

        let mut i: i32 = self.hit15_hit_type as _;
        if ui.input_int("Hit15_hitType", &mut i).build() {
            self.hit15_hit_type = i as _;
        }

        let mut i: i32 = self.field0x174 as _;
        if ui.input_int("0x174", &mut i).build() {
            self.field0x174 = i as _;
        }

        let mut i: i32 = self.field0x178 as _;
        if ui.input_int("0x178", &mut i).build() {
            self.field0x178 = i as _;
        }

        let mut i: i32 = self.field0x17_c as _;
        if ui.input_int("0x17C", &mut i).build() {
            self.field0x17_c = i as _;
        }

        let mut i: i32 = self.def_material_val0 as _;
        if ui.input_int("defMaterialVal0", &mut i).build() {
            self.def_material_val0 = i as _;
        }

        let mut i: i32 = self.def_material_val1 as _;
        if ui.input_int("defMaterialVal1", &mut i).build() {
            self.def_material_val1 = i as _;
        }

        let mut i: i32 = self.def_material_val2 as _;
        if ui.input_int("defMaterialVal2", &mut i).build() {
            self.def_material_val2 = i as _;
        }

        let mut i: i32 = self.atk_dark_correction as _;
        if ui.input_int("atkDarkCorrection", &mut i).build() {
            self.atk_dark_correction = i as _;
        }

        let mut i: i32 = self.atk_dark as _;
        if ui.input_int("atkDark", &mut i).build() {
            self.atk_dark = i as _;
        }

        let mut b: bool = self.is_charge_atk2();
        if ui.checkbox("IsChargeAtk2", &mut b) {
            self.set_is_charge_atk2(b);
        }

        let mut b: bool = self.is_charge_atk3();
        if ui.checkbox("IsChargeAtk3", &mut b) {
            self.set_is_charge_atk3(b);
        }

        let mut b: bool = self.field0x18_a();
        if ui.checkbox("0x18A", &mut b) {
            self.set_field0x18_a(b);
        }

        let mut b: bool = self.field0x18_a_0();
        if ui.checkbox("0x18A_0", &mut b) {
            self.set_field0x18_a_0(b);
        }

        let mut b: bool = self.field0x18_a_1();
        if ui.checkbox("0x18A_1", &mut b) {
            self.set_field0x18_a_1(b);
        }

        let mut b: bool = self.field0x18_a_2();
        if ui.checkbox("0x18A_2", &mut b) {
            self.set_field0x18_a_2(b);
        }

        let mut b: bool = self.field0x18_a_3();
        if ui.checkbox("0x18A_3", &mut b) {
            self.set_field0x18_a_3(b);
        }

        let mut b: bool = self.field0x18_a_4();
        if ui.checkbox("0x18A_4", &mut b) {
            self.set_field0x18_a_4(b);
        }

        let mut i: i32 = self.field0x18_b as _;
        if ui.input_int("0x18B", &mut i).build() {
            self.field0x18_b = i as _;
        }

        let mut i: i32 = self.phys_sp_correction as _;
        if ui.input_int("physSpCorrection", &mut i).build() {
            self.phys_sp_correction = i as _;
        }

        let mut i: i32 = self.mag_sp_correction as _;
        if ui.input_int("magSpCorrection", &mut i).build() {
            self.mag_sp_correction = i as _;
        }

        let mut i: i32 = self.fire_sp_correction as _;
        if ui.input_int("fireSpCorrection", &mut i).build() {
            self.fire_sp_correction = i as _;
        }

        let mut i: i32 = self.thun_sp_correction as _;
        if ui.input_int("thunSpCorrection", &mut i).build() {
            self.thun_sp_correction = i as _;
        }

        let mut i: i32 = self.damage_level_parameter as _;
        if ui.input_int("damageLevelParameter", &mut i).build() {
            self.damage_level_parameter = i as _;
        }

        let mut i: i32 = self.field0x195 as _;
        if ui.input_int("0x195", &mut i).build() {
            self.field0x195 = i as _;
        }

        let mut i: i32 = self.dark_sp_correction as _;
        if ui.input_int("darkSpCorrection", &mut i).build() {
            self.dark_sp_correction = i as _;
        }

        let mut i: i32 = self.atk_element_correct_id as _;
        if ui.input_int("atkElementCorrectId", &mut i).build() {
            self.atk_element_correct_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct AtkParam_Pc {
    pub hit0_radius: f32,
    pub hit1_radius: f32,
    pub hit2_radius: f32,
    pub hit3_radius: f32,
    pub knockback_dist: f32,
    pub hit_stop_time: f32,
    pub sp_effect0: i32,
    pub sp_effect1: i32,
    pub sp_effect2: i32,
    pub sp_effect3: i32,
    pub sp_effect4: i32,
    pub hit0_dmy_poly1: i16,
    pub hit1_dmy_poly1: i16,
    pub hit2_dmy_poly1: i16,
    pub hit3_dmy_poly1: i16,
    pub hit0_dmy_poly2: i16,
    pub hit1_dmy_poly2: i16,
    pub hit2_dmy_poly2: i16,
    pub hit3_dmy_poly2: i16,
    pub blowing: i16,
    pub atk_phys_correction: i16,
    pub atk_mag_correction: i16,
    pub atk_fire_correction: i16,
    pub atk_thun_correction: i16,
    pub atk_stam_correction: i16,
    pub guard_atk_rate_correction: i16,
    pub guard_break_correction: i16,
    pub atk_throw_escape_correction: i16,
    pub atk_super_armor_correction: i16,
    pub atk_phys: i16,
    pub atk_mag: i16,
    pub atk_fire: i16,
    pub atk_thun: i16,
    pub atk_stam: i16,
    pub guard_atk_rate: i16,
    pub guard_break_rate: i16,
    pub atk_super_armor: i16,
    pub atk_throw_escape: i16,
    pub atk_obj: i16,
    pub guard_stamina_cut_rate: i16,
    pub guard_rate: i16,
    pub throw_type_id: i16,
    pub hit0_hit_type: u8,
    pub hit1_hit_type: u8,
    pub hit2_hit_type: u8,
    pub hit3_hit_type: u8,
    pub hit0_priority: u8,
    pub hit1_priority: u8,
    pub hit2_priority: u8,
    pub hit3_priority: u8,
    pub damage_level: u8,
    pub map_hit_type: u8,
    pub guard_cut_cancel_rate: u8,
    pub atk_attribute: i8,
    pub sp_attribute: i8,
    pub atk_type: i8,
    pub atk_material: i8,
    pub atk_size: i8,
    pub def_material: i8,
    pub def_sfx_material: i8,
    pub hit_source_type: u8,
    pub throw_flag: u8,
    pub bitfield0: u8,
    pub atk_pow_for_sfx_se: u8,
    pub atk_dir_for_sfx_se: u8,
    pub bitfield1: u8,
    pub pad1: u8,
    pub regainable_slot_id: u8,
    pub death_cause_id: i32,
    pub decal_id1: i32,
    pub decal_id2: i32,
    pub spawn_ai_sound_id: i32,
    pub hit_ai_sound_id: i32,
    pub rumble_id0: i32,
    pub rumble_id1: i32,
    pub rumble_id2: i32,
    pub rumble_id3: i32,
    pub hit0_vfx_id: i32,
    pub hit0_dummy_poly_id0: i32,
    pub hit0_dummy_poly_id1: i32,
    pub hit1_vfx_id1: i32,
    pub hit1_dummy_poly_id0: i32,
    pub hit1_dummy_poly_id1: i32,
    pub hit2_vfx_id: i32,
    pub hit2_dummy_poly_id0: i32,
    pub hit2_dummy_poly_id1: i32,
    pub hit3_vfx_id: i32,
    pub hit3_dummy_poly_id0: i32,
    pub hit3_dummy_poly_id1: i32,
    pub hit4_vfx_id: i32,
    pub hit4_dummy_poly_id0: i32,
    pub hit4_dummy_poly_id1: i32,
    pub hit5_vfx_id: i32,
    pub hit5_dummy_poly_id0: i32,
    pub hit5_dummy_poly_id1: i32,
    pub hit6_vfx_id: i32,
    pub hit6_dummy_poly_id0: i32,
    pub hit6_dummy_poly_id1: i32,
    pub hit7_vfx_id: i32,
    pub hit7_dummy_poly_id0: i32,
    pub hit7_dummy_poly_id1: i32,
    pub hit4_radius: f32,
    pub hit5_radius: f32,
    pub hit6_radius: f32,
    pub hit7_radius: f32,
    pub hit8_radius: f32,
    pub hit9_radius: f32,
    pub hit10_radius: f32,
    pub hit11_radius: f32,
    pub hit12_radius: f32,
    pub hit13_radius: f32,
    pub hit14_radius: f32,
    pub hit15_radius: f32,
    pub hit4_dmy_poly1: i16,
    pub hit5_dmy_poly1: i16,
    pub hit6_dmy_poly1: i16,
    pub hit7_dmy_poly1: i16,
    pub hit8_dmy_poly1: i16,
    pub hit9_dmy_poly1: i16,
    pub hit10_dmy_poly1: i16,
    pub hit11_dmy_poly1: i16,
    pub hit12_dmy_poly1: i16,
    pub hit13_dmy_poly1: i16,
    pub hit14_dmy_poly1: i16,
    pub hit15_dmy_poly1: i16,
    pub hit4_dmy_poly2: i16,
    pub hit5_dmy_poly2: i16,
    pub hit6_dmy_poly2: i16,
    pub hit7_dmy_poly2: i16,
    pub hit8_dmy_poly2: i16,
    pub hit9_dmy_poly2: i16,
    pub hit10_dmy_poly2: i16,
    pub hit11_dmy_poly2: i16,
    pub hit12_dmy_poly2: i16,
    pub hit13_dmy_poly2: i16,
    pub hit14_dmy_poly2: i16,
    pub hit15_dmy_poly2: i16,
    pub hit4_hit_type: u8,
    pub hit5_hit_type: u8,
    pub hit6_hit_type: u8,
    pub hit7_hit_type: u8,
    pub hit8_hit_type: u8,
    pub hit9_hit_type: u8,
    pub hit10_hit_type: u8,
    pub hit11_hit_type: u8,
    pub hit12_hit_type: u8,
    pub hit13_hit_type: u8,
    pub hit14_hit_type: u8,
    pub hit15_hit_type: u8,
    pub field0x174: i32,
    pub field0x178: i32,
    pub field0x17_c: i32,
    pub def_material_val0: i16,
    pub def_material_val1: i16,
    pub def_material_val2: i16,
    pub atk_dark_correction: i16,
    pub atk_dark: i16,
    pub bitfield2: u8,
    pub field0x18_b: u8,
    pub phys_sp_correction: i16,
    pub mag_sp_correction: i16,
    pub fire_sp_correction: i16,
    pub thun_sp_correction: i16,
    pub damage_level_parameter: u8,
    pub field0x195: u8,
    pub dark_sp_correction: i16,
    pub atk_element_correct_id: i32,
    pub pad2: [u8; 12],
}

impl AtkParam_Pc {
    #[allow(unused)]
    pub fn set_disable_guard(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_guard(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_stamina_attack(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_stamina_attack(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_hit_sp_effect(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_hit_sp_effect(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_ignore_notify_miss_swing_for_ai(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn ignore_notify_miss_swing_for_ai(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_repeat_hit_sfx(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn repeat_hit_sfx(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_arrow_atk(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_arrow_atk(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ghost_atk(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ghost_atk(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_disable_no_damage(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_disable_no_damage(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_oppose_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn oppose_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_friendly_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn friendly_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_self_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn self_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_charge_atk(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_charge_atk(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_share_hit_list(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_share_hit_list(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_check_obj_penetration(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_check_obj_penetration(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x81(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x81(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x81_0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x81_0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_charge_atk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_charge_atk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_charge_atk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_charge_atk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x18_a_4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x18_a_4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for AtkParam_Pc {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.hit0_radius;
        if ui.input_float("Hit0_Radius", &mut i).build() {
            self.hit0_radius = i;
        }

        let mut i: f32 = self.hit1_radius;
        if ui.input_float("Hit1_Radius", &mut i).build() {
            self.hit1_radius = i;
        }

        let mut i: f32 = self.hit2_radius;
        if ui.input_float("Hit2_Radius", &mut i).build() {
            self.hit2_radius = i;
        }

        let mut i: f32 = self.hit3_radius;
        if ui.input_float("Hit3_Radius", &mut i).build() {
            self.hit3_radius = i;
        }

        let mut i: f32 = self.knockback_dist;
        if ui.input_float("KnockbackDist", &mut i).build() {
            self.knockback_dist = i;
        }

        let mut i: f32 = self.hit_stop_time;
        if ui.input_float("HitStopTime", &mut i).build() {
            self.hit_stop_time = i;
        }

        let mut i: i32 = self.sp_effect0 as _;
        if ui.input_int("spEffect0", &mut i).build() {
            self.sp_effect0 = i as _;
        }

        let mut i: i32 = self.sp_effect1 as _;
        if ui.input_int("spEffect1", &mut i).build() {
            self.sp_effect1 = i as _;
        }

        let mut i: i32 = self.sp_effect2 as _;
        if ui.input_int("spEffect2", &mut i).build() {
            self.sp_effect2 = i as _;
        }

        let mut i: i32 = self.sp_effect3 as _;
        if ui.input_int("spEffect3", &mut i).build() {
            self.sp_effect3 = i as _;
        }

        let mut i: i32 = self.sp_effect4 as _;
        if ui.input_int("spEffect4", &mut i).build() {
            self.sp_effect4 = i as _;
        }

        let mut i: i32 = self.hit0_dmy_poly1 as _;
        if ui.input_int("Hit0_DmyPoly1", &mut i).build() {
            self.hit0_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit1_dmy_poly1 as _;
        if ui.input_int("Hit1_DmyPoly1", &mut i).build() {
            self.hit1_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit2_dmy_poly1 as _;
        if ui.input_int("Hit2_DmyPoly1", &mut i).build() {
            self.hit2_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit3_dmy_poly1 as _;
        if ui.input_int("Hit3_DmyPoly1", &mut i).build() {
            self.hit3_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit0_dmy_poly2 as _;
        if ui.input_int("Hit0_DmyPoly2", &mut i).build() {
            self.hit0_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit1_dmy_poly2 as _;
        if ui.input_int("Hit1_DmyPoly2", &mut i).build() {
            self.hit1_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit2_dmy_poly2 as _;
        if ui.input_int("Hit2_DmyPoly2", &mut i).build() {
            self.hit2_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit3_dmy_poly2 as _;
        if ui.input_int("Hit3_DmyPoly2", &mut i).build() {
            self.hit3_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.blowing as _;
        if ui.input_int("Blowing", &mut i).build() {
            self.blowing = i as _;
        }

        let mut i: i32 = self.atk_phys_correction as _;
        if ui.input_int("AtkPhysCorrection", &mut i).build() {
            self.atk_phys_correction = i as _;
        }

        let mut i: i32 = self.atk_mag_correction as _;
        if ui.input_int("AtkMagCorrection", &mut i).build() {
            self.atk_mag_correction = i as _;
        }

        let mut i: i32 = self.atk_fire_correction as _;
        if ui.input_int("AtkFireCorrection", &mut i).build() {
            self.atk_fire_correction = i as _;
        }

        let mut i: i32 = self.atk_thun_correction as _;
        if ui.input_int("AtkThunCorrection", &mut i).build() {
            self.atk_thun_correction = i as _;
        }

        let mut i: i32 = self.atk_stam_correction as _;
        if ui.input_int("AtkStamCorrection", &mut i).build() {
            self.atk_stam_correction = i as _;
        }

        let mut i: i32 = self.guard_atk_rate_correction as _;
        if ui.input_int("GuardAtkRateCorrection", &mut i).build() {
            self.guard_atk_rate_correction = i as _;
        }

        let mut i: i32 = self.guard_break_correction as _;
        if ui.input_int("GuardBreakCorrection", &mut i).build() {
            self.guard_break_correction = i as _;
        }

        let mut i: i32 = self.atk_throw_escape_correction as _;
        if ui.input_int("AtkThrowEscapeCorrection", &mut i).build() {
            self.atk_throw_escape_correction = i as _;
        }

        let mut i: i32 = self.atk_super_armor_correction as _;
        if ui.input_int("AtkSuperArmorCorrection", &mut i).build() {
            self.atk_super_armor_correction = i as _;
        }

        let mut i: i32 = self.atk_phys as _;
        if ui.input_int("AtkPhys", &mut i).build() {
            self.atk_phys = i as _;
        }

        let mut i: i32 = self.atk_mag as _;
        if ui.input_int("AtkMag", &mut i).build() {
            self.atk_mag = i as _;
        }

        let mut i: i32 = self.atk_fire as _;
        if ui.input_int("AtkFire", &mut i).build() {
            self.atk_fire = i as _;
        }

        let mut i: i32 = self.atk_thun as _;
        if ui.input_int("AtkThun", &mut i).build() {
            self.atk_thun = i as _;
        }

        let mut i: i32 = self.atk_stam as _;
        if ui.input_int("AtkStam", &mut i).build() {
            self.atk_stam = i as _;
        }

        let mut i: i32 = self.guard_atk_rate as _;
        if ui.input_int("GuardAtkRate", &mut i).build() {
            self.guard_atk_rate = i as _;
        }

        let mut i: i32 = self.guard_break_rate as _;
        if ui.input_int("GuardBreakRate", &mut i).build() {
            self.guard_break_rate = i as _;
        }

        let mut i: i32 = self.atk_super_armor as _;
        if ui.input_int("AtkSuperArmor", &mut i).build() {
            self.atk_super_armor = i as _;
        }

        let mut i: i32 = self.atk_throw_escape as _;
        if ui.input_int("AtkThrowEscape", &mut i).build() {
            self.atk_throw_escape = i as _;
        }

        let mut i: i32 = self.atk_obj as _;
        if ui.input_int("AtkObj", &mut i).build() {
            self.atk_obj = i as _;
        }

        let mut i: i32 = self.guard_stamina_cut_rate as _;
        if ui.input_int("GuardStaminaCutRate", &mut i).build() {
            self.guard_stamina_cut_rate = i as _;
        }

        let mut i: i32 = self.guard_rate as _;
        if ui.input_int("GuardRate", &mut i).build() {
            self.guard_rate = i as _;
        }

        let mut i: i32 = self.throw_type_id as _;
        if ui.input_int("ThrowTypeID", &mut i).build() {
            self.throw_type_id = i as _;
        }

        let mut i: i32 = self.hit0_hit_type as _;
        if ui.input_int("Hit0_hitType", &mut i).build() {
            self.hit0_hit_type = i as _;
        }

        let mut i: i32 = self.hit1_hit_type as _;
        if ui.input_int("Hit1_hitType", &mut i).build() {
            self.hit1_hit_type = i as _;
        }

        let mut i: i32 = self.hit2_hit_type as _;
        if ui.input_int("Hit2_hitType", &mut i).build() {
            self.hit2_hit_type = i as _;
        }

        let mut i: i32 = self.hit3_hit_type as _;
        if ui.input_int("Hit3_hitType", &mut i).build() {
            self.hit3_hit_type = i as _;
        }

        let mut i: i32 = self.hit0_priority as _;
        if ui.input_int("hit0_Priority", &mut i).build() {
            self.hit0_priority = i as _;
        }

        let mut i: i32 = self.hit1_priority as _;
        if ui.input_int("hit1_Priority", &mut i).build() {
            self.hit1_priority = i as _;
        }

        let mut i: i32 = self.hit2_priority as _;
        if ui.input_int("hit2_Priority", &mut i).build() {
            self.hit2_priority = i as _;
        }

        let mut i: i32 = self.hit3_priority as _;
        if ui.input_int("hit3_Priority", &mut i).build() {
            self.hit3_priority = i as _;
        }

        let mut i: i32 = self.damage_level as _;
        if ui.input_int("damageLevel", &mut i).build() {
            self.damage_level = i as _;
        }

        let mut i: i32 = self.map_hit_type as _;
        if ui.input_int("mapHitType", &mut i).build() {
            self.map_hit_type = i as _;
        }

        let mut i: i32 = self.guard_cut_cancel_rate as _;
        if ui.input_int("GuardCutCancelRate", &mut i).build() {
            self.guard_cut_cancel_rate = i as _;
        }

        let mut i: i32 = self.atk_attribute as _;
        if ui.input_int("AtkAttribute", &mut i).build() {
            self.atk_attribute = i as _;
        }

        let mut i: i32 = self.sp_attribute as _;
        if ui.input_int("spAttribute", &mut i).build() {
            self.sp_attribute = i as _;
        }

        let mut i: i32 = self.atk_type as _;
        if ui.input_int("atkType", &mut i).build() {
            self.atk_type = i as _;
        }

        let mut i: i32 = self.atk_material as _;
        if ui.input_int("atkMaterial", &mut i).build() {
            self.atk_material = i as _;
        }

        let mut i: i32 = self.atk_size as _;
        if ui.input_int("atkSize", &mut i).build() {
            self.atk_size = i as _;
        }

        let mut i: i32 = self.def_material as _;
        if ui.input_int("DefMaterial", &mut i).build() {
            self.def_material = i as _;
        }

        let mut i: i32 = self.def_sfx_material as _;
        if ui.input_int("DefSfxMaterial", &mut i).build() {
            self.def_sfx_material = i as _;
        }

        let mut i: i32 = self.hit_source_type as _;
        if ui.input_int("HitSourceType", &mut i).build() {
            self.hit_source_type = i as _;
        }

        let mut i: i32 = self.throw_flag as _;
        if ui.input_int("ThrowFlag", &mut i).build() {
            self.throw_flag = i as _;
        }

        let mut b: bool = self.disable_guard();
        if ui.checkbox("disableGuard", &mut b) {
            self.set_disable_guard(b);
        }

        let mut b: bool = self.disable_stamina_attack();
        if ui.checkbox("disableStaminaAttack", &mut b) {
            self.set_disable_stamina_attack(b);
        }

        let mut b: bool = self.disable_hit_sp_effect();
        if ui.checkbox("disableHitSpEffect", &mut b) {
            self.set_disable_hit_sp_effect(b);
        }

        let mut b: bool = self.ignore_notify_miss_swing_for_ai();
        if ui.checkbox("IgnoreNotifyMissSwingForAI", &mut b) {
            self.set_ignore_notify_miss_swing_for_ai(b);
        }

        let mut b: bool = self.repeat_hit_sfx();
        if ui.checkbox("repeatHitSfx", &mut b) {
            self.set_repeat_hit_sfx(b);
        }

        let mut b: bool = self.is_arrow_atk();
        if ui.checkbox("IsArrowAtk", &mut b) {
            self.set_is_arrow_atk(b);
        }

        let mut b: bool = self.is_ghost_atk();
        if ui.checkbox("IsGhostAtk", &mut b) {
            self.set_is_ghost_atk(b);
        }

        let mut b: bool = self.is_disable_no_damage();
        if ui.checkbox("isDisableNoDamage", &mut b) {
            self.set_is_disable_no_damage(b);
        }

        let mut i: i32 = self.atk_pow_for_sfx_se as _;
        if ui.input_int("atkPowForSfxSe", &mut i).build() {
            self.atk_pow_for_sfx_se = i as _;
        }

        let mut i: i32 = self.atk_dir_for_sfx_se as _;
        if ui.input_int("atkDirForSfxSe", &mut i).build() {
            self.atk_dir_for_sfx_se = i as _;
        }

        let mut b: bool = self.oppose_target();
        if ui.checkbox("opposeTarget", &mut b) {
            self.set_oppose_target(b);
        }

        let mut b: bool = self.friendly_target();
        if ui.checkbox("friendlyTarget", &mut b) {
            self.set_friendly_target(b);
        }

        let mut b: bool = self.self_target();
        if ui.checkbox("selfTarget", &mut b) {
            self.set_self_target(b);
        }

        let mut b: bool = self.is_charge_atk();
        if ui.checkbox("isChargeAtk", &mut b) {
            self.set_is_charge_atk(b);
        }

        let mut b: bool = self.is_share_hit_list();
        if ui.checkbox("isShareHitList", &mut b) {
            self.set_is_share_hit_list(b);
        }

        let mut b: bool = self.is_check_obj_penetration();
        if ui.checkbox("isCheckObjPenetration", &mut b) {
            self.set_is_check_obj_penetration(b);
        }

        let mut b: bool = self.field0x81();
        if ui.checkbox("0x81", &mut b) {
            self.set_field0x81(b);
        }

        let mut b: bool = self.field0x81_0();
        if ui.checkbox("0x81_0", &mut b) {
            self.set_field0x81_0(b);
        }

        let mut i: i32 = self.pad1 as _;
        if ui.input_int("pad1", &mut i).build() {
            self.pad1 = i as _;
        }

        let mut i: i32 = self.regainable_slot_id as _;
        if ui.input_int("regainableSlotId", &mut i).build() {
            self.regainable_slot_id = i as _;
        }

        let mut i: i32 = self.death_cause_id as _;
        if ui.input_int("deathCauseId", &mut i).build() {
            self.death_cause_id = i as _;
        }

        let mut i: i32 = self.decal_id1 as _;
        if ui.input_int("decalId1", &mut i).build() {
            self.decal_id1 = i as _;
        }

        let mut i: i32 = self.decal_id2 as _;
        if ui.input_int("decalId2", &mut i).build() {
            self.decal_id2 = i as _;
        }

        let mut i: i32 = self.spawn_ai_sound_id as _;
        if ui.input_int("spawnAiSoundId", &mut i).build() {
            self.spawn_ai_sound_id = i as _;
        }

        let mut i: i32 = self.hit_ai_sound_id as _;
        if ui.input_int("HitAiSoundId", &mut i).build() {
            self.hit_ai_sound_id = i as _;
        }

        let mut i: i32 = self.rumble_id0 as _;
        if ui.input_int("RumbleId0", &mut i).build() {
            self.rumble_id0 = i as _;
        }

        let mut i: i32 = self.rumble_id1 as _;
        if ui.input_int("RumbleId1", &mut i).build() {
            self.rumble_id1 = i as _;
        }

        let mut i: i32 = self.rumble_id2 as _;
        if ui.input_int("RumbleId2", &mut i).build() {
            self.rumble_id2 = i as _;
        }

        let mut i: i32 = self.rumble_id3 as _;
        if ui.input_int("RumbleId3", &mut i).build() {
            self.rumble_id3 = i as _;
        }

        let mut i: i32 = self.hit0_vfx_id as _;
        if ui.input_int("Hit0_VfxId", &mut i).build() {
            self.hit0_vfx_id = i as _;
        }

        let mut i: i32 = self.hit0_dummy_poly_id0 as _;
        if ui.input_int("Hit0_DummyPolyId0", &mut i).build() {
            self.hit0_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit0_dummy_poly_id1 as _;
        if ui.input_int("Hit0_DummyPolyId1", &mut i).build() {
            self.hit0_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit1_vfx_id1 as _;
        if ui.input_int("Hit1_VfxId1", &mut i).build() {
            self.hit1_vfx_id1 = i as _;
        }

        let mut i: i32 = self.hit1_dummy_poly_id0 as _;
        if ui.input_int("Hit1_DummyPolyId0", &mut i).build() {
            self.hit1_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit1_dummy_poly_id1 as _;
        if ui.input_int("Hit1_DummyPolyId1", &mut i).build() {
            self.hit1_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit2_vfx_id as _;
        if ui.input_int("Hit2_VfxId", &mut i).build() {
            self.hit2_vfx_id = i as _;
        }

        let mut i: i32 = self.hit2_dummy_poly_id0 as _;
        if ui.input_int("Hit2_DummyPolyId0", &mut i).build() {
            self.hit2_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit2_dummy_poly_id1 as _;
        if ui.input_int("Hit2_DummyPolyId1", &mut i).build() {
            self.hit2_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit3_vfx_id as _;
        if ui.input_int("Hit3_VfxId", &mut i).build() {
            self.hit3_vfx_id = i as _;
        }

        let mut i: i32 = self.hit3_dummy_poly_id0 as _;
        if ui.input_int("Hit3_DummyPolyId0", &mut i).build() {
            self.hit3_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit3_dummy_poly_id1 as _;
        if ui.input_int("Hit3_DummyPolyId1", &mut i).build() {
            self.hit3_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit4_vfx_id as _;
        if ui.input_int("Hit4_VfxId", &mut i).build() {
            self.hit4_vfx_id = i as _;
        }

        let mut i: i32 = self.hit4_dummy_poly_id0 as _;
        if ui.input_int("Hit4_DummyPolyId0", &mut i).build() {
            self.hit4_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit4_dummy_poly_id1 as _;
        if ui.input_int("Hit4_DummyPolyId1", &mut i).build() {
            self.hit4_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit5_vfx_id as _;
        if ui.input_int("Hit5_VfxId", &mut i).build() {
            self.hit5_vfx_id = i as _;
        }

        let mut i: i32 = self.hit5_dummy_poly_id0 as _;
        if ui.input_int("Hit5_DummyPolyId0", &mut i).build() {
            self.hit5_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit5_dummy_poly_id1 as _;
        if ui.input_int("Hit5_DummyPolyId1", &mut i).build() {
            self.hit5_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit6_vfx_id as _;
        if ui.input_int("Hit6_VfxId", &mut i).build() {
            self.hit6_vfx_id = i as _;
        }

        let mut i: i32 = self.hit6_dummy_poly_id0 as _;
        if ui.input_int("Hit6_DummyPolyId0", &mut i).build() {
            self.hit6_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit6_dummy_poly_id1 as _;
        if ui.input_int("Hit6_DummyPolyId1", &mut i).build() {
            self.hit6_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.hit7_vfx_id as _;
        if ui.input_int("Hit7_VfxId", &mut i).build() {
            self.hit7_vfx_id = i as _;
        }

        let mut i: i32 = self.hit7_dummy_poly_id0 as _;
        if ui.input_int("Hit7_DummyPolyId0", &mut i).build() {
            self.hit7_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.hit7_dummy_poly_id1 as _;
        if ui.input_int("Hit7_DummyPolyId1", &mut i).build() {
            self.hit7_dummy_poly_id1 = i as _;
        }

        let mut i: f32 = self.hit4_radius;
        if ui.input_float("Hit4_Radius", &mut i).build() {
            self.hit4_radius = i;
        }

        let mut i: f32 = self.hit5_radius;
        if ui.input_float("Hit5_Radius", &mut i).build() {
            self.hit5_radius = i;
        }

        let mut i: f32 = self.hit6_radius;
        if ui.input_float("Hit6_Radius", &mut i).build() {
            self.hit6_radius = i;
        }

        let mut i: f32 = self.hit7_radius;
        if ui.input_float("Hit7_Radius", &mut i).build() {
            self.hit7_radius = i;
        }

        let mut i: f32 = self.hit8_radius;
        if ui.input_float("Hit8_Radius", &mut i).build() {
            self.hit8_radius = i;
        }

        let mut i: f32 = self.hit9_radius;
        if ui.input_float("Hit9_Radius", &mut i).build() {
            self.hit9_radius = i;
        }

        let mut i: f32 = self.hit10_radius;
        if ui.input_float("Hit10_Radius", &mut i).build() {
            self.hit10_radius = i;
        }

        let mut i: f32 = self.hit11_radius;
        if ui.input_float("Hit11_Radius", &mut i).build() {
            self.hit11_radius = i;
        }

        let mut i: f32 = self.hit12_radius;
        if ui.input_float("Hit12_Radius", &mut i).build() {
            self.hit12_radius = i;
        }

        let mut i: f32 = self.hit13_radius;
        if ui.input_float("Hit13_Radius", &mut i).build() {
            self.hit13_radius = i;
        }

        let mut i: f32 = self.hit14_radius;
        if ui.input_float("Hit14_Radius", &mut i).build() {
            self.hit14_radius = i;
        }

        let mut i: f32 = self.hit15_radius;
        if ui.input_float("Hit15_Radius", &mut i).build() {
            self.hit15_radius = i;
        }

        let mut i: i32 = self.hit4_dmy_poly1 as _;
        if ui.input_int("Hit4_DmyPoly1", &mut i).build() {
            self.hit4_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit5_dmy_poly1 as _;
        if ui.input_int("Hit5_DmyPoly1", &mut i).build() {
            self.hit5_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit6_dmy_poly1 as _;
        if ui.input_int("Hit6_DmyPoly1", &mut i).build() {
            self.hit6_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit7_dmy_poly1 as _;
        if ui.input_int("Hit7_DmyPoly1", &mut i).build() {
            self.hit7_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit8_dmy_poly1 as _;
        if ui.input_int("Hit8_DmyPoly1", &mut i).build() {
            self.hit8_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit9_dmy_poly1 as _;
        if ui.input_int("Hit9_DmyPoly1", &mut i).build() {
            self.hit9_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit10_dmy_poly1 as _;
        if ui.input_int("Hit10_DmyPoly1", &mut i).build() {
            self.hit10_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit11_dmy_poly1 as _;
        if ui.input_int("Hit11_DmyPoly1", &mut i).build() {
            self.hit11_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit12_dmy_poly1 as _;
        if ui.input_int("Hit12_DmyPoly1", &mut i).build() {
            self.hit12_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit13_dmy_poly1 as _;
        if ui.input_int("Hit13_DmyPoly1", &mut i).build() {
            self.hit13_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit14_dmy_poly1 as _;
        if ui.input_int("Hit14_DmyPoly1", &mut i).build() {
            self.hit14_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit15_dmy_poly1 as _;
        if ui.input_int("Hit15_DmyPoly1", &mut i).build() {
            self.hit15_dmy_poly1 = i as _;
        }

        let mut i: i32 = self.hit4_dmy_poly2 as _;
        if ui.input_int("Hit4_DmyPoly2", &mut i).build() {
            self.hit4_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit5_dmy_poly2 as _;
        if ui.input_int("Hit5_DmyPoly2", &mut i).build() {
            self.hit5_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit6_dmy_poly2 as _;
        if ui.input_int("Hit6_DmyPoly2", &mut i).build() {
            self.hit6_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit7_dmy_poly2 as _;
        if ui.input_int("Hit7_DmyPoly2", &mut i).build() {
            self.hit7_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit8_dmy_poly2 as _;
        if ui.input_int("Hit8_DmyPoly2", &mut i).build() {
            self.hit8_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit9_dmy_poly2 as _;
        if ui.input_int("Hit9_DmyPoly2", &mut i).build() {
            self.hit9_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit10_dmy_poly2 as _;
        if ui.input_int("Hit10_DmyPoly2", &mut i).build() {
            self.hit10_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit11_dmy_poly2 as _;
        if ui.input_int("Hit11_DmyPoly2", &mut i).build() {
            self.hit11_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit12_dmy_poly2 as _;
        if ui.input_int("Hit12_DmyPoly2", &mut i).build() {
            self.hit12_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit13_dmy_poly2 as _;
        if ui.input_int("Hit13_DmyPoly2", &mut i).build() {
            self.hit13_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit14_dmy_poly2 as _;
        if ui.input_int("Hit14_DmyPoly2", &mut i).build() {
            self.hit14_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit15_dmy_poly2 as _;
        if ui.input_int("Hit15_DmyPoly2", &mut i).build() {
            self.hit15_dmy_poly2 = i as _;
        }

        let mut i: i32 = self.hit4_hit_type as _;
        if ui.input_int("Hit4_hitType", &mut i).build() {
            self.hit4_hit_type = i as _;
        }

        let mut i: i32 = self.hit5_hit_type as _;
        if ui.input_int("Hit5_hitType", &mut i).build() {
            self.hit5_hit_type = i as _;
        }

        let mut i: i32 = self.hit6_hit_type as _;
        if ui.input_int("Hit6_hitType", &mut i).build() {
            self.hit6_hit_type = i as _;
        }

        let mut i: i32 = self.hit7_hit_type as _;
        if ui.input_int("Hit7_hitType", &mut i).build() {
            self.hit7_hit_type = i as _;
        }

        let mut i: i32 = self.hit8_hit_type as _;
        if ui.input_int("Hit8_hitType", &mut i).build() {
            self.hit8_hit_type = i as _;
        }

        let mut i: i32 = self.hit9_hit_type as _;
        if ui.input_int("Hit9_hitType", &mut i).build() {
            self.hit9_hit_type = i as _;
        }

        let mut i: i32 = self.hit10_hit_type as _;
        if ui.input_int("Hit10_hitType", &mut i).build() {
            self.hit10_hit_type = i as _;
        }

        let mut i: i32 = self.hit11_hit_type as _;
        if ui.input_int("Hit11_hitType", &mut i).build() {
            self.hit11_hit_type = i as _;
        }

        let mut i: i32 = self.hit12_hit_type as _;
        if ui.input_int("Hit12_hitType", &mut i).build() {
            self.hit12_hit_type = i as _;
        }

        let mut i: i32 = self.hit13_hit_type as _;
        if ui.input_int("Hit13_hitType", &mut i).build() {
            self.hit13_hit_type = i as _;
        }

        let mut i: i32 = self.hit14_hit_type as _;
        if ui.input_int("Hit14_hitType", &mut i).build() {
            self.hit14_hit_type = i as _;
        }

        let mut i: i32 = self.hit15_hit_type as _;
        if ui.input_int("Hit15_hitType", &mut i).build() {
            self.hit15_hit_type = i as _;
        }

        let mut i: i32 = self.field0x174 as _;
        if ui.input_int("0x174", &mut i).build() {
            self.field0x174 = i as _;
        }

        let mut i: i32 = self.field0x178 as _;
        if ui.input_int("0x178", &mut i).build() {
            self.field0x178 = i as _;
        }

        let mut i: i32 = self.field0x17_c as _;
        if ui.input_int("0x17C", &mut i).build() {
            self.field0x17_c = i as _;
        }

        let mut i: i32 = self.def_material_val0 as _;
        if ui.input_int("defMaterialVal0", &mut i).build() {
            self.def_material_val0 = i as _;
        }

        let mut i: i32 = self.def_material_val1 as _;
        if ui.input_int("defMaterialVal1", &mut i).build() {
            self.def_material_val1 = i as _;
        }

        let mut i: i32 = self.def_material_val2 as _;
        if ui.input_int("defMaterialVal2", &mut i).build() {
            self.def_material_val2 = i as _;
        }

        let mut i: i32 = self.atk_dark_correction as _;
        if ui.input_int("atkDarkCorrection", &mut i).build() {
            self.atk_dark_correction = i as _;
        }

        let mut i: i32 = self.atk_dark as _;
        if ui.input_int("atkDark", &mut i).build() {
            self.atk_dark = i as _;
        }

        let mut b: bool = self.is_charge_atk2();
        if ui.checkbox("IsChargeAtk2", &mut b) {
            self.set_is_charge_atk2(b);
        }

        let mut b: bool = self.is_charge_atk3();
        if ui.checkbox("IsChargeAtk3", &mut b) {
            self.set_is_charge_atk3(b);
        }

        let mut b: bool = self.field0x18_a();
        if ui.checkbox("0x18A", &mut b) {
            self.set_field0x18_a(b);
        }

        let mut b: bool = self.field0x18_a_0();
        if ui.checkbox("0x18A_0", &mut b) {
            self.set_field0x18_a_0(b);
        }

        let mut b: bool = self.field0x18_a_1();
        if ui.checkbox("0x18A_1", &mut b) {
            self.set_field0x18_a_1(b);
        }

        let mut b: bool = self.field0x18_a_2();
        if ui.checkbox("0x18A_2", &mut b) {
            self.set_field0x18_a_2(b);
        }

        let mut b: bool = self.field0x18_a_3();
        if ui.checkbox("0x18A_3", &mut b) {
            self.set_field0x18_a_3(b);
        }

        let mut b: bool = self.field0x18_a_4();
        if ui.checkbox("0x18A_4", &mut b) {
            self.set_field0x18_a_4(b);
        }

        let mut i: i32 = self.field0x18_b as _;
        if ui.input_int("0x18B", &mut i).build() {
            self.field0x18_b = i as _;
        }

        let mut i: i32 = self.phys_sp_correction as _;
        if ui.input_int("physSpCorrection", &mut i).build() {
            self.phys_sp_correction = i as _;
        }

        let mut i: i32 = self.mag_sp_correction as _;
        if ui.input_int("magSpCorrection", &mut i).build() {
            self.mag_sp_correction = i as _;
        }

        let mut i: i32 = self.fire_sp_correction as _;
        if ui.input_int("fireSpCorrection", &mut i).build() {
            self.fire_sp_correction = i as _;
        }

        let mut i: i32 = self.thun_sp_correction as _;
        if ui.input_int("thunSpCorrection", &mut i).build() {
            self.thun_sp_correction = i as _;
        }

        let mut i: i32 = self.damage_level_parameter as _;
        if ui.input_int("damageLevelParameter", &mut i).build() {
            self.damage_level_parameter = i as _;
        }

        let mut i: i32 = self.field0x195 as _;
        if ui.input_int("0x195", &mut i).build() {
            self.field0x195 = i as _;
        }

        let mut i: i32 = self.dark_sp_correction as _;
        if ui.input_int("darkSpCorrection", &mut i).build() {
            self.dark_sp_correction = i as _;
        }

        let mut i: i32 = self.atk_element_correct_id as _;
        if ui.input_int("atkElementCorrectId", &mut i).build() {
            self.atk_element_correct_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct AttackElementCorrectParam {
    pub bitfield0: u32,
    pub add_rate0: i16,
    pub add_rate1: i16,
    pub add_rate2: i16,
    pub add_rate3: i16,
    pub add_rate4: i16,
    pub add_rate5: i16,
    pub add_rate6: i16,
    pub add_rate7: i16,
    pub add_rate8: i16,
    pub add_rate9: i16,
    pub add_rate10: i16,
    pub add_rate11: i16,
    pub add_rate12: i16,
    pub add_rate13: i16,
    pub add_rate14: i16,
    pub add_rate15: i16,
    pub add_rate16: i16,
    pub add_rate17: i16,
    pub add_rate18: i16,
    pub add_rate19: i16,
    pub add_rate20: i16,
    pub add_rate21: i16,
    pub add_rate22: i16,
    pub add_rate23: i16,
    pub add_rate24: i16,
    pub corr_rate0: i16,
    pub corr_rate1: i16,
    pub corr_rate2: i16,
    pub corr_rate3: i16,
    pub corr_rate4: i16,
    pub corr_rate5: i16,
    pub corr_rate6: i16,
    pub corr_rate7: i16,
    pub corr_rate8: i16,
    pub corr_rate9: i16,
    pub corr_rate10: i16,
    pub corr_rate11: i16,
    pub corr_rate12: i16,
    pub corr_rate13: i16,
    pub corr_rate14: i16,
    pub corr_rate15: i16,
    pub corr_rate16: i16,
    pub corr_rate17: i16,
    pub corr_rate18: i16,
    pub corr_rate19: i16,
    pub corr_rate20: i16,
    pub corr_rate21: i16,
    pub corr_rate22: i16,
    pub corr_rate23: i16,
    pub corr_rate24: i16,
    pub pad1: [u8; 24],
}

impl AttackElementCorrectParam {
    #[allow(unused)]
    pub fn set_field0x00(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_1(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_1(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_2(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_2(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_3(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_3(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_4(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_4(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_5(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_5(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_6(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_6(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_7(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 8;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_7(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 8;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_8(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 9;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_8(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 9;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_9(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 10;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_9(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 10;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_10(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 11;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_10(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 11;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_11(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 12;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_11(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 12;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_12(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 13;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_12(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 13;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_13(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 14;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_13(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 14;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_14(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 15;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_14(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 15;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_15(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 16;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_15(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 16;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_16(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 17;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_16(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 17;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_17(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 18;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_17(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 18;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_18(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 19;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_18(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 19;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_19(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 20;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_19(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 20;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_20(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 21;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_20(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 21;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_21(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 22;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_21(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 22;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_22(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 23;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_22(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 23;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_23(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 24;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_23(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 24;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_24(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 25;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_24(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 25;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_25(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 26;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_25(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 26;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_26(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 27;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_26(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 27;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_27(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 28;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_27(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 28;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_28(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 29;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_28(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 29;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_29(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 30;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_29(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 30;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x00_30(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 31;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x00_30(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 31;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for AttackElementCorrectParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut b: bool = self.field0x00();
        if ui.checkbox("0x00", &mut b) {
            self.set_field0x00(b);
        }

        let mut b: bool = self.field0x00_0();
        if ui.checkbox("0x00_0", &mut b) {
            self.set_field0x00_0(b);
        }

        let mut b: bool = self.field0x00_1();
        if ui.checkbox("0x00_1", &mut b) {
            self.set_field0x00_1(b);
        }

        let mut b: bool = self.field0x00_2();
        if ui.checkbox("0x00_2", &mut b) {
            self.set_field0x00_2(b);
        }

        let mut b: bool = self.field0x00_3();
        if ui.checkbox("0x00_3", &mut b) {
            self.set_field0x00_3(b);
        }

        let mut b: bool = self.field0x00_4();
        if ui.checkbox("0x00_4", &mut b) {
            self.set_field0x00_4(b);
        }

        let mut b: bool = self.field0x00_5();
        if ui.checkbox("0x00_5", &mut b) {
            self.set_field0x00_5(b);
        }

        let mut b: bool = self.field0x00_6();
        if ui.checkbox("0x00_6", &mut b) {
            self.set_field0x00_6(b);
        }

        let mut b: bool = self.field0x00_7();
        if ui.checkbox("0x00_7", &mut b) {
            self.set_field0x00_7(b);
        }

        let mut b: bool = self.field0x00_8();
        if ui.checkbox("0x00_8", &mut b) {
            self.set_field0x00_8(b);
        }

        let mut b: bool = self.field0x00_9();
        if ui.checkbox("0x00_9", &mut b) {
            self.set_field0x00_9(b);
        }

        let mut b: bool = self.field0x00_10();
        if ui.checkbox("0x00_10", &mut b) {
            self.set_field0x00_10(b);
        }

        let mut b: bool = self.field0x00_11();
        if ui.checkbox("0x00_11", &mut b) {
            self.set_field0x00_11(b);
        }

        let mut b: bool = self.field0x00_12();
        if ui.checkbox("0x00_12", &mut b) {
            self.set_field0x00_12(b);
        }

        let mut b: bool = self.field0x00_13();
        if ui.checkbox("0x00_13", &mut b) {
            self.set_field0x00_13(b);
        }

        let mut b: bool = self.field0x00_14();
        if ui.checkbox("0x00_14", &mut b) {
            self.set_field0x00_14(b);
        }

        let mut b: bool = self.field0x00_15();
        if ui.checkbox("0x00_15", &mut b) {
            self.set_field0x00_15(b);
        }

        let mut b: bool = self.field0x00_16();
        if ui.checkbox("0x00_16", &mut b) {
            self.set_field0x00_16(b);
        }

        let mut b: bool = self.field0x00_17();
        if ui.checkbox("0x00_17", &mut b) {
            self.set_field0x00_17(b);
        }

        let mut b: bool = self.field0x00_18();
        if ui.checkbox("0x00_18", &mut b) {
            self.set_field0x00_18(b);
        }

        let mut b: bool = self.field0x00_19();
        if ui.checkbox("0x00_19", &mut b) {
            self.set_field0x00_19(b);
        }

        let mut b: bool = self.field0x00_20();
        if ui.checkbox("0x00_20", &mut b) {
            self.set_field0x00_20(b);
        }

        let mut b: bool = self.field0x00_21();
        if ui.checkbox("0x00_21", &mut b) {
            self.set_field0x00_21(b);
        }

        let mut b: bool = self.field0x00_22();
        if ui.checkbox("0x00_22", &mut b) {
            self.set_field0x00_22(b);
        }

        let mut b: bool = self.field0x00_23();
        if ui.checkbox("0x00_23", &mut b) {
            self.set_field0x00_23(b);
        }

        let mut b: bool = self.field0x00_24();
        if ui.checkbox("0x00_24", &mut b) {
            self.set_field0x00_24(b);
        }

        let mut b: bool = self.field0x00_25();
        if ui.checkbox("0x00_25", &mut b) {
            self.set_field0x00_25(b);
        }

        let mut b: bool = self.field0x00_26();
        if ui.checkbox("0x00_26", &mut b) {
            self.set_field0x00_26(b);
        }

        let mut b: bool = self.field0x00_27();
        if ui.checkbox("0x00_27", &mut b) {
            self.set_field0x00_27(b);
        }

        let mut b: bool = self.field0x00_28();
        if ui.checkbox("0x00_28", &mut b) {
            self.set_field0x00_28(b);
        }

        let mut b: bool = self.field0x00_29();
        if ui.checkbox("0x00_29", &mut b) {
            self.set_field0x00_29(b);
        }

        let mut b: bool = self.field0x00_30();
        if ui.checkbox("0x00_30", &mut b) {
            self.set_field0x00_30(b);
        }

        let mut i: i32 = self.add_rate0 as _;
        if ui.input_int("addRate0", &mut i).build() {
            self.add_rate0 = i as _;
        }

        let mut i: i32 = self.add_rate1 as _;
        if ui.input_int("addRate1", &mut i).build() {
            self.add_rate1 = i as _;
        }

        let mut i: i32 = self.add_rate2 as _;
        if ui.input_int("addRate2", &mut i).build() {
            self.add_rate2 = i as _;
        }

        let mut i: i32 = self.add_rate3 as _;
        if ui.input_int("addRate3", &mut i).build() {
            self.add_rate3 = i as _;
        }

        let mut i: i32 = self.add_rate4 as _;
        if ui.input_int("addRate4", &mut i).build() {
            self.add_rate4 = i as _;
        }

        let mut i: i32 = self.add_rate5 as _;
        if ui.input_int("addRate5", &mut i).build() {
            self.add_rate5 = i as _;
        }

        let mut i: i32 = self.add_rate6 as _;
        if ui.input_int("addRate6", &mut i).build() {
            self.add_rate6 = i as _;
        }

        let mut i: i32 = self.add_rate7 as _;
        if ui.input_int("addRate7", &mut i).build() {
            self.add_rate7 = i as _;
        }

        let mut i: i32 = self.add_rate8 as _;
        if ui.input_int("addRate8", &mut i).build() {
            self.add_rate8 = i as _;
        }

        let mut i: i32 = self.add_rate9 as _;
        if ui.input_int("addRate9", &mut i).build() {
            self.add_rate9 = i as _;
        }

        let mut i: i32 = self.add_rate10 as _;
        if ui.input_int("addRate10", &mut i).build() {
            self.add_rate10 = i as _;
        }

        let mut i: i32 = self.add_rate11 as _;
        if ui.input_int("addRate11", &mut i).build() {
            self.add_rate11 = i as _;
        }

        let mut i: i32 = self.add_rate12 as _;
        if ui.input_int("addRate12", &mut i).build() {
            self.add_rate12 = i as _;
        }

        let mut i: i32 = self.add_rate13 as _;
        if ui.input_int("addRate13", &mut i).build() {
            self.add_rate13 = i as _;
        }

        let mut i: i32 = self.add_rate14 as _;
        if ui.input_int("addRate14", &mut i).build() {
            self.add_rate14 = i as _;
        }

        let mut i: i32 = self.add_rate15 as _;
        if ui.input_int("addRate15", &mut i).build() {
            self.add_rate15 = i as _;
        }

        let mut i: i32 = self.add_rate16 as _;
        if ui.input_int("addRate16", &mut i).build() {
            self.add_rate16 = i as _;
        }

        let mut i: i32 = self.add_rate17 as _;
        if ui.input_int("addRate17", &mut i).build() {
            self.add_rate17 = i as _;
        }

        let mut i: i32 = self.add_rate18 as _;
        if ui.input_int("addRate18", &mut i).build() {
            self.add_rate18 = i as _;
        }

        let mut i: i32 = self.add_rate19 as _;
        if ui.input_int("addRate19", &mut i).build() {
            self.add_rate19 = i as _;
        }

        let mut i: i32 = self.add_rate20 as _;
        if ui.input_int("addRate20", &mut i).build() {
            self.add_rate20 = i as _;
        }

        let mut i: i32 = self.add_rate21 as _;
        if ui.input_int("addRate21", &mut i).build() {
            self.add_rate21 = i as _;
        }

        let mut i: i32 = self.add_rate22 as _;
        if ui.input_int("addRate22", &mut i).build() {
            self.add_rate22 = i as _;
        }

        let mut i: i32 = self.add_rate23 as _;
        if ui.input_int("addRate23", &mut i).build() {
            self.add_rate23 = i as _;
        }

        let mut i: i32 = self.add_rate24 as _;
        if ui.input_int("addRate24", &mut i).build() {
            self.add_rate24 = i as _;
        }

        let mut i: i32 = self.corr_rate0 as _;
        if ui.input_int("corrRate0", &mut i).build() {
            self.corr_rate0 = i as _;
        }

        let mut i: i32 = self.corr_rate1 as _;
        if ui.input_int("corrRate1", &mut i).build() {
            self.corr_rate1 = i as _;
        }

        let mut i: i32 = self.corr_rate2 as _;
        if ui.input_int("corrRate2", &mut i).build() {
            self.corr_rate2 = i as _;
        }

        let mut i: i32 = self.corr_rate3 as _;
        if ui.input_int("corrRate3", &mut i).build() {
            self.corr_rate3 = i as _;
        }

        let mut i: i32 = self.corr_rate4 as _;
        if ui.input_int("corrRate4", &mut i).build() {
            self.corr_rate4 = i as _;
        }

        let mut i: i32 = self.corr_rate5 as _;
        if ui.input_int("corrRate5", &mut i).build() {
            self.corr_rate5 = i as _;
        }

        let mut i: i32 = self.corr_rate6 as _;
        if ui.input_int("corrRate6", &mut i).build() {
            self.corr_rate6 = i as _;
        }

        let mut i: i32 = self.corr_rate7 as _;
        if ui.input_int("corrRate7", &mut i).build() {
            self.corr_rate7 = i as _;
        }

        let mut i: i32 = self.corr_rate8 as _;
        if ui.input_int("corrRate8", &mut i).build() {
            self.corr_rate8 = i as _;
        }

        let mut i: i32 = self.corr_rate9 as _;
        if ui.input_int("corrRate9", &mut i).build() {
            self.corr_rate9 = i as _;
        }

        let mut i: i32 = self.corr_rate10 as _;
        if ui.input_int("corrRate10", &mut i).build() {
            self.corr_rate10 = i as _;
        }

        let mut i: i32 = self.corr_rate11 as _;
        if ui.input_int("corrRate11", &mut i).build() {
            self.corr_rate11 = i as _;
        }

        let mut i: i32 = self.corr_rate12 as _;
        if ui.input_int("corrRate12", &mut i).build() {
            self.corr_rate12 = i as _;
        }

        let mut i: i32 = self.corr_rate13 as _;
        if ui.input_int("corrRate13", &mut i).build() {
            self.corr_rate13 = i as _;
        }

        let mut i: i32 = self.corr_rate14 as _;
        if ui.input_int("corrRate14", &mut i).build() {
            self.corr_rate14 = i as _;
        }

        let mut i: i32 = self.corr_rate15 as _;
        if ui.input_int("corrRate15", &mut i).build() {
            self.corr_rate15 = i as _;
        }

        let mut i: i32 = self.corr_rate16 as _;
        if ui.input_int("corrRate16", &mut i).build() {
            self.corr_rate16 = i as _;
        }

        let mut i: i32 = self.corr_rate17 as _;
        if ui.input_int("corrRate17", &mut i).build() {
            self.corr_rate17 = i as _;
        }

        let mut i: i32 = self.corr_rate18 as _;
        if ui.input_int("corrRate18", &mut i).build() {
            self.corr_rate18 = i as _;
        }

        let mut i: i32 = self.corr_rate19 as _;
        if ui.input_int("corrRate19", &mut i).build() {
            self.corr_rate19 = i as _;
        }

        let mut i: i32 = self.corr_rate20 as _;
        if ui.input_int("corrRate20", &mut i).build() {
            self.corr_rate20 = i as _;
        }

        let mut i: i32 = self.corr_rate21 as _;
        if ui.input_int("corrRate21", &mut i).build() {
            self.corr_rate21 = i as _;
        }

        let mut i: i32 = self.corr_rate22 as _;
        if ui.input_int("corrRate22", &mut i).build() {
            self.corr_rate22 = i as _;
        }

        let mut i: i32 = self.corr_rate23 as _;
        if ui.input_int("corrRate23", &mut i).build() {
            self.corr_rate23 = i as _;
        }

        let mut i: i32 = self.corr_rate24 as _;
        if ui.input_int("corrRate24", &mut i).build() {
            self.corr_rate24 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct BehaviorParam {
    pub variation_id: i32,
    pub behavior_judge_id: i32,
    pub ez_state_behavior_type_old: u8,
    pub ref_type: u8,
    pub pad1: [u8; 2],
    pub ref_id: i32,
    pub sfx_variation_id: i32,
    pub stamina: i32,
    pub mp: i32,
    pub category: u8,
    pub hero_point: u8,
    pub pad2: [u8; 2],
}

impl RenderableParam for BehaviorParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.variation_id as _;
        if ui.input_int("variationId", &mut i).build() {
            self.variation_id = i as _;
        }

        let mut i: i32 = self.behavior_judge_id as _;
        if ui.input_int("behaviorJudgeId", &mut i).build() {
            self.behavior_judge_id = i as _;
        }

        let mut i: i32 = self.ez_state_behavior_type_old as _;
        if ui.input_int("ezStateBehaviorType_old", &mut i).build() {
            self.ez_state_behavior_type_old = i as _;
        }

        let mut i: i32 = self.ref_type as _;
        if ui.input_int("refType", &mut i).build() {
            self.ref_type = i as _;
        }

        let mut i: i32 = self.ref_id as _;
        if ui.input_int("refId", &mut i).build() {
            self.ref_id = i as _;
        }

        let mut i: i32 = self.sfx_variation_id as _;
        if ui.input_int("sfxVariationId", &mut i).build() {
            self.sfx_variation_id = i as _;
        }

        let mut i: i32 = self.stamina as _;
        if ui.input_int("stamina", &mut i).build() {
            self.stamina = i as _;
        }

        let mut i: i32 = self.mp as _;
        if ui.input_int("mp", &mut i).build() {
            self.mp = i as _;
        }

        let mut i: i32 = self.category as _;
        if ui.input_int("category", &mut i).build() {
            self.category = i as _;
        }

        let mut i: i32 = self.hero_point as _;
        if ui.input_int("heroPoint", &mut i).build() {
            self.hero_point = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct BehaviorParam_PC {
    pub variation_id: i32,
    pub behavior_judge_id: i32,
    pub ez_state_behavior_type_old: u8,
    pub ref_type: u8,
    pub pad1: [u8; 2],
    pub ref_id: i32,
    pub sfx_variation_id: i32,
    pub stamina: i32,
    pub mp: i32,
    pub category: u8,
    pub hero_point: u8,
    pub pad2: [u8; 2],
}

impl RenderableParam for BehaviorParam_PC {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.variation_id as _;
        if ui.input_int("variationId", &mut i).build() {
            self.variation_id = i as _;
        }

        let mut i: i32 = self.behavior_judge_id as _;
        if ui.input_int("behaviorJudgeId", &mut i).build() {
            self.behavior_judge_id = i as _;
        }

        let mut i: i32 = self.ez_state_behavior_type_old as _;
        if ui.input_int("ezStateBehaviorType_old", &mut i).build() {
            self.ez_state_behavior_type_old = i as _;
        }

        let mut i: i32 = self.ref_type as _;
        if ui.input_int("refType", &mut i).build() {
            self.ref_type = i as _;
        }

        let mut i: i32 = self.ref_id as _;
        if ui.input_int("refId", &mut i).build() {
            self.ref_id = i as _;
        }

        let mut i: i32 = self.sfx_variation_id as _;
        if ui.input_int("sfxVariationId", &mut i).build() {
            self.sfx_variation_id = i as _;
        }

        let mut i: i32 = self.stamina as _;
        if ui.input_int("stamina", &mut i).build() {
            self.stamina = i as _;
        }

        let mut i: i32 = self.mp as _;
        if ui.input_int("mp", &mut i).build() {
            self.mp = i as _;
        }

        let mut i: i32 = self.category as _;
        if ui.input_int("category", &mut i).build() {
            self.category = i as _;
        }

        let mut i: i32 = self.hero_point as _;
        if ui.input_int("heroPoint", &mut i).build() {
            self.hero_point = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct BonfireWarpParam {
    pub location_event_id: i32,
    pub warp_event_id: i32,
    pub bonfire_name_id: i32,
    pub description_text_id: i32,
    pub picture_id: i32,
    pub list_id: u8,
    pub is_disable_quickwarp: u8,
    pub ceremony_id: i16,
    pub online_area_id: i32,
    pub pad1: [u8; 36],
}

impl RenderableParam for BonfireWarpParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.location_event_id as _;
        if ui.input_int("LocationEventId", &mut i).build() {
            self.location_event_id = i as _;
        }

        let mut i: i32 = self.warp_event_id as _;
        if ui.input_int("WarpEventId", &mut i).build() {
            self.warp_event_id = i as _;
        }

        let mut i: i32 = self.bonfire_name_id as _;
        if ui.input_int("BonfireNameId", &mut i).build() {
            self.bonfire_name_id = i as _;
        }

        let mut i: i32 = self.description_text_id as _;
        if ui.input_int("DescriptionTextId", &mut i).build() {
            self.description_text_id = i as _;
        }

        let mut i: i32 = self.picture_id as _;
        if ui.input_int("PictureId", &mut i).build() {
            self.picture_id = i as _;
        }

        let mut i: i32 = self.list_id as _;
        if ui.input_int("ListId", &mut i).build() {
            self.list_id = i as _;
        }

        let mut i: i32 = self.is_disable_quickwarp as _;
        if ui.input_int("IsDisableQuickwarp", &mut i).build() {
            self.is_disable_quickwarp = i as _;
        }

        let mut i: i32 = self.ceremony_id as _;
        if ui.input_int("CeremonyId", &mut i).build() {
            self.ceremony_id = i as _;
        }

        let mut i: i32 = self.online_area_id as _;
        if ui.input_int("onlineAreaId", &mut i).build() {
            self.online_area_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct BudgetParam {
    pub memory_budget0: f32,
    pub memory_budget1: f32,
    pub memory_budget2: f32,
    pub memory_budget3: f32,
    pub memory_budget4: f32,
    pub memory_budget5: f32,
    pub memory_budget6: f32,
    pub memory_budget7: f32,
    pub memory_budget8: f32,
    pub memory_budget9: f32,
    pub memory_budget10: f32,
    pub memory_budget11: f32,
    pub memory_budget12: f32,
    pub memory_budget13: f32,
    pub memory_budget14: f32,
    pub memory_budget15: f32,
    pub memory_budget16: f32,
    pub memory_budget17: f32,
    pub memory_budget18: f32,
    pub memory_budget19: f32,
    pub memory_budget20: f32,
    pub memory_budget21: f32,
    pub memory_budget22: f32,
    pub memory_budget23: f32,
    pub memory_budget24: f32,
    pub memory_budget25: f32,
    pub pad1: [u8; 28],
}

impl RenderableParam for BudgetParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.memory_budget0;
        if ui.input_float("MemoryBudget0", &mut i).build() {
            self.memory_budget0 = i;
        }

        let mut i: f32 = self.memory_budget1;
        if ui.input_float("MemoryBudget1", &mut i).build() {
            self.memory_budget1 = i;
        }

        let mut i: f32 = self.memory_budget2;
        if ui.input_float("MemoryBudget2", &mut i).build() {
            self.memory_budget2 = i;
        }

        let mut i: f32 = self.memory_budget3;
        if ui.input_float("MemoryBudget3", &mut i).build() {
            self.memory_budget3 = i;
        }

        let mut i: f32 = self.memory_budget4;
        if ui.input_float("MemoryBudget4", &mut i).build() {
            self.memory_budget4 = i;
        }

        let mut i: f32 = self.memory_budget5;
        if ui.input_float("MemoryBudget5", &mut i).build() {
            self.memory_budget5 = i;
        }

        let mut i: f32 = self.memory_budget6;
        if ui.input_float("MemoryBudget6", &mut i).build() {
            self.memory_budget6 = i;
        }

        let mut i: f32 = self.memory_budget7;
        if ui.input_float("MemoryBudget7", &mut i).build() {
            self.memory_budget7 = i;
        }

        let mut i: f32 = self.memory_budget8;
        if ui.input_float("MemoryBudget8", &mut i).build() {
            self.memory_budget8 = i;
        }

        let mut i: f32 = self.memory_budget9;
        if ui.input_float("MemoryBudget9", &mut i).build() {
            self.memory_budget9 = i;
        }

        let mut i: f32 = self.memory_budget10;
        if ui.input_float("MemoryBudget10", &mut i).build() {
            self.memory_budget10 = i;
        }

        let mut i: f32 = self.memory_budget11;
        if ui.input_float("MemoryBudget11", &mut i).build() {
            self.memory_budget11 = i;
        }

        let mut i: f32 = self.memory_budget12;
        if ui.input_float("MemoryBudget12", &mut i).build() {
            self.memory_budget12 = i;
        }

        let mut i: f32 = self.memory_budget13;
        if ui.input_float("MemoryBudget13", &mut i).build() {
            self.memory_budget13 = i;
        }

        let mut i: f32 = self.memory_budget14;
        if ui.input_float("MemoryBudget14", &mut i).build() {
            self.memory_budget14 = i;
        }

        let mut i: f32 = self.memory_budget15;
        if ui.input_float("MemoryBudget15", &mut i).build() {
            self.memory_budget15 = i;
        }

        let mut i: f32 = self.memory_budget16;
        if ui.input_float("MemoryBudget16", &mut i).build() {
            self.memory_budget16 = i;
        }

        let mut i: f32 = self.memory_budget17;
        if ui.input_float("MemoryBudget17", &mut i).build() {
            self.memory_budget17 = i;
        }

        let mut i: f32 = self.memory_budget18;
        if ui.input_float("MemoryBudget18", &mut i).build() {
            self.memory_budget18 = i;
        }

        let mut i: f32 = self.memory_budget19;
        if ui.input_float("MemoryBudget19", &mut i).build() {
            self.memory_budget19 = i;
        }

        let mut i: f32 = self.memory_budget20;
        if ui.input_float("MemoryBudget20", &mut i).build() {
            self.memory_budget20 = i;
        }

        let mut i: f32 = self.memory_budget21;
        if ui.input_float("MemoryBudget21", &mut i).build() {
            self.memory_budget21 = i;
        }

        let mut i: f32 = self.memory_budget22;
        if ui.input_float("MemoryBudget22", &mut i).build() {
            self.memory_budget22 = i;
        }

        let mut i: f32 = self.memory_budget23;
        if ui.input_float("MemoryBudget23", &mut i).build() {
            self.memory_budget23 = i;
        }

        let mut i: f32 = self.memory_budget24;
        if ui.input_float("MemoryBudget24", &mut i).build() {
            self.memory_budget24 = i;
        }

        let mut i: f32 = self.memory_budget25;
        if ui.input_float("MemoryBudget25", &mut i).build() {
            self.memory_budget25 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct Bullet {
    pub atk_bullet_id: i32,
    pub sfx_id_bullet: i32,
    pub sfx_id_hit: i32,
    pub sfx_id_flick: i32,
    pub life: f32,
    pub dist: f32,
    pub shoot_interval: f32,
    pub gravity_in_range: f32,
    pub gravity_out_range: f32,
    pub homing_stop_range: f32,
    pub init_vellocity: f32,
    pub accel_in_range: f32,
    pub accel_out_range: f32,
    pub max_vellocity: f32,
    pub min_vellocity: f32,
    pub accel_time: f32,
    pub homing_begin_dist: f32,
    pub hit_radius: f32,
    pub hit_radius_max: f32,
    pub spread_time: f32,
    pub exp_delay: f32,
    pub homing_offset_range: f32,
    pub dmg_hit_record_life_time: f32,
    pub external_force: f32,
    pub sp_effect_id_for_shooter: i32,
    pub auto_search_npc_think_id: i32,
    pub hit_bullet_id: i32,
    pub sp_effect_id0: i32,
    pub sp_effect_id1: i32,
    pub sp_effect_id2: i32,
    pub sp_effect_id3: i32,
    pub sp_effect_id4: i32,
    pub num_shoot: i16,
    pub homing_angle: i16,
    pub shoot_angle: i16,
    pub shoot_angle_interval: i16,
    pub shoot_angle_xinterval: i16,
    pub damage_damp: u8,
    pub magic_damage_damp: u8,
    pub fire_damage_damp: u8,
    pub thunder_damage_damp: u8,
    pub stamina_damp: u8,
    pub knockback_damp: u8,
    pub shoot_angle_xz: u8,
    pub lock_shoot_limit_ang: u8,
    pub is_penetrate: u8,
    pub prev_vellocity_dir_rate: u8,
    pub atk_attribute: u8,
    pub sp_attribute: u8,
    pub material_attack_type: u8,
    pub material_attack_material: u8,
    pub material_size: u8,
    pub launch_condition_type: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub dark_damage_damp: u8,
    pub bullet_hit_type0: u8,
    pub bullet_hit_type1: u8,
    pub sp_homing_yangle: f32,
    pub rand_shoot_angle_xz: f32,
    pub rand_shoot_angle_y: f32,
    pub bullet_emitter_bullet_id: i32,
    pub bullet_emitter_shoot_interval0: f32,
    pub bullet_emitter_init_interval: f32,
    pub sp_homing_yangle_for_enemy: f32,
    pub bullet_emitter_shoot_interval1: f32,
    pub launch_type: u8,
    pub limit_bullet_param_id: u8,
    pub counter_hit_type: u8,
    pub bitfield3: u8,
    pub emitte_pos_radius: f32,
    pub hit_object_id: i32,
    pub sub_life: f32,
    pub sub_homing_angle: i16,
    pub pad1: [u8; 2],
    pub lock_shoot_correction_ang: f32,
    pub pad2: [u8; 40],
}

impl Bullet {
    #[allow(unused)]
    pub fn set_follow_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn follow_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_follow_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn follow_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_follow_type2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn follow_type2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_emitte_pos_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn emitte_pos_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_emitte_pos_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn emitte_pos_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_emitte_pos_type2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn emitte_pos_type2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_attack_sfx(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_attack_sfx(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_endless_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_endless_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_penetrate_map(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_penetrate_map(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_hit_both_team(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_hit_both_team(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_use_shard_hit_list(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_use_shard_hit_list(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_use_multi_dmy_poly_if_place(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_use_multi_dmy_poly_if_place(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_attach_effect_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn attach_effect_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_attach_effect_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn attach_effect_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_hit_force_magic(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_hit_force_magic(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ignore_sfx_if_hit_water(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ignore_sfx_if_hit_water(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ignore_move_state_if_hit_water(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ignore_move_state_if_hit_water(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_hit_dark_force_magic(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_hit_dark_force_magic(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_inherit_effect_to_child(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_inherit_effect_to_child(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_inherit_speed_to_child(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_inherit_speed_to_child(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_lock_module(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_lock_module(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_search_for_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_search_for_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_emitted_bullet(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_emitted_bullet(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_inherit_life_to_child(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_inherit_life_to_child(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_pos_hit_bullet(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_pos_hit_bullet(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_attach_attack_sfx(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_attach_attack_sfx(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_sp_correction0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_sp_correction0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_sp_correction1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_sp_correction1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_penetrate_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_penetrate_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_sp_correction2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_sp_correction2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_disable_int_scale(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_disable_int_scale(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_c3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_c3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for Bullet {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.atk_bullet_id as _;
        if ui.input_int("atkBullet_Id", &mut i).build() {
            self.atk_bullet_id = i as _;
        }

        let mut i: i32 = self.sfx_id_bullet as _;
        if ui.input_int("sfxIdBullet", &mut i).build() {
            self.sfx_id_bullet = i as _;
        }

        let mut i: i32 = self.sfx_id_hit as _;
        if ui.input_int("sfxIdHit", &mut i).build() {
            self.sfx_id_hit = i as _;
        }

        let mut i: i32 = self.sfx_id_flick as _;
        if ui.input_int("sfxIdFlick", &mut i).build() {
            self.sfx_id_flick = i as _;
        }

        let mut i: f32 = self.life;
        if ui.input_float("life", &mut i).build() {
            self.life = i;
        }

        let mut i: f32 = self.dist;
        if ui.input_float("dist", &mut i).build() {
            self.dist = i;
        }

        let mut i: f32 = self.shoot_interval;
        if ui.input_float("shootInterval", &mut i).build() {
            self.shoot_interval = i;
        }

        let mut i: f32 = self.gravity_in_range;
        if ui.input_float("gravityInRange", &mut i).build() {
            self.gravity_in_range = i;
        }

        let mut i: f32 = self.gravity_out_range;
        if ui.input_float("gravityOutRange", &mut i).build() {
            self.gravity_out_range = i;
        }

        let mut i: f32 = self.homing_stop_range;
        if ui.input_float("homingStopRange", &mut i).build() {
            self.homing_stop_range = i;
        }

        let mut i: f32 = self.init_vellocity;
        if ui.input_float("initVellocity", &mut i).build() {
            self.init_vellocity = i;
        }

        let mut i: f32 = self.accel_in_range;
        if ui.input_float("accelInRange", &mut i).build() {
            self.accel_in_range = i;
        }

        let mut i: f32 = self.accel_out_range;
        if ui.input_float("accelOutRange", &mut i).build() {
            self.accel_out_range = i;
        }

        let mut i: f32 = self.max_vellocity;
        if ui.input_float("maxVellocity", &mut i).build() {
            self.max_vellocity = i;
        }

        let mut i: f32 = self.min_vellocity;
        if ui.input_float("minVellocity", &mut i).build() {
            self.min_vellocity = i;
        }

        let mut i: f32 = self.accel_time;
        if ui.input_float("accelTime", &mut i).build() {
            self.accel_time = i;
        }

        let mut i: f32 = self.homing_begin_dist;
        if ui.input_float("homingBeginDist", &mut i).build() {
            self.homing_begin_dist = i;
        }

        let mut i: f32 = self.hit_radius;
        if ui.input_float("hitRadius", &mut i).build() {
            self.hit_radius = i;
        }

        let mut i: f32 = self.hit_radius_max;
        if ui.input_float("hitRadiusMax", &mut i).build() {
            self.hit_radius_max = i;
        }

        let mut i: f32 = self.spread_time;
        if ui.input_float("spreadTime", &mut i).build() {
            self.spread_time = i;
        }

        let mut i: f32 = self.exp_delay;
        if ui.input_float("expDelay", &mut i).build() {
            self.exp_delay = i;
        }

        let mut i: f32 = self.homing_offset_range;
        if ui.input_float("homingOffsetRange", &mut i).build() {
            self.homing_offset_range = i;
        }

        let mut i: f32 = self.dmg_hit_record_life_time;
        if ui.input_float("dmgHitRecordLifeTime", &mut i).build() {
            self.dmg_hit_record_life_time = i;
        }

        let mut i: f32 = self.external_force;
        if ui.input_float("externalForce", &mut i).build() {
            self.external_force = i;
        }

        let mut i: i32 = self.sp_effect_id_for_shooter as _;
        if ui.input_int("spEffectIdForShooter", &mut i).build() {
            self.sp_effect_id_for_shooter = i as _;
        }

        let mut i: i32 = self.auto_search_npc_think_id as _;
        if ui.input_int("autoSearchNpcThinkId", &mut i).build() {
            self.auto_search_npc_think_id = i as _;
        }

        let mut i: i32 = self.hit_bullet_id as _;
        if ui.input_int("hitBulletId", &mut i).build() {
            self.hit_bullet_id = i as _;
        }

        let mut i: i32 = self.sp_effect_id0 as _;
        if ui.input_int("spEffectId0", &mut i).build() {
            self.sp_effect_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_id1 as _;
        if ui.input_int("spEffectId1", &mut i).build() {
            self.sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.sp_effect_id2 as _;
        if ui.input_int("spEffectId2", &mut i).build() {
            self.sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.sp_effect_id3 as _;
        if ui.input_int("spEffectId3", &mut i).build() {
            self.sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.sp_effect_id4 as _;
        if ui.input_int("spEffectId4", &mut i).build() {
            self.sp_effect_id4 = i as _;
        }

        let mut i: i32 = self.num_shoot as _;
        if ui.input_int("numShoot", &mut i).build() {
            self.num_shoot = i as _;
        }

        let mut i: i32 = self.homing_angle as _;
        if ui.input_int("homingAngle", &mut i).build() {
            self.homing_angle = i as _;
        }

        let mut i: i32 = self.shoot_angle as _;
        if ui.input_int("shootAngle", &mut i).build() {
            self.shoot_angle = i as _;
        }

        let mut i: i32 = self.shoot_angle_interval as _;
        if ui.input_int("shootAngleInterval", &mut i).build() {
            self.shoot_angle_interval = i as _;
        }

        let mut i: i32 = self.shoot_angle_xinterval as _;
        if ui.input_int("shootAngleXInterval", &mut i).build() {
            self.shoot_angle_xinterval = i as _;
        }

        let mut i: i32 = self.damage_damp as _;
        if ui.input_int("damageDamp", &mut i).build() {
            self.damage_damp = i as _;
        }

        let mut i: i32 = self.magic_damage_damp as _;
        if ui.input_int("magicDamageDamp", &mut i).build() {
            self.magic_damage_damp = i as _;
        }

        let mut i: i32 = self.fire_damage_damp as _;
        if ui.input_int("fireDamageDamp", &mut i).build() {
            self.fire_damage_damp = i as _;
        }

        let mut i: i32 = self.thunder_damage_damp as _;
        if ui.input_int("thunderDamageDamp", &mut i).build() {
            self.thunder_damage_damp = i as _;
        }

        let mut i: i32 = self.stamina_damp as _;
        if ui.input_int("staminaDamp", &mut i).build() {
            self.stamina_damp = i as _;
        }

        let mut i: i32 = self.knockback_damp as _;
        if ui.input_int("knockbackDamp", &mut i).build() {
            self.knockback_damp = i as _;
        }

        let mut i: i32 = self.shoot_angle_xz as _;
        if ui.input_int("shootAngleXZ", &mut i).build() {
            self.shoot_angle_xz = i as _;
        }

        let mut i: i32 = self.lock_shoot_limit_ang as _;
        if ui.input_int("lockShootLimitAng", &mut i).build() {
            self.lock_shoot_limit_ang = i as _;
        }

        let mut i: i32 = self.is_penetrate as _;
        if ui.input_int("isPenetrate", &mut i).build() {
            self.is_penetrate = i as _;
        }

        let mut i: i32 = self.prev_vellocity_dir_rate as _;
        if ui.input_int("prevVellocityDirRate", &mut i).build() {
            self.prev_vellocity_dir_rate = i as _;
        }

        let mut i: i32 = self.atk_attribute as _;
        if ui.input_int("atkAttribute", &mut i).build() {
            self.atk_attribute = i as _;
        }

        let mut i: i32 = self.sp_attribute as _;
        if ui.input_int("spAttribute", &mut i).build() {
            self.sp_attribute = i as _;
        }

        let mut i: i32 = self.material_attack_type as _;
        if ui.input_int("Material_AttackType", &mut i).build() {
            self.material_attack_type = i as _;
        }

        let mut i: i32 = self.material_attack_material as _;
        if ui.input_int("Material_AttackMaterial", &mut i).build() {
            self.material_attack_material = i as _;
        }

        let mut i: i32 = self.material_size as _;
        if ui.input_int("Material_Size", &mut i).build() {
            self.material_size = i as _;
        }

        let mut i: i32 = self.launch_condition_type as _;
        if ui.input_int("launchConditionType", &mut i).build() {
            self.launch_condition_type = i as _;
        }

        let mut b: bool = self.follow_type0();
        if ui.checkbox("FollowType0", &mut b) {
            self.set_follow_type0(b);
        }

        let mut b: bool = self.follow_type1();
        if ui.checkbox("FollowType1", &mut b) {
            self.set_follow_type1(b);
        }

        let mut b: bool = self.follow_type2();
        if ui.checkbox("FollowType2", &mut b) {
            self.set_follow_type2(b);
        }

        let mut b: bool = self.emitte_pos_type0();
        if ui.checkbox("EmittePosType0", &mut b) {
            self.set_emitte_pos_type0(b);
        }

        let mut b: bool = self.emitte_pos_type1();
        if ui.checkbox("EmittePosType1", &mut b) {
            self.set_emitte_pos_type1(b);
        }

        let mut b: bool = self.emitte_pos_type2();
        if ui.checkbox("EmittePosType2", &mut b) {
            self.set_emitte_pos_type2(b);
        }

        let mut b: bool = self.is_attack_sfx();
        if ui.checkbox("IsAttackSfx", &mut b) {
            self.set_is_attack_sfx(b);
        }

        let mut b: bool = self.is_endless_hit();
        if ui.checkbox("IsEndlessHit", &mut b) {
            self.set_is_endless_hit(b);
        }

        let mut b: bool = self.is_penetrate_map();
        if ui.checkbox("IsPenetrateMap", &mut b) {
            self.set_is_penetrate_map(b);
        }

        let mut b: bool = self.is_hit_both_team();
        if ui.checkbox("IsHitBothTeam", &mut b) {
            self.set_is_hit_both_team(b);
        }

        let mut b: bool = self.is_use_shard_hit_list();
        if ui.checkbox("IsUseShardHitList", &mut b) {
            self.set_is_use_shard_hit_list(b);
        }

        let mut b: bool = self.is_use_multi_dmy_poly_if_place();
        if ui.checkbox("IsUseMultiDmyPolyIfPlace", &mut b) {
            self.set_is_use_multi_dmy_poly_if_place(b);
        }

        let mut b: bool = self.attach_effect_type0();
        if ui.checkbox("attachEffectType0", &mut b) {
            self.set_attach_effect_type0(b);
        }

        let mut b: bool = self.attach_effect_type1();
        if ui.checkbox("attachEffectType1", &mut b) {
            self.set_attach_effect_type1(b);
        }

        let mut b: bool = self.is_hit_force_magic();
        if ui.checkbox("IsHitForceMagic", &mut b) {
            self.set_is_hit_force_magic(b);
        }

        let mut b: bool = self.is_ignore_sfx_if_hit_water();
        if ui.checkbox("IsIgnoreSfxIfHitWater", &mut b) {
            self.set_is_ignore_sfx_if_hit_water(b);
        }

        let mut b: bool = self.is_ignore_move_state_if_hit_water();
        if ui.checkbox("IsIgnoreMoveStateIfHitWater", &mut b) {
            self.set_is_ignore_move_state_if_hit_water(b);
        }

        let mut b: bool = self.is_hit_dark_force_magic();
        if ui.checkbox("IsHitDarkForceMagic", &mut b) {
            self.set_is_hit_dark_force_magic(b);
        }

        let mut b: bool = self.is_inherit_effect_to_child();
        if ui.checkbox("IsInheritEffectToChild", &mut b) {
            self.set_is_inherit_effect_to_child(b);
        }

        let mut b: bool = self.is_inherit_speed_to_child();
        if ui.checkbox("IsInheritSpeedToChild", &mut b) {
            self.set_is_inherit_speed_to_child(b);
        }

        let mut b: bool = self.is_lock_module();
        if ui.checkbox("IsLockModule", &mut b) {
            self.set_is_lock_module(b);
        }

        let mut b: bool = self.is_search_for_target();
        if ui.checkbox("IsSearchForTarget", &mut b) {
            self.set_is_search_for_target(b);
        }

        let mut b: bool = self.is_emitted_bullet();
        if ui.checkbox("IsEmittedBullet", &mut b) {
            self.set_is_emitted_bullet(b);
        }

        let mut b: bool = self.is_inherit_life_to_child();
        if ui.checkbox("IsInheritLifeToChild", &mut b) {
            self.set_is_inherit_life_to_child(b);
        }

        let mut i: i32 = self.dark_damage_damp as _;
        if ui.input_int("darkDamageDamp", &mut i).build() {
            self.dark_damage_damp = i as _;
        }

        let mut i: i32 = self.bullet_hit_type0 as _;
        if ui.input_int("bulletHitType0", &mut i).build() {
            self.bullet_hit_type0 = i as _;
        }

        let mut i: i32 = self.bullet_hit_type1 as _;
        if ui.input_int("bulletHitType1", &mut i).build() {
            self.bullet_hit_type1 = i as _;
        }

        let mut i: f32 = self.sp_homing_yangle;
        if ui.input_float("SpHomingYAngle", &mut i).build() {
            self.sp_homing_yangle = i;
        }

        let mut i: f32 = self.rand_shoot_angle_xz;
        if ui.input_float("rand_ShootAngleXZ", &mut i).build() {
            self.rand_shoot_angle_xz = i;
        }

        let mut i: f32 = self.rand_shoot_angle_y;
        if ui.input_float("rand_ShootANgleY", &mut i).build() {
            self.rand_shoot_angle_y = i;
        }

        let mut i: i32 = self.bullet_emitter_bullet_id as _;
        if ui.input_int("bulletEmitter_bulletId", &mut i).build() {
            self.bullet_emitter_bullet_id = i as _;
        }

        let mut i: f32 = self.bullet_emitter_shoot_interval0;
        if ui
            .input_float("bulletEmitter_ShootInterval0", &mut i)
            .build()
        {
            self.bullet_emitter_shoot_interval0 = i;
        }

        let mut i: f32 = self.bullet_emitter_init_interval;
        if ui.input_float("bulletEmitter_InitInterval", &mut i).build() {
            self.bullet_emitter_init_interval = i;
        }

        let mut i: f32 = self.sp_homing_yangle_for_enemy;
        if ui.input_float("SpHomingYAngleForEnemy", &mut i).build() {
            self.sp_homing_yangle_for_enemy = i;
        }

        let mut i: f32 = self.bullet_emitter_shoot_interval1;
        if ui
            .input_float("bulletEmitter_ShootInterval1", &mut i)
            .build()
        {
            self.bullet_emitter_shoot_interval1 = i;
        }

        let mut i: i32 = self.launch_type as _;
        if ui.input_int("LaunchType", &mut i).build() {
            self.launch_type = i as _;
        }

        let mut i: i32 = self.limit_bullet_param_id as _;
        if ui.input_int("LimitBulletParamId", &mut i).build() {
            self.limit_bullet_param_id = i as _;
        }

        let mut i: i32 = self.counter_hit_type as _;
        if ui.input_int("CounterHitType", &mut i).build() {
            self.counter_hit_type = i as _;
        }

        let mut b: bool = self.is_pos_hit_bullet();
        if ui.checkbox("IsPosHitBullet", &mut b) {
            self.set_is_pos_hit_bullet(b);
        }

        let mut b: bool = self.is_attach_attack_sfx();
        if ui.checkbox("IsAttachAttackSfx", &mut b) {
            self.set_is_attach_attack_sfx(b);
        }

        let mut b: bool = self.is_sp_correction0();
        if ui.checkbox("IsSpCorrection0", &mut b) {
            self.set_is_sp_correction0(b);
        }

        let mut b: bool = self.is_sp_correction1();
        if ui.checkbox("IsSpCorrection1", &mut b) {
            self.set_is_sp_correction1(b);
        }

        let mut b: bool = self.is_penetrate_target();
        if ui.checkbox("IsPenetrateTarget", &mut b) {
            self.set_is_penetrate_target(b);
        }

        let mut b: bool = self.is_sp_correction2();
        if ui.checkbox("IsSpCorrection2", &mut b) {
            self.set_is_sp_correction2(b);
        }

        let mut b: bool = self.is_disable_int_scale();
        if ui.checkbox("IsDisableIntScale", &mut b) {
            self.set_is_disable_int_scale(b);
        }

        let mut b: bool = self.field0x_c3();
        if ui.checkbox("0xC3", &mut b) {
            self.set_field0x_c3(b);
        }

        let mut i: f32 = self.emitte_pos_radius;
        if ui.input_float("EmittePosRadius", &mut i).build() {
            self.emitte_pos_radius = i;
        }

        let mut i: i32 = self.hit_object_id as _;
        if ui.input_int("hitObjectId", &mut i).build() {
            self.hit_object_id = i as _;
        }

        let mut i: f32 = self.sub_life;
        if ui.input_float("subLife", &mut i).build() {
            self.sub_life = i;
        }

        let mut i: i32 = self.sub_homing_angle as _;
        if ui.input_int("subHomingAngle", &mut i).build() {
            self.sub_homing_angle = i as _;
        }

        let mut i: f32 = self.lock_shoot_correction_ang;
        if ui.input_float("lockShootCorrectionAng", &mut i).build() {
            self.lock_shoot_correction_ang = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct BulletCreateLimitParam {
    pub max_ammount: u8,
    pub pad1: [u8; 31],
}

impl RenderableParam for BulletCreateLimitParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.max_ammount as _;
        if ui.input_int("maxAmmount", &mut i).build() {
            self.max_ammount = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CalcCorrectGraph {
    pub stage_max_val0: f32,
    pub stage_max_val1: f32,
    pub stage_max_val2: f32,
    pub stage_max_val3: f32,
    pub stage_max_val4: f32,
    pub stage_max_grow_val0: f32,
    pub stage_max_grow_val1: f32,
    pub stage_max_grow_val2: f32,
    pub stage_max_grow_val3: f32,
    pub stage_max_grow_val4: f32,
    pub adj_pt_max_grow_val0: f32,
    pub adj_pt_max_grow_val1: f32,
    pub adj_pt_max_grow_val2: f32,
    pub adj_pt_max_grow_val3: f32,
    pub adj_pt_max_grow_val4: f32,
    pub init_inclination_soul: f32,
    pub adjustment_value: f32,
    pub boundry_inclination_soul: f32,
    pub boundry_value: f32,
    pub pad1: [u8; 4],
}

impl RenderableParam for CalcCorrectGraph {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.stage_max_val0;
        if ui.input_float("stageMaxVal0", &mut i).build() {
            self.stage_max_val0 = i;
        }

        let mut i: f32 = self.stage_max_val1;
        if ui.input_float("stageMaxVal1", &mut i).build() {
            self.stage_max_val1 = i;
        }

        let mut i: f32 = self.stage_max_val2;
        if ui.input_float("stageMaxVal2", &mut i).build() {
            self.stage_max_val2 = i;
        }

        let mut i: f32 = self.stage_max_val3;
        if ui.input_float("stageMaxVal3", &mut i).build() {
            self.stage_max_val3 = i;
        }

        let mut i: f32 = self.stage_max_val4;
        if ui.input_float("stageMaxVal4", &mut i).build() {
            self.stage_max_val4 = i;
        }

        let mut i: f32 = self.stage_max_grow_val0;
        if ui.input_float("stageMaxGrowVal0", &mut i).build() {
            self.stage_max_grow_val0 = i;
        }

        let mut i: f32 = self.stage_max_grow_val1;
        if ui.input_float("stageMaxGrowVal1", &mut i).build() {
            self.stage_max_grow_val1 = i;
        }

        let mut i: f32 = self.stage_max_grow_val2;
        if ui.input_float("stageMaxGrowVal2", &mut i).build() {
            self.stage_max_grow_val2 = i;
        }

        let mut i: f32 = self.stage_max_grow_val3;
        if ui.input_float("stageMaxGrowVal3", &mut i).build() {
            self.stage_max_grow_val3 = i;
        }

        let mut i: f32 = self.stage_max_grow_val4;
        if ui.input_float("stageMaxGrowVal4", &mut i).build() {
            self.stage_max_grow_val4 = i;
        }

        let mut i: f32 = self.adj_pt_max_grow_val0;
        if ui.input_float("adjPt_maxGrowVal0", &mut i).build() {
            self.adj_pt_max_grow_val0 = i;
        }

        let mut i: f32 = self.adj_pt_max_grow_val1;
        if ui.input_float("adjPt_maxGrowVal1", &mut i).build() {
            self.adj_pt_max_grow_val1 = i;
        }

        let mut i: f32 = self.adj_pt_max_grow_val2;
        if ui.input_float("adjPt_maxGrowVal2", &mut i).build() {
            self.adj_pt_max_grow_val2 = i;
        }

        let mut i: f32 = self.adj_pt_max_grow_val3;
        if ui.input_float("adjPt_maxGrowVal3", &mut i).build() {
            self.adj_pt_max_grow_val3 = i;
        }

        let mut i: f32 = self.adj_pt_max_grow_val4;
        if ui.input_float("adjPt_maxGrowVal4", &mut i).build() {
            self.adj_pt_max_grow_val4 = i;
        }

        let mut i: f32 = self.init_inclination_soul;
        if ui.input_float("init_inclination_soul", &mut i).build() {
            self.init_inclination_soul = i;
        }

        let mut i: f32 = self.adjustment_value;
        if ui.input_float("adjustment_value", &mut i).build() {
            self.adjustment_value = i;
        }

        let mut i: f32 = self.boundry_inclination_soul;
        if ui.input_float("boundry_inclination_soul", &mut i).build() {
            self.boundry_inclination_soul = i;
        }

        let mut i: f32 = self.boundry_value;
        if ui.input_float("boundry_value", &mut i).build() {
            self.boundry_value = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct Ceremony {
    pub event_layer_id: i32,
    pub map_studio_layer_id: i32,
    pub gparam_id: i16,
    pub gparam_id_0: i16,
    pub point: i32,
    pub g_i_texture_id: i32,
    pub light: i32,
    pub is_reload: u8,
    pub is_disable_online: u8,
    pub pad1: [u8; 10],
}

impl RenderableParam for Ceremony {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.event_layer_id as _;
        if ui.input_int("EventLayerID", &mut i).build() {
            self.event_layer_id = i as _;
        }

        let mut i: i32 = self.map_studio_layer_id as _;
        if ui.input_int("MapStudioLayerID", &mut i).build() {
            self.map_studio_layer_id = i as _;
        }

        let mut i: i32 = self.gparam_id as _;
        if ui.input_int("GparamID", &mut i).build() {
            self.gparam_id = i as _;
        }

        let mut i: i32 = self.gparam_id_0 as _;
        if ui.input_int("GparamID_0", &mut i).build() {
            self.gparam_id_0 = i as _;
        }

        let mut i: i32 = self.point as _;
        if ui.input_int("Point", &mut i).build() {
            self.point = i as _;
        }

        let mut i: i32 = self.g_i_texture_id as _;
        if ui.input_int("GI_TextureID", &mut i).build() {
            self.g_i_texture_id = i as _;
        }

        let mut i: i32 = self.light as _;
        if ui.input_int("Light", &mut i).build() {
            self.light = i as _;
        }

        let mut i: i32 = self.is_reload as _;
        if ui.input_int("IsReload", &mut i).build() {
            self.is_reload = i as _;
        }

        let mut i: i32 = self.is_disable_online as _;
        if ui.input_int("IsDisableOnline", &mut i).build() {
            self.is_disable_online = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CharacterLoadParam {
    pub chr_bnd_type: u8,
    pub ani_bnd_type: u8,
    pub tex_bnd_type: u8,
    pub beh_bnd_type: u8,
    pub snd_chr_type: u8,
}

impl RenderableParam for CharacterLoadParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.chr_bnd_type as _;
        if ui.input_int("ChrBndType", &mut i).build() {
            self.chr_bnd_type = i as _;
        }

        let mut i: i32 = self.ani_bnd_type as _;
        if ui.input_int("AniBndType", &mut i).build() {
            self.ani_bnd_type = i as _;
        }

        let mut i: i32 = self.tex_bnd_type as _;
        if ui.input_int("TexBndType", &mut i).build() {
            self.tex_bnd_type = i as _;
        }

        let mut i: i32 = self.beh_bnd_type as _;
        if ui.input_int("BehBndType", &mut i).build() {
            self.beh_bnd_type = i as _;
        }

        let mut i: i32 = self.snd_chr_type as _;
        if ui.input_int("SndChrType", &mut i).build() {
            self.snd_chr_type = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CharaInitParam {
    pub base_rec_mp: f32,
    pub base_rec_sp: f32,
    pub red_falldam: f32,
    pub soul: i32,
    pub equip_wep_right: i32,
    pub equip_subwep_right: i32,
    pub equip_wep_left: i32,
    pub equip_subwep_left: i32,
    pub equip_helm: i32,
    pub equip_armor: i32,
    pub equip_gaunt: i32,
    pub equip_leg: i32,
    pub equip_arrow: i32,
    pub equip_bolt: i32,
    pub equip_sub_arrow: i32,
    pub equip_sub_bolt: i32,
    pub equip_accessory1: i32,
    pub equip_accessory2: i32,
    pub equip_accessory3: i32,
    pub equip_accessory4: i32,
    pub equip_accessory5: i32,
    pub equip_skill_01: i32,
    pub equip_skill_02: i32,
    pub equip_skill_03: i32,
    pub equip_spell_01: i32,
    pub equip_spell_02: i32,
    pub equip_spell_03: i32,
    pub equip_spell_04: i32,
    pub equip_spell_05: i32,
    pub equip_spell_06: i32,
    pub equip_spell_07: i32,
    pub item_01: i32,
    pub item_02: i32,
    pub item_03: i32,
    pub item_04: i32,
    pub item_05: i32,
    pub item_06: i32,
    pub item_07: i32,
    pub item_08: i32,
    pub item_09: i32,
    pub item_10: i32,
    pub npc_player_face_gen_id: i32,
    pub npc_player_think_id: i32,
    pub base_hp: i16,
    pub base_mp: i16,
    pub base_sp: i16,
    pub arrow_num: i16,
    pub bolt_num: i16,
    pub sub_arrow_num: i16,
    pub sub_bolt_num: i16,
    pub q_wc_sb: i16,
    pub q_wc_mw: i16,
    pub q_wc_cd: i16,
    pub soul_lvl: i16,
    pub base_vit: i8,
    pub base_wil: i8,
    pub base_end: i8,
    pub base_str: i8,
    pub base_dex: i8,
    pub base_mag: i8,
    pub base_fai: i8,
    pub base_luc: i8,
    pub base_hero_point: i8,
    pub base_durability: i8,
    pub item_num_01: u8,
    pub item_num_02: u8,
    pub item_num_03: u8,
    pub item_num_04: u8,
    pub item_num_05: u8,
    pub item_num_06: u8,
    pub item_num_07: u8,
    pub item_num_08: u8,
    pub item_num_09: u8,
    pub item_num_10: u8,
    pub body_scale_head: u8,
    pub body_scale_breast: u8,
    pub body_scale_abdomen: u8,
    pub body_scale_arm: u8,
    pub body_scale_leg: u8,
    pub gestureid0: u8,
    pub gestureid1: u8,
    pub gestureid2: u8,
    pub gestureid3: u8,
    pub gestureid4: u8,
    pub gestureid5: u8,
    pub gestureid6: u8,
    pub npc_player_type: u8,
    pub npc_player_draw_type: u8,
    pub npc_player_sex: u8,
    pub vow_type: u8,
    pub voice_type: u8,
    pub pad1: [u8; 1],
    pub equip_wep_right_gen_id: i32,
    pub equip_subwep_right_gen_id: i32,
    pub equip_wep_left_gen_id: i32,
    pub equip_subwep_left_gen_id: i32,
    pub equip_helm_gen_id: i32,
    pub equip_armor_gen_id: i32,
    pub equip_gaunt_gen_id: i32,
    pub equip_leg_gen_id: i32,
    pub equip_wep_body_gen_id: i32,
    pub secondary_item_01: i32,
    pub secondary_item_02: i32,
    pub secondary_item_03: i32,
    pub secondary_item_04: i32,
    pub secondary_item_05: i32,
    pub secondary_item_06: i32,
    pub secondary_item_07: i32,
    pub secondary_item_08: i32,
    pub secondary_item_num_01: u8,
    pub secondary_item_num_02: u8,
    pub secondary_item_num_03: u8,
    pub secondary_item_num_04: u8,
    pub secondary_item_num_05: u8,
    pub secondary_item_num_06: u8,
    pub secondary_item_num_07: u8,
    pub secondary_item_num_08: u8,
    pub pad2: [u8; 12],
}

impl RenderableParam for CharaInitParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.base_rec_mp;
        if ui.input_float("BaseRec_mp", &mut i).build() {
            self.base_rec_mp = i;
        }

        let mut i: f32 = self.base_rec_sp;
        if ui.input_float("BaseRec_sp", &mut i).build() {
            self.base_rec_sp = i;
        }

        let mut i: f32 = self.red_falldam;
        if ui.input_float("red_Falldam", &mut i).build() {
            self.red_falldam = i;
        }

        let mut i: i32 = self.soul as _;
        if ui.input_int("soul", &mut i).build() {
            self.soul = i as _;
        }

        let mut i: i32 = self.equip_wep_right as _;
        if ui.input_int("equip_Wep_Right", &mut i).build() {
            self.equip_wep_right = i as _;
        }

        let mut i: i32 = self.equip_subwep_right as _;
        if ui.input_int("equip_Subwep_Right", &mut i).build() {
            self.equip_subwep_right = i as _;
        }

        let mut i: i32 = self.equip_wep_left as _;
        if ui.input_int("equip_Wep_Left", &mut i).build() {
            self.equip_wep_left = i as _;
        }

        let mut i: i32 = self.equip_subwep_left as _;
        if ui.input_int("equip_Subwep_Left", &mut i).build() {
            self.equip_subwep_left = i as _;
        }

        let mut i: i32 = self.equip_helm as _;
        if ui.input_int("equip_Helm", &mut i).build() {
            self.equip_helm = i as _;
        }

        let mut i: i32 = self.equip_armor as _;
        if ui.input_int("equip_Armor", &mut i).build() {
            self.equip_armor = i as _;
        }

        let mut i: i32 = self.equip_gaunt as _;
        if ui.input_int("equip_Gaunt", &mut i).build() {
            self.equip_gaunt = i as _;
        }

        let mut i: i32 = self.equip_leg as _;
        if ui.input_int("equip_Leg", &mut i).build() {
            self.equip_leg = i as _;
        }

        let mut i: i32 = self.equip_arrow as _;
        if ui.input_int("equip_Arrow", &mut i).build() {
            self.equip_arrow = i as _;
        }

        let mut i: i32 = self.equip_bolt as _;
        if ui.input_int("equip_Bolt", &mut i).build() {
            self.equip_bolt = i as _;
        }

        let mut i: i32 = self.equip_sub_arrow as _;
        if ui.input_int("equip_SubArrow", &mut i).build() {
            self.equip_sub_arrow = i as _;
        }

        let mut i: i32 = self.equip_sub_bolt as _;
        if ui.input_int("equip_SubBolt", &mut i).build() {
            self.equip_sub_bolt = i as _;
        }

        let mut i: i32 = self.equip_accessory1 as _;
        if ui.input_int("equip_Accessory1", &mut i).build() {
            self.equip_accessory1 = i as _;
        }

        let mut i: i32 = self.equip_accessory2 as _;
        if ui.input_int("equip_Accessory2", &mut i).build() {
            self.equip_accessory2 = i as _;
        }

        let mut i: i32 = self.equip_accessory3 as _;
        if ui.input_int("equip_Accessory3", &mut i).build() {
            self.equip_accessory3 = i as _;
        }

        let mut i: i32 = self.equip_accessory4 as _;
        if ui.input_int("equip_Accessory4", &mut i).build() {
            self.equip_accessory4 = i as _;
        }

        let mut i: i32 = self.equip_accessory5 as _;
        if ui.input_int("equip_Accessory5", &mut i).build() {
            self.equip_accessory5 = i as _;
        }

        let mut i: i32 = self.equip_skill_01 as _;
        if ui.input_int("Equip_Skill_01", &mut i).build() {
            self.equip_skill_01 = i as _;
        }

        let mut i: i32 = self.equip_skill_02 as _;
        if ui.input_int("Equip_Skill_02", &mut i).build() {
            self.equip_skill_02 = i as _;
        }

        let mut i: i32 = self.equip_skill_03 as _;
        if ui.input_int("Equip_Skill_03", &mut i).build() {
            self.equip_skill_03 = i as _;
        }

        let mut i: i32 = self.equip_spell_01 as _;
        if ui.input_int("equip_Spell_01", &mut i).build() {
            self.equip_spell_01 = i as _;
        }

        let mut i: i32 = self.equip_spell_02 as _;
        if ui.input_int("equip_Spell_02", &mut i).build() {
            self.equip_spell_02 = i as _;
        }

        let mut i: i32 = self.equip_spell_03 as _;
        if ui.input_int("equip_Spell_03", &mut i).build() {
            self.equip_spell_03 = i as _;
        }

        let mut i: i32 = self.equip_spell_04 as _;
        if ui.input_int("equip_Spell_04", &mut i).build() {
            self.equip_spell_04 = i as _;
        }

        let mut i: i32 = self.equip_spell_05 as _;
        if ui.input_int("equip_Spell_05", &mut i).build() {
            self.equip_spell_05 = i as _;
        }

        let mut i: i32 = self.equip_spell_06 as _;
        if ui.input_int("equip_Spell_06", &mut i).build() {
            self.equip_spell_06 = i as _;
        }

        let mut i: i32 = self.equip_spell_07 as _;
        if ui.input_int("equip_Spell_07", &mut i).build() {
            self.equip_spell_07 = i as _;
        }

        let mut i: i32 = self.item_01 as _;
        if ui.input_int("Item_01", &mut i).build() {
            self.item_01 = i as _;
        }

        let mut i: i32 = self.item_02 as _;
        if ui.input_int("Item_02", &mut i).build() {
            self.item_02 = i as _;
        }

        let mut i: i32 = self.item_03 as _;
        if ui.input_int("Item_03", &mut i).build() {
            self.item_03 = i as _;
        }

        let mut i: i32 = self.item_04 as _;
        if ui.input_int("Item_04", &mut i).build() {
            self.item_04 = i as _;
        }

        let mut i: i32 = self.item_05 as _;
        if ui.input_int("Item_05", &mut i).build() {
            self.item_05 = i as _;
        }

        let mut i: i32 = self.item_06 as _;
        if ui.input_int("Item_06", &mut i).build() {
            self.item_06 = i as _;
        }

        let mut i: i32 = self.item_07 as _;
        if ui.input_int("Item_07", &mut i).build() {
            self.item_07 = i as _;
        }

        let mut i: i32 = self.item_08 as _;
        if ui.input_int("Item_08", &mut i).build() {
            self.item_08 = i as _;
        }

        let mut i: i32 = self.item_09 as _;
        if ui.input_int("Item_09", &mut i).build() {
            self.item_09 = i as _;
        }

        let mut i: i32 = self.item_10 as _;
        if ui.input_int("Item_10", &mut i).build() {
            self.item_10 = i as _;
        }

        let mut i: i32 = self.npc_player_face_gen_id as _;
        if ui.input_int("npcPlayerFaceGenId", &mut i).build() {
            self.npc_player_face_gen_id = i as _;
        }

        let mut i: i32 = self.npc_player_think_id as _;
        if ui.input_int("npcPlayerThinkId", &mut i).build() {
            self.npc_player_think_id = i as _;
        }

        let mut i: i32 = self.base_hp as _;
        if ui.input_int("baseHp", &mut i).build() {
            self.base_hp = i as _;
        }

        let mut i: i32 = self.base_mp as _;
        if ui.input_int("baseMp", &mut i).build() {
            self.base_mp = i as _;
        }

        let mut i: i32 = self.base_sp as _;
        if ui.input_int("baseSp", &mut i).build() {
            self.base_sp = i as _;
        }

        let mut i: i32 = self.arrow_num as _;
        if ui.input_int("arrowNum", &mut i).build() {
            self.arrow_num = i as _;
        }

        let mut i: i32 = self.bolt_num as _;
        if ui.input_int("boltNum", &mut i).build() {
            self.bolt_num = i as _;
        }

        let mut i: i32 = self.sub_arrow_num as _;
        if ui.input_int("subArrowNum", &mut i).build() {
            self.sub_arrow_num = i as _;
        }

        let mut i: i32 = self.sub_bolt_num as _;
        if ui.input_int("subBoltNum", &mut i).build() {
            self.sub_bolt_num = i as _;
        }

        let mut i: i32 = self.q_wc_sb as _;
        if ui.input_int("QWC_sb", &mut i).build() {
            self.q_wc_sb = i as _;
        }

        let mut i: i32 = self.q_wc_mw as _;
        if ui.input_int("QWC_mw", &mut i).build() {
            self.q_wc_mw = i as _;
        }

        let mut i: i32 = self.q_wc_cd as _;
        if ui.input_int("QWC_cd", &mut i).build() {
            self.q_wc_cd = i as _;
        }

        let mut i: i32 = self.soul_lvl as _;
        if ui.input_int("soulLvl", &mut i).build() {
            self.soul_lvl = i as _;
        }

        let mut i: i32 = self.base_vit as _;
        if ui.input_int("baseVit", &mut i).build() {
            self.base_vit = i as _;
        }

        let mut i: i32 = self.base_wil as _;
        if ui.input_int("baseWil", &mut i).build() {
            self.base_wil = i as _;
        }

        let mut i: i32 = self.base_end as _;
        if ui.input_int("baseEnd", &mut i).build() {
            self.base_end = i as _;
        }

        let mut i: i32 = self.base_str as _;
        if ui.input_int("baseStr", &mut i).build() {
            self.base_str = i as _;
        }

        let mut i: i32 = self.base_dex as _;
        if ui.input_int("baseDex", &mut i).build() {
            self.base_dex = i as _;
        }

        let mut i: i32 = self.base_mag as _;
        if ui.input_int("baseMag", &mut i).build() {
            self.base_mag = i as _;
        }

        let mut i: i32 = self.base_fai as _;
        if ui.input_int("baseFai", &mut i).build() {
            self.base_fai = i as _;
        }

        let mut i: i32 = self.base_luc as _;
        if ui.input_int("baseLuc", &mut i).build() {
            self.base_luc = i as _;
        }

        let mut i: i32 = self.base_hero_point as _;
        if ui.input_int("baseHeroPoint", &mut i).build() {
            self.base_hero_point = i as _;
        }

        let mut i: i32 = self.base_durability as _;
        if ui.input_int("baseDurability", &mut i).build() {
            self.base_durability = i as _;
        }

        let mut i: i32 = self.item_num_01 as _;
        if ui.input_int("itemNum_01", &mut i).build() {
            self.item_num_01 = i as _;
        }

        let mut i: i32 = self.item_num_02 as _;
        if ui.input_int("itemNum_02", &mut i).build() {
            self.item_num_02 = i as _;
        }

        let mut i: i32 = self.item_num_03 as _;
        if ui.input_int("itemNum_03", &mut i).build() {
            self.item_num_03 = i as _;
        }

        let mut i: i32 = self.item_num_04 as _;
        if ui.input_int("itemNum_04", &mut i).build() {
            self.item_num_04 = i as _;
        }

        let mut i: i32 = self.item_num_05 as _;
        if ui.input_int("itemNum_05", &mut i).build() {
            self.item_num_05 = i as _;
        }

        let mut i: i32 = self.item_num_06 as _;
        if ui.input_int("itemNum_06", &mut i).build() {
            self.item_num_06 = i as _;
        }

        let mut i: i32 = self.item_num_07 as _;
        if ui.input_int("itemNum_07", &mut i).build() {
            self.item_num_07 = i as _;
        }

        let mut i: i32 = self.item_num_08 as _;
        if ui.input_int("itemNum_08", &mut i).build() {
            self.item_num_08 = i as _;
        }

        let mut i: i32 = self.item_num_09 as _;
        if ui.input_int("itemNum_09", &mut i).build() {
            self.item_num_09 = i as _;
        }

        let mut i: i32 = self.item_num_10 as _;
        if ui.input_int("itemNum_10", &mut i).build() {
            self.item_num_10 = i as _;
        }

        let mut i: i32 = self.body_scale_head as _;
        if ui.input_int("bodyScaleHead", &mut i).build() {
            self.body_scale_head = i as _;
        }

        let mut i: i32 = self.body_scale_breast as _;
        if ui.input_int("bodyScaleBreast", &mut i).build() {
            self.body_scale_breast = i as _;
        }

        let mut i: i32 = self.body_scale_abdomen as _;
        if ui.input_int("BodyScaleAbdomen", &mut i).build() {
            self.body_scale_abdomen = i as _;
        }

        let mut i: i32 = self.body_scale_arm as _;
        if ui.input_int("BodyScaleArm", &mut i).build() {
            self.body_scale_arm = i as _;
        }

        let mut i: i32 = self.body_scale_leg as _;
        if ui.input_int("BodyScaleLeg", &mut i).build() {
            self.body_scale_leg = i as _;
        }

        let mut i: i32 = self.gestureid0 as _;
        if ui.input_int("gestureid0", &mut i).build() {
            self.gestureid0 = i as _;
        }

        let mut i: i32 = self.gestureid1 as _;
        if ui.input_int("gestureid1", &mut i).build() {
            self.gestureid1 = i as _;
        }

        let mut i: i32 = self.gestureid2 as _;
        if ui.input_int("gestureid2", &mut i).build() {
            self.gestureid2 = i as _;
        }

        let mut i: i32 = self.gestureid3 as _;
        if ui.input_int("gestureid3", &mut i).build() {
            self.gestureid3 = i as _;
        }

        let mut i: i32 = self.gestureid4 as _;
        if ui.input_int("gestureid4", &mut i).build() {
            self.gestureid4 = i as _;
        }

        let mut i: i32 = self.gestureid5 as _;
        if ui.input_int("gestureid5", &mut i).build() {
            self.gestureid5 = i as _;
        }

        let mut i: i32 = self.gestureid6 as _;
        if ui.input_int("gestureid6", &mut i).build() {
            self.gestureid6 = i as _;
        }

        let mut i: i32 = self.npc_player_type as _;
        if ui.input_int("npcPlayerType", &mut i).build() {
            self.npc_player_type = i as _;
        }

        let mut i: i32 = self.npc_player_draw_type as _;
        if ui.input_int("npcPlayerDrawType", &mut i).build() {
            self.npc_player_draw_type = i as _;
        }

        let mut i: i32 = self.npc_player_sex as _;
        if ui.input_int("NpcPlayerSex", &mut i).build() {
            self.npc_player_sex = i as _;
        }

        let mut i: i32 = self.vow_type as _;
        if ui.input_int("vowType", &mut i).build() {
            self.vow_type = i as _;
        }

        let mut i: i32 = self.voice_type as _;
        if ui.input_int("VoiceType", &mut i).build() {
            self.voice_type = i as _;
        }

        let mut i: i32 = self.equip_wep_right_gen_id as _;
        if ui.input_int("equip_Wep_Right_GenId", &mut i).build() {
            self.equip_wep_right_gen_id = i as _;
        }

        let mut i: i32 = self.equip_subwep_right_gen_id as _;
        if ui.input_int("equip_Subwep_Right_GenId", &mut i).build() {
            self.equip_subwep_right_gen_id = i as _;
        }

        let mut i: i32 = self.equip_wep_left_gen_id as _;
        if ui.input_int("equip_Wep_Left_GenId", &mut i).build() {
            self.equip_wep_left_gen_id = i as _;
        }

        let mut i: i32 = self.equip_subwep_left_gen_id as _;
        if ui.input_int("equip_Subwep_Left_GenId", &mut i).build() {
            self.equip_subwep_left_gen_id = i as _;
        }

        let mut i: i32 = self.equip_helm_gen_id as _;
        if ui.input_int("equip_Helm_GenId", &mut i).build() {
            self.equip_helm_gen_id = i as _;
        }

        let mut i: i32 = self.equip_armor_gen_id as _;
        if ui.input_int("equip_Armor_GenId", &mut i).build() {
            self.equip_armor_gen_id = i as _;
        }

        let mut i: i32 = self.equip_gaunt_gen_id as _;
        if ui.input_int("equip_Gaunt_GenId", &mut i).build() {
            self.equip_gaunt_gen_id = i as _;
        }

        let mut i: i32 = self.equip_leg_gen_id as _;
        if ui.input_int("equip_Leg_GenId", &mut i).build() {
            self.equip_leg_gen_id = i as _;
        }

        let mut i: i32 = self.equip_wep_body_gen_id as _;
        if ui.input_int("equip_Wep_Body_GenId", &mut i).build() {
            self.equip_wep_body_gen_id = i as _;
        }

        let mut i: i32 = self.secondary_item_01 as _;
        if ui.input_int("SecondaryItem_01", &mut i).build() {
            self.secondary_item_01 = i as _;
        }

        let mut i: i32 = self.secondary_item_02 as _;
        if ui.input_int("SecondaryItem_02", &mut i).build() {
            self.secondary_item_02 = i as _;
        }

        let mut i: i32 = self.secondary_item_03 as _;
        if ui.input_int("SecondaryItem_03", &mut i).build() {
            self.secondary_item_03 = i as _;
        }

        let mut i: i32 = self.secondary_item_04 as _;
        if ui.input_int("SecondaryItem_04", &mut i).build() {
            self.secondary_item_04 = i as _;
        }

        let mut i: i32 = self.secondary_item_05 as _;
        if ui.input_int("SecondaryItem_05", &mut i).build() {
            self.secondary_item_05 = i as _;
        }

        let mut i: i32 = self.secondary_item_06 as _;
        if ui.input_int("SecondaryItem_06", &mut i).build() {
            self.secondary_item_06 = i as _;
        }

        let mut i: i32 = self.secondary_item_07 as _;
        if ui.input_int("SecondaryItem_07", &mut i).build() {
            self.secondary_item_07 = i as _;
        }

        let mut i: i32 = self.secondary_item_08 as _;
        if ui.input_int("SecondaryItem_08", &mut i).build() {
            self.secondary_item_08 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_01 as _;
        if ui.input_int("secondaryItemNum_01", &mut i).build() {
            self.secondary_item_num_01 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_02 as _;
        if ui.input_int("secondaryItemNum_02", &mut i).build() {
            self.secondary_item_num_02 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_03 as _;
        if ui.input_int("secondaryItemNum_03", &mut i).build() {
            self.secondary_item_num_03 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_04 as _;
        if ui.input_int("secondaryItemNum_04", &mut i).build() {
            self.secondary_item_num_04 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_05 as _;
        if ui.input_int("secondaryItemNum_05", &mut i).build() {
            self.secondary_item_num_05 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_06 as _;
        if ui.input_int("secondaryItemNum_06", &mut i).build() {
            self.secondary_item_num_06 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_07 as _;
        if ui.input_int("secondaryItemNum_07", &mut i).build() {
            self.secondary_item_num_07 = i as _;
        }

        let mut i: i32 = self.secondary_item_num_08 as _;
        if ui.input_int("secondaryItemNum_08", &mut i).build() {
            self.secondary_item_num_08 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CharMakeMenuListItemParam {
    pub value: i32,
    pub caption_id: i32,
    pub icon_id: u8,
    pub pad1: [u8; 7],
}

impl RenderableParam for CharMakeMenuListItemParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.value as _;
        if ui.input_int("Value", &mut i).build() {
            self.value = i as _;
        }

        let mut i: i32 = self.caption_id as _;
        if ui.input_int("CaptionId", &mut i).build() {
            self.caption_id = i as _;
        }

        let mut i: i32 = self.icon_id as _;
        if ui.input_int("IconID", &mut i).build() {
            self.icon_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CharMakeMenuTopParam {
    pub command_id: i32,
    pub face_param_id: i32,
    pub table_id: i32,
    pub view_condition: i32,
    pub preview_mode: u8,
    pub pad1: [u8; 3],
    pub menu_type: i8,
    pub pad2: [u8; 11],
}

impl RenderableParam for CharMakeMenuTopParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.command_id as _;
        if ui.input_int("CommandID", &mut i).build() {
            self.command_id = i as _;
        }

        let mut i: i32 = self.face_param_id as _;
        if ui.input_int("FaceParamID", &mut i).build() {
            self.face_param_id = i as _;
        }

        let mut i: i32 = self.table_id as _;
        if ui.input_int("TableID", &mut i).build() {
            self.table_id = i as _;
        }

        let mut i: i32 = self.view_condition as _;
        if ui.input_int("ViewCondition", &mut i).build() {
            self.view_condition = i as _;
        }

        let mut i: i32 = self.preview_mode as _;
        if ui.input_int("PreviewMode", &mut i).build() {
            self.preview_mode = i as _;
        }

        let mut i: i32 = self.menu_type as _;
        if ui.input_int("MenuType", &mut i).build() {
            self.menu_type = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ClearCountCorrectParam {
    pub h_p: f32,
    pub mana: f32,
    pub stamina: f32,
    pub phys_dmg: f32,
    pub slash_dmg: f32,
    pub blow_dmg: f32,
    pub thrust_dmg: f32,
    pub neutral: f32,
    pub magic_dmg: f32,
    pub fire_dmg: f32,
    pub thunder_dmg: f32,
    pub dark_dmg: f32,
    pub phys_resist: f32,
    pub magic_resist: f32,
    pub fire_resist: f32,
    pub thunder_resist: f32,
    pub dark_resist: f32,
    pub stamina_dmg: f32,
    pub mp_recover: f32,
    pub poison_resist: f32,
    pub toxic_resist: f32,
    pub bleed_resist: f32,
    pub curse_resist: f32,
    pub frost_resist: f32,
    pub hp_recover: f32,
    pub sub_mp_recover: f32,
    pub sub_hp_recover: f32,
    pub pad1: [u8; 20],
}

impl RenderableParam for ClearCountCorrectParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.h_p;
        if ui.input_float("HP", &mut i).build() {
            self.h_p = i;
        }

        let mut i: f32 = self.mana;
        if ui.input_float("Mana", &mut i).build() {
            self.mana = i;
        }

        let mut i: f32 = self.stamina;
        if ui.input_float("Stamina", &mut i).build() {
            self.stamina = i;
        }

        let mut i: f32 = self.phys_dmg;
        if ui.input_float("PhysDmg", &mut i).build() {
            self.phys_dmg = i;
        }

        let mut i: f32 = self.slash_dmg;
        if ui.input_float("slashDmg", &mut i).build() {
            self.slash_dmg = i;
        }

        let mut i: f32 = self.blow_dmg;
        if ui.input_float("blowDmg", &mut i).build() {
            self.blow_dmg = i;
        }

        let mut i: f32 = self.thrust_dmg;
        if ui.input_float("thrustDmg", &mut i).build() {
            self.thrust_dmg = i;
        }

        let mut i: f32 = self.neutral;
        if ui.input_float("neutral", &mut i).build() {
            self.neutral = i;
        }

        let mut i: f32 = self.magic_dmg;
        if ui.input_float("MagicDmg", &mut i).build() {
            self.magic_dmg = i;
        }

        let mut i: f32 = self.fire_dmg;
        if ui.input_float("FireDmg", &mut i).build() {
            self.fire_dmg = i;
        }

        let mut i: f32 = self.thunder_dmg;
        if ui.input_float("ThunderDmg", &mut i).build() {
            self.thunder_dmg = i;
        }

        let mut i: f32 = self.dark_dmg;
        if ui.input_float("DarkDmg", &mut i).build() {
            self.dark_dmg = i;
        }

        let mut i: f32 = self.phys_resist;
        if ui.input_float("PhysResist", &mut i).build() {
            self.phys_resist = i;
        }

        let mut i: f32 = self.magic_resist;
        if ui.input_float("MagicResist", &mut i).build() {
            self.magic_resist = i;
        }

        let mut i: f32 = self.fire_resist;
        if ui.input_float("FireResist", &mut i).build() {
            self.fire_resist = i;
        }

        let mut i: f32 = self.thunder_resist;
        if ui.input_float("ThunderResist", &mut i).build() {
            self.thunder_resist = i;
        }

        let mut i: f32 = self.dark_resist;
        if ui.input_float("DarkResist", &mut i).build() {
            self.dark_resist = i;
        }

        let mut i: f32 = self.stamina_dmg;
        if ui.input_float("StaminaDmg", &mut i).build() {
            self.stamina_dmg = i;
        }

        let mut i: f32 = self.mp_recover;
        if ui.input_float("MpRecover", &mut i).build() {
            self.mp_recover = i;
        }

        let mut i: f32 = self.poison_resist;
        if ui.input_float("PoisonResist", &mut i).build() {
            self.poison_resist = i;
        }

        let mut i: f32 = self.toxic_resist;
        if ui.input_float("ToxicResist", &mut i).build() {
            self.toxic_resist = i;
        }

        let mut i: f32 = self.bleed_resist;
        if ui.input_float("BleedResist", &mut i).build() {
            self.bleed_resist = i;
        }

        let mut i: f32 = self.curse_resist;
        if ui.input_float("CurseResist", &mut i).build() {
            self.curse_resist = i;
        }

        let mut i: f32 = self.frost_resist;
        if ui.input_float("FrostResist", &mut i).build() {
            self.frost_resist = i;
        }

        let mut i: f32 = self.hp_recover;
        if ui.input_float("HpRecover", &mut i).build() {
            self.hp_recover = i;
        }

        let mut i: f32 = self.sub_mp_recover;
        if ui.input_float("subMpRecover", &mut i).build() {
            self.sub_mp_recover = i;
        }

        let mut i: f32 = self.sub_hp_recover;
        if ui.input_float("subHpRecover", &mut i).build() {
            self.sub_hp_recover = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CoolTimeParam {
    pub limitation_time_0: f32,
    pub observation_time_0: f32,
    pub limitation_time_1: f32,
    pub observation_time_1: f32,
    pub limitation_time_2: f32,
    pub observation_time_2: f32,
    pub limitation_time_3: f32,
    pub observation_time_3: f32,
}

impl RenderableParam for CoolTimeParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.limitation_time_0;
        if ui.input_float("limitationTime_0", &mut i).build() {
            self.limitation_time_0 = i;
        }

        let mut i: f32 = self.observation_time_0;
        if ui.input_float("observationTime_0", &mut i).build() {
            self.observation_time_0 = i;
        }

        let mut i: f32 = self.limitation_time_1;
        if ui.input_float("limitationTime_1", &mut i).build() {
            self.limitation_time_1 = i;
        }

        let mut i: f32 = self.observation_time_1;
        if ui.input_float("observationTime_1", &mut i).build() {
            self.observation_time_1 = i;
        }

        let mut i: f32 = self.limitation_time_2;
        if ui.input_float("limitationTime_2", &mut i).build() {
            self.limitation_time_2 = i;
        }

        let mut i: f32 = self.observation_time_2;
        if ui.input_float("observationTime_2", &mut i).build() {
            self.observation_time_2 = i;
        }

        let mut i: f32 = self.limitation_time_3;
        if ui.input_float("limitationTime_3", &mut i).build() {
            self.limitation_time_3 = i;
        }

        let mut i: f32 = self.observation_time_3;
        if ui.input_float("observationTime_3", &mut i).build() {
            self.observation_time_3 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct CultSettingParam {
    pub distance: f32,
    pub angle: f32,
    pub event_flag_id: i32,
    pub coefficient: i16,
    pub cult_state1: i8,
    pub cult_state2: i8,
    pub pad1: [u8; 16],
}

impl RenderableParam for CultSettingParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.distance;
        if ui.input_float("Distance", &mut i).build() {
            self.distance = i;
        }

        let mut i: f32 = self.angle;
        if ui.input_float("Angle", &mut i).build() {
            self.angle = i;
        }

        let mut i: i32 = self.event_flag_id as _;
        if ui.input_int("EventFlagId", &mut i).build() {
            self.event_flag_id = i as _;
        }

        let mut i: i32 = self.coefficient as _;
        if ui.input_int("Coefficient", &mut i).build() {
            self.coefficient = i as _;
        }

        let mut i: i32 = self.cult_state1 as _;
        if ui.input_int("CultState1", &mut i).build() {
            self.cult_state1 = i as _;
        }

        let mut i: i32 = self.cult_state2 as _;
        if ui.input_int("CultState2", &mut i).build() {
            self.cult_state2 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct DecalParam {
    pub texture_id0: i32,
    pub dmy_poly_id: i32,
    pub pitch_angle: f32,
    pub yaw_angle: f32,
    pub near_distance: f32,
    pub far_distance: f32,
    pub near_size: f32,
    pub far_size: f32,
    pub mask_sp_effect_id: i32,
    pub bitfield0: u32,
    pub random_size_min: i16,
    pub random_size_max: i16,
    pub random_roll_min: f32,
    pub random_roll_max: f32,
    pub random_pitch_min: f32,
    pub random_pitch_max: f32,
    pub random_yaw_min: f32,
    pub random_yaw_max: f32,
    pub pom_height_scale: f32,
    pub pom_sample_min: u8,
    pub pom_sample_max: u8,
    pub contrast1: u8,
    pub texture_length_type: u8,
    pub texture_width_x: f32,
    pub texture_width_z: f32,
    pub texture_life_time: f32,
    pub field0x58: i32,
    pub field0x5_c: f32,
    pub field0x60: i32,
    pub field0x64: i32,
    pub field0x68: i32,
    pub field0x6_c: i32,
    pub texture_id1: i32,
    pub texture_id2: i32,
    pub texture_id3: i32,
    pub brightness: f32,
    pub texture_id4: i32,
    pub texture_id5: i32,
    pub texture_id6: i32,
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub unk_na_m: i8,
    pub r_0: u8,
    pub g_1: u8,
    pub b_2: u8,
    pub delayed_spawn_state: i8,
    pub contrast2: f32,
    pub field0x98: f32,
    pub field0x9_c: f32,
    pub field0x_a0: u8,
    pub field0x_a1: u8,
    pub field0x_a2: u8,
    pub field0x_a3: u8,
    pub min_val: f32,
    pub max_val: f32,
    pub field0x_ac: u8,
    pub field0x_ad: u8,
    pub decal_spawn_delay: u16,
    pub bitfield1: u32,
    pub texture_spawn_delay: f32,
    pub pad1: [u8; 8],
}

impl DecalParam {
    #[allow(unused)]
    pub fn set_random_variation_num0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn random_variation_num0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_random_variation_num1(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn random_variation_num1(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_random_variation_num2(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn random_variation_num2(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_random_variation_num3(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn random_variation_num3(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_replace_texture_id_by_material(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn replace_texture_id_by_material(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_dmypoly_category0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn dmypoly_category0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_dmypoly_category1(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn dmypoly_category1(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_decal_shape_type0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn decal_shape_type0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_decal_shape_type1(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 8;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn decal_shape_type1(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 8;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_decal_shape_type2(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 9;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn decal_shape_type2(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 9;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_decal_shape_type3(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 10;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn decal_shape_type3(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 10;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_deferred_decal(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 11;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_deferred_decal(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 11;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_paint_decal(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 12;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_paint_decal(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 12;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_target_attack_chr(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 13;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn target_attack_chr(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 13;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_target_damage_chr(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 14;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn target_damage_chr(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 14;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_target_other_chr(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 15;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn target_other_chr(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 15;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_target_map_obj(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 16;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn target_map_obj(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 16;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_pom(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 17;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_pom(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 17;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x26(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 18;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x26(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 18;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x26_0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 19;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x26_0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 19;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x26_1(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 20;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x26_1(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 20;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x26_2(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 21;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x26_2(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 21;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x26_3(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 22;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x26_3(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 22;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x26_4(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 23;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x26_4(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 23;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 24;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 24;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_5(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 25;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_5(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 25;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_6(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 26;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_6(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 26;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_7(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 27;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_7(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 27;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_8(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 28;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_8(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 28;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_9(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 29;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_9(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 29;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_10(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 30;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_10(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 30;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x27_11(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 31;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x27_11(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 31;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_0(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_0(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_1(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_1(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_2(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_2(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_3(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_3(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_contact_player(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_contact_player(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_form_cube(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_form_cube(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_4(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_4(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_5(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 8;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_5(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 8;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_6(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 9;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_6(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 9;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_7(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 10;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_7(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 10;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_8(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 11;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_8(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 11;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_9(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 12;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_9(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 12;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_10(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 13;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_10(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 13;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_11(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 14;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_11(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 14;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_12(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 15;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_12(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 15;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_13(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 16;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_13(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 16;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_14(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 17;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_14(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 17;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_15(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 18;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_15(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 18;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_16(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 19;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_16(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 19;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_17(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 20;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_17(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 20;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_18(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 21;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_18(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 21;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_19(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 22;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_19(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 22;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_20(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 23;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_20(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 23;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_21(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 24;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_21(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 24;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_22(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 25;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_22(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 25;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_23(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 26;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_23(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 26;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_24(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 27;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_24(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 27;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_25(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 28;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_25(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 28;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_26(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 29;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_26(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 29;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_27(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 30;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_27(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 30;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x_b0_28(&mut self, state: bool) {
        const FIELD_INDEX: u32 = 1 << 31;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x_b0_28(&mut self) -> bool {
        const FIELD_INDEX: u32 = 1 << 31;
        (self.bitfield1 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for DecalParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.texture_id0 as _;
        if ui.input_int("TextureId0", &mut i).build() {
            self.texture_id0 = i as _;
        }

        let mut i: i32 = self.dmy_poly_id as _;
        if ui.input_int("dmyPolyID", &mut i).build() {
            self.dmy_poly_id = i as _;
        }

        let mut i: f32 = self.pitch_angle;
        if ui.input_float("pitchAngle", &mut i).build() {
            self.pitch_angle = i;
        }

        let mut i: f32 = self.yaw_angle;
        if ui.input_float("yawAngle", &mut i).build() {
            self.yaw_angle = i;
        }

        let mut i: f32 = self.near_distance;
        if ui.input_float("nearDistance", &mut i).build() {
            self.near_distance = i;
        }

        let mut i: f32 = self.far_distance;
        if ui.input_float("farDistance", &mut i).build() {
            self.far_distance = i;
        }

        let mut i: f32 = self.near_size;
        if ui.input_float("nearSize", &mut i).build() {
            self.near_size = i;
        }

        let mut i: f32 = self.far_size;
        if ui.input_float("farSize", &mut i).build() {
            self.far_size = i;
        }

        let mut i: i32 = self.mask_sp_effect_id as _;
        if ui.input_int("maskSpEffectID", &mut i).build() {
            self.mask_sp_effect_id = i as _;
        }

        let mut b: bool = self.random_variation_num0();
        if ui.checkbox("randomVariationNum0", &mut b) {
            self.set_random_variation_num0(b);
        }

        let mut b: bool = self.random_variation_num1();
        if ui.checkbox("randomVariationNum1", &mut b) {
            self.set_random_variation_num1(b);
        }

        let mut b: bool = self.random_variation_num2();
        if ui.checkbox("randomVariationNum2", &mut b) {
            self.set_random_variation_num2(b);
        }

        let mut b: bool = self.random_variation_num3();
        if ui.checkbox("randomVariationNum3", &mut b) {
            self.set_random_variation_num3(b);
        }

        let mut b: bool = self.replace_texture_id_by_material();
        if ui.checkbox("replaceTextureId_byMaterial", &mut b) {
            self.set_replace_texture_id_by_material(b);
        }

        let mut b: bool = self.dmypoly_category0();
        if ui.checkbox("dmypolyCategory0", &mut b) {
            self.set_dmypoly_category0(b);
        }

        let mut b: bool = self.dmypoly_category1();
        if ui.checkbox("dmypolyCategory1", &mut b) {
            self.set_dmypoly_category1(b);
        }

        let mut b: bool = self.decal_shape_type0();
        if ui.checkbox("decalShapeType0", &mut b) {
            self.set_decal_shape_type0(b);
        }

        let mut b: bool = self.decal_shape_type1();
        if ui.checkbox("decalShapeType1", &mut b) {
            self.set_decal_shape_type1(b);
        }

        let mut b: bool = self.decal_shape_type2();
        if ui.checkbox("decalShapeType2", &mut b) {
            self.set_decal_shape_type2(b);
        }

        let mut b: bool = self.decal_shape_type3();
        if ui.checkbox("decalShapeType3", &mut b) {
            self.set_decal_shape_type3(b);
        }

        let mut b: bool = self.use_deferred_decal();
        if ui.checkbox("useDeferredDecal", &mut b) {
            self.set_use_deferred_decal(b);
        }

        let mut b: bool = self.use_paint_decal();
        if ui.checkbox("usePaintDecal", &mut b) {
            self.set_use_paint_decal(b);
        }

        let mut b: bool = self.target_attack_chr();
        if ui.checkbox("targetAttackChr", &mut b) {
            self.set_target_attack_chr(b);
        }

        let mut b: bool = self.target_damage_chr();
        if ui.checkbox("targetDamageChr", &mut b) {
            self.set_target_damage_chr(b);
        }

        let mut b: bool = self.target_other_chr();
        if ui.checkbox("targetOtherChr", &mut b) {
            self.set_target_other_chr(b);
        }

        let mut b: bool = self.target_map_obj();
        if ui.checkbox("targetMapObj", &mut b) {
            self.set_target_map_obj(b);
        }

        let mut b: bool = self.use_pom();
        if ui.checkbox("usePom", &mut b) {
            self.set_use_pom(b);
        }

        let mut b: bool = self.field0x26();
        if ui.checkbox("0x26", &mut b) {
            self.set_field0x26(b);
        }

        let mut b: bool = self.field0x26_0();
        if ui.checkbox("0x26_0", &mut b) {
            self.set_field0x26_0(b);
        }

        let mut b: bool = self.field0x26_1();
        if ui.checkbox("0x26_1", &mut b) {
            self.set_field0x26_1(b);
        }

        let mut b: bool = self.field0x26_2();
        if ui.checkbox("0x26_2", &mut b) {
            self.set_field0x26_2(b);
        }

        let mut b: bool = self.field0x26_3();
        if ui.checkbox("0x26_3", &mut b) {
            self.set_field0x26_3(b);
        }

        let mut b: bool = self.field0x26_4();
        if ui.checkbox("0x26_4", &mut b) {
            self.set_field0x26_4(b);
        }

        let mut b: bool = self.field0x27();
        if ui.checkbox("0x27", &mut b) {
            self.set_field0x27(b);
        }

        let mut b: bool = self.field0x27_5();
        if ui.checkbox("0x27_5", &mut b) {
            self.set_field0x27_5(b);
        }

        let mut b: bool = self.field0x27_6();
        if ui.checkbox("0x27_6", &mut b) {
            self.set_field0x27_6(b);
        }

        let mut b: bool = self.field0x27_7();
        if ui.checkbox("0x27_7", &mut b) {
            self.set_field0x27_7(b);
        }

        let mut b: bool = self.field0x27_8();
        if ui.checkbox("0x27_8", &mut b) {
            self.set_field0x27_8(b);
        }

        let mut b: bool = self.field0x27_9();
        if ui.checkbox("0x27_9", &mut b) {
            self.set_field0x27_9(b);
        }

        let mut b: bool = self.field0x27_10();
        if ui.checkbox("0x27_10", &mut b) {
            self.set_field0x27_10(b);
        }

        let mut b: bool = self.field0x27_11();
        if ui.checkbox("0x27_11", &mut b) {
            self.set_field0x27_11(b);
        }

        let mut i: i32 = self.random_size_min as _;
        if ui.input_int("randomSizeMin", &mut i).build() {
            self.random_size_min = i as _;
        }

        let mut i: i32 = self.random_size_max as _;
        if ui.input_int("randomSizeMax", &mut i).build() {
            self.random_size_max = i as _;
        }

        let mut i: f32 = self.random_roll_min;
        if ui.input_float("randomRollMin", &mut i).build() {
            self.random_roll_min = i;
        }

        let mut i: f32 = self.random_roll_max;
        if ui.input_float("randomRollMax", &mut i).build() {
            self.random_roll_max = i;
        }

        let mut i: f32 = self.random_pitch_min;
        if ui.input_float("randomPitchMin", &mut i).build() {
            self.random_pitch_min = i;
        }

        let mut i: f32 = self.random_pitch_max;
        if ui.input_float("randomPitchMax", &mut i).build() {
            self.random_pitch_max = i;
        }

        let mut i: f32 = self.random_yaw_min;
        if ui.input_float("randomYawMin", &mut i).build() {
            self.random_yaw_min = i;
        }

        let mut i: f32 = self.random_yaw_max;
        if ui.input_float("randomYawMax", &mut i).build() {
            self.random_yaw_max = i;
        }

        let mut i: f32 = self.pom_height_scale;
        if ui.input_float("pomHeightScale", &mut i).build() {
            self.pom_height_scale = i;
        }

        let mut i: i32 = self.pom_sample_min as _;
        if ui.input_int("pomSampleMin", &mut i).build() {
            self.pom_sample_min = i as _;
        }

        let mut i: i32 = self.pom_sample_max as _;
        if ui.input_int("pomSampleMax", &mut i).build() {
            self.pom_sample_max = i as _;
        }

        let mut i: i32 = self.contrast1 as _;
        if ui.input_int("Contrast1", &mut i).build() {
            self.contrast1 = i as _;
        }

        let mut i: i32 = self.texture_length_type as _;
        if ui.input_int("TextureLengthType", &mut i).build() {
            self.texture_length_type = i as _;
        }

        let mut i: f32 = self.texture_width_x;
        if ui.input_float("TextureWidthX", &mut i).build() {
            self.texture_width_x = i;
        }

        let mut i: f32 = self.texture_width_z;
        if ui.input_float("TextureWidthZ", &mut i).build() {
            self.texture_width_z = i;
        }

        let mut i: f32 = self.texture_life_time;
        if ui.input_float("TextureLifeTime", &mut i).build() {
            self.texture_life_time = i;
        }

        let mut i: i32 = self.field0x58 as _;
        if ui.input_int("0x58", &mut i).build() {
            self.field0x58 = i as _;
        }

        let mut i: f32 = self.field0x5_c;
        if ui.input_float("0x5C", &mut i).build() {
            self.field0x5_c = i;
        }

        let mut i: i32 = self.field0x60 as _;
        if ui.input_int("0x60", &mut i).build() {
            self.field0x60 = i as _;
        }

        let mut i: i32 = self.field0x64 as _;
        if ui.input_int("0x64", &mut i).build() {
            self.field0x64 = i as _;
        }

        let mut i: i32 = self.field0x68 as _;
        if ui.input_int("0x68", &mut i).build() {
            self.field0x68 = i as _;
        }

        let mut i: i32 = self.field0x6_c as _;
        if ui.input_int("0x6C", &mut i).build() {
            self.field0x6_c = i as _;
        }

        let mut i: i32 = self.texture_id1 as _;
        if ui.input_int("TextureId1", &mut i).build() {
            self.texture_id1 = i as _;
        }

        let mut i: i32 = self.texture_id2 as _;
        if ui.input_int("TextureId2", &mut i).build() {
            self.texture_id2 = i as _;
        }

        let mut i: i32 = self.texture_id3 as _;
        if ui.input_int("TextureId3", &mut i).build() {
            self.texture_id3 = i as _;
        }

        let mut i: f32 = self.brightness;
        if ui.input_float("Brightness", &mut i).build() {
            self.brightness = i;
        }

        let mut i: i32 = self.texture_id4 as _;
        if ui.input_int("TextureId4", &mut i).build() {
            self.texture_id4 = i as _;
        }

        let mut i: i32 = self.texture_id5 as _;
        if ui.input_int("TextureId5", &mut i).build() {
            self.texture_id5 = i as _;
        }

        let mut i: i32 = self.texture_id6 as _;
        if ui.input_int("TextureId6", &mut i).build() {
            self.texture_id6 = i as _;
        }

        let mut i: i32 = self.r as _;
        if ui.input_int("R", &mut i).build() {
            self.r = i as _;
        }

        let mut i: i32 = self.g as _;
        if ui.input_int("G", &mut i).build() {
            self.g = i as _;
        }

        let mut i: i32 = self.b as _;
        if ui.input_int("B", &mut i).build() {
            self.b = i as _;
        }

        let mut i: i32 = self.unk_na_m as _;
        if ui.input_int("UnkNaM", &mut i).build() {
            self.unk_na_m = i as _;
        }

        let mut i: i32 = self.r_0 as _;
        if ui.input_int("R_0", &mut i).build() {
            self.r_0 = i as _;
        }

        let mut i: i32 = self.g_1 as _;
        if ui.input_int("G_1", &mut i).build() {
            self.g_1 = i as _;
        }

        let mut i: i32 = self.b_2 as _;
        if ui.input_int("B_2", &mut i).build() {
            self.b_2 = i as _;
        }

        let mut i: i32 = self.delayed_spawn_state as _;
        if ui.input_int("DelayedSpawnState", &mut i).build() {
            self.delayed_spawn_state = i as _;
        }

        let mut i: f32 = self.contrast2;
        if ui.input_float("Contrast2", &mut i).build() {
            self.contrast2 = i;
        }

        let mut i: f32 = self.field0x98;
        if ui.input_float("0x98", &mut i).build() {
            self.field0x98 = i;
        }

        let mut i: f32 = self.field0x9_c;
        if ui.input_float("0x9C", &mut i).build() {
            self.field0x9_c = i;
        }

        let mut i: i32 = self.field0x_a0 as _;
        if ui.input_int("0xA0", &mut i).build() {
            self.field0x_a0 = i as _;
        }

        let mut i: i32 = self.field0x_a1 as _;
        if ui.input_int("0xA1", &mut i).build() {
            self.field0x_a1 = i as _;
        }

        let mut i: i32 = self.field0x_a2 as _;
        if ui.input_int("0xA2", &mut i).build() {
            self.field0x_a2 = i as _;
        }

        let mut i: i32 = self.field0x_a3 as _;
        if ui.input_int("0xA3", &mut i).build() {
            self.field0x_a3 = i as _;
        }

        let mut i: f32 = self.min_val;
        if ui.input_float("minVal", &mut i).build() {
            self.min_val = i;
        }

        let mut i: f32 = self.max_val;
        if ui.input_float("maxVal", &mut i).build() {
            self.max_val = i;
        }

        let mut i: i32 = self.field0x_ac as _;
        if ui.input_int("0xAC", &mut i).build() {
            self.field0x_ac = i as _;
        }

        let mut i: i32 = self.field0x_ad as _;
        if ui.input_int("0xAD", &mut i).build() {
            self.field0x_ad = i as _;
        }

        let mut i: i32 = self.decal_spawn_delay as _;
        if ui.input_int("DecalSpawnDelay", &mut i).build() {
            self.decal_spawn_delay = i as _;
        }

        let mut b: bool = self.field0x_b0();
        if ui.checkbox("0xB0", &mut b) {
            self.set_field0x_b0(b);
        }

        let mut b: bool = self.field0x_b0_0();
        if ui.checkbox("0xB0_0", &mut b) {
            self.set_field0x_b0_0(b);
        }

        let mut b: bool = self.field0x_b0_1();
        if ui.checkbox("0xB0_1", &mut b) {
            self.set_field0x_b0_1(b);
        }

        let mut b: bool = self.field0x_b0_2();
        if ui.checkbox("0xB0_2", &mut b) {
            self.set_field0x_b0_2(b);
        }

        let mut b: bool = self.field0x_b0_3();
        if ui.checkbox("0xB0_3", &mut b) {
            self.set_field0x_b0_3(b);
        }

        let mut b: bool = self.is_contact_player();
        if ui.checkbox("IsContactPlayer", &mut b) {
            self.set_is_contact_player(b);
        }

        let mut b: bool = self.is_form_cube();
        if ui.checkbox("IsFormCube", &mut b) {
            self.set_is_form_cube(b);
        }

        let mut b: bool = self.field0x_b0_4();
        if ui.checkbox("0xB0_4", &mut b) {
            self.set_field0x_b0_4(b);
        }

        let mut b: bool = self.field0x_b0_5();
        if ui.checkbox("0xB0_5", &mut b) {
            self.set_field0x_b0_5(b);
        }

        let mut b: bool = self.field0x_b0_6();
        if ui.checkbox("0xB0_6", &mut b) {
            self.set_field0x_b0_6(b);
        }

        let mut b: bool = self.field0x_b0_7();
        if ui.checkbox("0xB0_7", &mut b) {
            self.set_field0x_b0_7(b);
        }

        let mut b: bool = self.field0x_b0_8();
        if ui.checkbox("0xB0_8", &mut b) {
            self.set_field0x_b0_8(b);
        }

        let mut b: bool = self.field0x_b0_9();
        if ui.checkbox("0xB0_9", &mut b) {
            self.set_field0x_b0_9(b);
        }

        let mut b: bool = self.field0x_b0_10();
        if ui.checkbox("0xB0_10", &mut b) {
            self.set_field0x_b0_10(b);
        }

        let mut b: bool = self.field0x_b0_11();
        if ui.checkbox("0xB0_11", &mut b) {
            self.set_field0x_b0_11(b);
        }

        let mut b: bool = self.field0x_b0_12();
        if ui.checkbox("0xB0_12", &mut b) {
            self.set_field0x_b0_12(b);
        }

        let mut b: bool = self.field0x_b0_13();
        if ui.checkbox("0xB0_13", &mut b) {
            self.set_field0x_b0_13(b);
        }

        let mut b: bool = self.field0x_b0_14();
        if ui.checkbox("0xB0_14", &mut b) {
            self.set_field0x_b0_14(b);
        }

        let mut b: bool = self.field0x_b0_15();
        if ui.checkbox("0xB0_15", &mut b) {
            self.set_field0x_b0_15(b);
        }

        let mut b: bool = self.field0x_b0_16();
        if ui.checkbox("0xB0_16", &mut b) {
            self.set_field0x_b0_16(b);
        }

        let mut b: bool = self.field0x_b0_17();
        if ui.checkbox("0xB0_17", &mut b) {
            self.set_field0x_b0_17(b);
        }

        let mut b: bool = self.field0x_b0_18();
        if ui.checkbox("0xB0_18", &mut b) {
            self.set_field0x_b0_18(b);
        }

        let mut b: bool = self.field0x_b0_19();
        if ui.checkbox("0xB0_19", &mut b) {
            self.set_field0x_b0_19(b);
        }

        let mut b: bool = self.field0x_b0_20();
        if ui.checkbox("0xB0_20", &mut b) {
            self.set_field0x_b0_20(b);
        }

        let mut b: bool = self.field0x_b0_21();
        if ui.checkbox("0xB0_21", &mut b) {
            self.set_field0x_b0_21(b);
        }

        let mut b: bool = self.field0x_b0_22();
        if ui.checkbox("0xB0_22", &mut b) {
            self.set_field0x_b0_22(b);
        }

        let mut b: bool = self.field0x_b0_23();
        if ui.checkbox("0xB0_23", &mut b) {
            self.set_field0x_b0_23(b);
        }

        let mut b: bool = self.field0x_b0_24();
        if ui.checkbox("0xB0_24", &mut b) {
            self.set_field0x_b0_24(b);
        }

        let mut b: bool = self.field0x_b0_25();
        if ui.checkbox("0xB0_25", &mut b) {
            self.set_field0x_b0_25(b);
        }

        let mut b: bool = self.field0x_b0_26();
        if ui.checkbox("0xB0_26", &mut b) {
            self.set_field0x_b0_26(b);
        }

        let mut b: bool = self.field0x_b0_27();
        if ui.checkbox("0xB0_27", &mut b) {
            self.set_field0x_b0_27(b);
        }

        let mut b: bool = self.field0x_b0_28();
        if ui.checkbox("0xB0_28", &mut b) {
            self.set_field0x_b0_28(b);
        }

        let mut i: f32 = self.texture_spawn_delay;
        if ui.input_float("TextureSpawnDelay", &mut i).build() {
            self.texture_spawn_delay = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct DirectionCameraParam {
    pub rumble_state: u8,
    pub pad1: [u8; 15],
}

impl RenderableParam for DirectionCameraParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.rumble_state as _;
        if ui.input_int("RumbleState", &mut i).build() {
            self.rumble_state = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct EquipMtrlSetParam {
    pub material_id01: i32,
    pub material_id02: i32,
    pub material_id03: i32,
    pub material_id04: i32,
    pub material_id05: i32,
    pub item_num01: i8,
    pub item_num02: i8,
    pub item_num03: i8,
    pub item_num04: i8,
    pub item_num05: i8,
    pub pad1: [u8; 6],
}

impl RenderableParam for EquipMtrlSetParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.material_id01 as _;
        if ui.input_int("MaterialId01", &mut i).build() {
            self.material_id01 = i as _;
        }

        let mut i: i32 = self.material_id02 as _;
        if ui.input_int("MaterialId02", &mut i).build() {
            self.material_id02 = i as _;
        }

        let mut i: i32 = self.material_id03 as _;
        if ui.input_int("MaterialId03", &mut i).build() {
            self.material_id03 = i as _;
        }

        let mut i: i32 = self.material_id04 as _;
        if ui.input_int("MaterialId04", &mut i).build() {
            self.material_id04 = i as _;
        }

        let mut i: i32 = self.material_id05 as _;
        if ui.input_int("MaterialId05", &mut i).build() {
            self.material_id05 = i as _;
        }

        let mut i: i32 = self.item_num01 as _;
        if ui.input_int("ItemNum01", &mut i).build() {
            self.item_num01 = i as _;
        }

        let mut i: i32 = self.item_num02 as _;
        if ui.input_int("ItemNum02", &mut i).build() {
            self.item_num02 = i as _;
        }

        let mut i: i32 = self.item_num03 as _;
        if ui.input_int("ItemNum03", &mut i).build() {
            self.item_num03 = i as _;
        }

        let mut i: i32 = self.item_num04 as _;
        if ui.input_int("ItemNum04", &mut i).build() {
            self.item_num04 = i as _;
        }

        let mut i: i32 = self.item_num05 as _;
        if ui.input_int("ItemNum05", &mut i).build() {
            self.item_num05 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct EquipParamAccessory {
    pub ref_id0: i32,
    pub sfx_variation_id: i32,
    pub weight: f32,
    pub behavior_id: i32,
    pub basic_price: i32,
    pub sell_value: i32,
    pub sort_id: i32,
    pub qwc_id: i32,
    pub equip_model_id: i16,
    pub icon_id: i16,
    pub shop_lv: i16,
    pub trophy_sgrade_id: i16,
    pub trophy_seq_id: i16,
    pub equip_model_category: u8,
    pub equip_model_gender: u8,
    pub accessory_category: u8,
    pub ref_category: u8,
    pub sp_effect_category: u8,
    pub pad1: [u8; 1],
    pub vagrant_item_lot_id: i32,
    pub vagrant_bonus_ene_drop_item_lot_id: i32,
    pub vagrant_item_ene_drop_item_lot_id: i32,
    pub bitfield0: u8,
    pub pad2: [u8; 3],
    pub costvalue: i32,
    pub ring_compatibility_id: i16,
    pub vow_id: u8,
    pub achievement_id: u8,
    pub ref_id1: i32,
    pub ref_id2: i32,
    pub ref_id3: i32,
    pub ref_id4: i32,
    pub pad3: [u8; 8],
}

impl EquipParamAccessory {
    #[allow(unused)]
    pub fn set_is_deposit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_deposit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_equip_out_brake(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_equip_out_brake(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_multi_drop_share(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_multi_drop_share(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_discard(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_discard(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_bool(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_bool(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x3_c(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x3_c(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x3_c_0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x3_c_0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_field0x3_c_1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn field0x3_c_1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for EquipParamAccessory {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.ref_id0 as _;
        if ui.input_int("refId0", &mut i).build() {
            self.ref_id0 = i as _;
        }

        let mut i: i32 = self.sfx_variation_id as _;
        if ui.input_int("sfxVariationId", &mut i).build() {
            self.sfx_variation_id = i as _;
        }

        let mut i: f32 = self.weight;
        if ui.input_float("weight", &mut i).build() {
            self.weight = i;
        }

        let mut i: i32 = self.behavior_id as _;
        if ui.input_int("behaviorId", &mut i).build() {
            self.behavior_id = i as _;
        }

        let mut i: i32 = self.basic_price as _;
        if ui.input_int("basicPrice", &mut i).build() {
            self.basic_price = i as _;
        }

        let mut i: i32 = self.sell_value as _;
        if ui.input_int("sellValue", &mut i).build() {
            self.sell_value = i as _;
        }

        let mut i: i32 = self.sort_id as _;
        if ui.input_int("sortId", &mut i).build() {
            self.sort_id = i as _;
        }

        let mut i: i32 = self.qwc_id as _;
        if ui.input_int("qwcId", &mut i).build() {
            self.qwc_id = i as _;
        }

        let mut i: i32 = self.equip_model_id as _;
        if ui.input_int("equipModelId", &mut i).build() {
            self.equip_model_id = i as _;
        }

        let mut i: i32 = self.icon_id as _;
        if ui.input_int("iconId", &mut i).build() {
            self.icon_id = i as _;
        }

        let mut i: i32 = self.shop_lv as _;
        if ui.input_int("shopLv", &mut i).build() {
            self.shop_lv = i as _;
        }

        let mut i: i32 = self.trophy_sgrade_id as _;
        if ui.input_int("trophySGradeId", &mut i).build() {
            self.trophy_sgrade_id = i as _;
        }

        let mut i: i32 = self.trophy_seq_id as _;
        if ui.input_int("trophySeqId", &mut i).build() {
            self.trophy_seq_id = i as _;
        }

        let mut i: i32 = self.equip_model_category as _;
        if ui.input_int("equipModelCategory", &mut i).build() {
            self.equip_model_category = i as _;
        }

        let mut i: i32 = self.equip_model_gender as _;
        if ui.input_int("equipModelGender", &mut i).build() {
            self.equip_model_gender = i as _;
        }

        let mut i: i32 = self.accessory_category as _;
        if ui.input_int("accessoryCategory", &mut i).build() {
            self.accessory_category = i as _;
        }

        let mut i: i32 = self.ref_category as _;
        if ui.input_int("refCategory", &mut i).build() {
            self.ref_category = i as _;
        }

        let mut i: i32 = self.sp_effect_category as _;
        if ui.input_int("spEffectCategory", &mut i).build() {
            self.sp_effect_category = i as _;
        }

        let mut i: i32 = self.vagrant_item_lot_id as _;
        if ui.input_int("vagrantItemLotId", &mut i).build() {
            self.vagrant_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_bonus_ene_drop_item_lot_id as _;
        if ui.input_int("vagrantBonusEneDropItemLotId", &mut i).build() {
            self.vagrant_bonus_ene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_item_ene_drop_item_lot_id as _;
        if ui.input_int("vagrantItemEneDropItemLotId", &mut i).build() {
            self.vagrant_item_ene_drop_item_lot_id = i as _;
        }

        let mut b: bool = self.is_deposit();
        if ui.checkbox("IsDeposit", &mut b) {
            self.set_is_deposit(b);
        }

        let mut b: bool = self.is_equip_out_brake();
        if ui.checkbox("IsEquipOutBrake", &mut b) {
            self.set_is_equip_out_brake(b);
        }

        let mut b: bool = self.disable_multi_drop_share();
        if ui.checkbox("disableMultiDropShare", &mut b) {
            self.set_disable_multi_drop_share(b);
        }

        let mut b: bool = self.is_discard();
        if ui.checkbox("IsDiscard", &mut b) {
            self.set_is_discard(b);
        }

        let mut b: bool = self.is_bool();
        if ui.checkbox("IsBool", &mut b) {
            self.set_is_bool(b);
        }

        let mut b: bool = self.field0x3_c();
        if ui.checkbox("0x3C", &mut b) {
            self.set_field0x3_c(b);
        }

        let mut b: bool = self.field0x3_c_0();
        if ui.checkbox("0x3C_0", &mut b) {
            self.set_field0x3_c_0(b);
        }

        let mut b: bool = self.field0x3_c_1();
        if ui.checkbox("0x3C_1", &mut b) {
            self.set_field0x3_c_1(b);
        }

        let mut i: i32 = self.costvalue as _;
        if ui.input_int("Costvalue", &mut i).build() {
            self.costvalue = i as _;
        }

        let mut i: i32 = self.ring_compatibility_id as _;
        if ui.input_int("RingCompatibilityId", &mut i).build() {
            self.ring_compatibility_id = i as _;
        }

        let mut i: i32 = self.vow_id as _;
        if ui.input_int("VowId", &mut i).build() {
            self.vow_id = i as _;
        }

        let mut i: i32 = self.achievement_id as _;
        if ui.input_int("AchievementID", &mut i).build() {
            self.achievement_id = i as _;
        }

        let mut i: i32 = self.ref_id1 as _;
        if ui.input_int("refId1", &mut i).build() {
            self.ref_id1 = i as _;
        }

        let mut i: i32 = self.ref_id2 as _;
        if ui.input_int("refId2", &mut i).build() {
            self.ref_id2 = i as _;
        }

        let mut i: i32 = self.ref_id3 as _;
        if ui.input_int("refId3", &mut i).build() {
            self.ref_id3 = i as _;
        }

        let mut i: i32 = self.ref_id4 as _;
        if ui.input_int("refId4", &mut i).build() {
            self.ref_id4 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct EquipParamGoods {
    pub ref_id1: i32,
    pub sfx_variation_id: i32,
    pub weight: f32,
    pub fragment_num: i32,
    pub sell_value: i32,
    pub replace_item_id: i32,
    pub behavior_id: i32,
    pub sort_id: i32,
    pub qwc_id: i32,
    pub yes_no_dialog_message_id: i32,
    pub magic_id: i32,
    pub icon_id: i16,
    pub model_id: i16,
    pub shop_lv: i16,
    pub comp_trophy_sed_id: i16,
    pub trophy_seq_id: i16,
    pub max_num: i16,
    pub consume_hero_point: u8,
    pub over_dexterity: u8,
    pub goods_type: u8,
    pub ref_category: u8,
    pub sp_effect_category: u8,
    pub goods_category: u8,
    pub goods_use_anim: i8,
    pub opme_menu_type: u8,
    pub use_limit_category: u8,
    pub replace_category: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub bitfield3: u8,
    pub bitfield4: u8,
    pub bitfield5: u8,
    pub ref_id2: i32,
    pub reinforce_param_weapon: i32,
    pub vagrant_item_lot_id: i32,
    pub vagrant_bonus_ene_drop_item_lot_id: i32,
    pub vagrant_itemene_drop_item_lot_id: i32,
    pub ref_virtual_wep_id: i32,
    pub replace_item_id_by_sp_effect: i32,
    pub replace_trigger_sp_effect_id: i32,
    pub bitfield6: u8,
    pub supple_item_type: u8,
    pub menu_adhoc_type: u8,
    pub drop: u8,
    pub max_rep_num: i16,
    pub invade_type: u8,
    pub pad1: [u8; 1],
    pub shop_id: i32,
    pub fp_consume: i16,
    pub use_limit_category2: i16,
    pub pad2: [u8; 8],
}

impl EquipParamGoods {
    #[allow(unused)]
    pub fn set_vow_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type8(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type8(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type9(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type9(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type10(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type10(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type11(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type11(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type12(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type12(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type15(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type15(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_live(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_live(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_gray(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_gray(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_white(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_white(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_black(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_black(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_multi(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_multi(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_offline(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_offline(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_consume(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_consume(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_auto_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_auto_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_establishment(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_establishment(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_only_one(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_only_one(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_drop(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_drop(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_deposit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_deposit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_disable_hand(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_disable_hand(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_travel_item(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_travel_item(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_supple_item(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_supple_item(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_full_supple_item(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_full_supple_item(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enhance(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enhance(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_fix_item(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_fix_item(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_mutli_drop_share(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_mutli_drop_share(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_use_at_coliseum(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_use_at_coliseum(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_use_at_outof_coliseum(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_use_at_outof_coliseum(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_bullet_max_num(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_bullet_max_num(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_hp_cure_max_num(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_hp_cure_max_num(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_auto_replenish(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_auto_replenish(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_can_multi_use(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn can_multi_use(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_guest_drop(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_guest_drop(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enchant_left_hand(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enchant_left_hand(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_apply_special_effect(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_apply_special_effect(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_load_of_cinder(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_load_of_cinder(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_play_region1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_play_region1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ladder(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ladder(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_multi_play(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_multi_play(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_selected(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_selected(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_play_region2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_play_region2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_net_penalized(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_net_penalized(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield6 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for EquipParamGoods {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.ref_id1 as _;
        if ui.input_int("refId1", &mut i).build() {
            self.ref_id1 = i as _;
        }

        let mut i: i32 = self.sfx_variation_id as _;
        if ui.input_int("sfxVariationId", &mut i).build() {
            self.sfx_variation_id = i as _;
        }

        let mut i: f32 = self.weight;
        if ui.input_float("weight", &mut i).build() {
            self.weight = i;
        }

        let mut i: i32 = self.fragment_num as _;
        if ui.input_int("fragmentNum", &mut i).build() {
            self.fragment_num = i as _;
        }

        let mut i: i32 = self.sell_value as _;
        if ui.input_int("sellValue", &mut i).build() {
            self.sell_value = i as _;
        }

        let mut i: i32 = self.replace_item_id as _;
        if ui.input_int("replaceItemId", &mut i).build() {
            self.replace_item_id = i as _;
        }

        let mut i: i32 = self.behavior_id as _;
        if ui.input_int("behaviorId", &mut i).build() {
            self.behavior_id = i as _;
        }

        let mut i: i32 = self.sort_id as _;
        if ui.input_int("sortId", &mut i).build() {
            self.sort_id = i as _;
        }

        let mut i: i32 = self.qwc_id as _;
        if ui.input_int("qwcId", &mut i).build() {
            self.qwc_id = i as _;
        }

        let mut i: i32 = self.yes_no_dialog_message_id as _;
        if ui.input_int("yesNoDialogMessageId", &mut i).build() {
            self.yes_no_dialog_message_id = i as _;
        }

        let mut i: i32 = self.magic_id as _;
        if ui.input_int("magicId", &mut i).build() {
            self.magic_id = i as _;
        }

        let mut i: i32 = self.icon_id as _;
        if ui.input_int("iconId", &mut i).build() {
            self.icon_id = i as _;
        }

        let mut i: i32 = self.model_id as _;
        if ui.input_int("modelId", &mut i).build() {
            self.model_id = i as _;
        }

        let mut i: i32 = self.shop_lv as _;
        if ui.input_int("shopLv", &mut i).build() {
            self.shop_lv = i as _;
        }

        let mut i: i32 = self.comp_trophy_sed_id as _;
        if ui.input_int("compTrophySedId", &mut i).build() {
            self.comp_trophy_sed_id = i as _;
        }

        let mut i: i32 = self.trophy_seq_id as _;
        if ui.input_int("trophySeqId", &mut i).build() {
            self.trophy_seq_id = i as _;
        }

        let mut i: i32 = self.max_num as _;
        if ui.input_int("maxNum", &mut i).build() {
            self.max_num = i as _;
        }

        let mut i: i32 = self.consume_hero_point as _;
        if ui.input_int("consumeHeroPoint", &mut i).build() {
            self.consume_hero_point = i as _;
        }

        let mut i: i32 = self.over_dexterity as _;
        if ui.input_int("overDexterity", &mut i).build() {
            self.over_dexterity = i as _;
        }

        let mut i: i32 = self.goods_type as _;
        if ui.input_int("goodsType", &mut i).build() {
            self.goods_type = i as _;
        }

        let mut i: i32 = self.ref_category as _;
        if ui.input_int("refCategory", &mut i).build() {
            self.ref_category = i as _;
        }

        let mut i: i32 = self.sp_effect_category as _;
        if ui.input_int("spEffectCategory", &mut i).build() {
            self.sp_effect_category = i as _;
        }

        let mut i: i32 = self.goods_category as _;
        if ui.input_int("goodsCategory", &mut i).build() {
            self.goods_category = i as _;
        }

        let mut i: i32 = self.goods_use_anim as _;
        if ui.input_int("goodsUseAnim", &mut i).build() {
            self.goods_use_anim = i as _;
        }

        let mut i: i32 = self.opme_menu_type as _;
        if ui.input_int("opmeMenuType", &mut i).build() {
            self.opme_menu_type = i as _;
        }

        let mut i: i32 = self.use_limit_category as _;
        if ui.input_int("useLimitCategory", &mut i).build() {
            self.use_limit_category = i as _;
        }

        let mut i: i32 = self.replace_category as _;
        if ui.input_int("replaceCategory", &mut i).build() {
            self.replace_category = i as _;
        }

        let mut b: bool = self.vow_type0();
        if ui.checkbox("vowType0", &mut b) {
            self.set_vow_type0(b);
        }

        let mut b: bool = self.vow_type1();
        if ui.checkbox("vowType1", &mut b) {
            self.set_vow_type1(b);
        }

        let mut b: bool = self.vow_type2();
        if ui.checkbox("vowType2", &mut b) {
            self.set_vow_type2(b);
        }

        let mut b: bool = self.vow_type3();
        if ui.checkbox("vowType3", &mut b) {
            self.set_vow_type3(b);
        }

        let mut b: bool = self.vow_type4();
        if ui.checkbox("vowType4", &mut b) {
            self.set_vow_type4(b);
        }

        let mut b: bool = self.vow_type5();
        if ui.checkbox("vowType5", &mut b) {
            self.set_vow_type5(b);
        }

        let mut b: bool = self.vow_type6();
        if ui.checkbox("vowType6", &mut b) {
            self.set_vow_type6(b);
        }

        let mut b: bool = self.vow_type7();
        if ui.checkbox("vowType7", &mut b) {
            self.set_vow_type7(b);
        }

        let mut b: bool = self.vow_type8();
        if ui.checkbox("vowType8", &mut b) {
            self.set_vow_type8(b);
        }

        let mut b: bool = self.vow_type9();
        if ui.checkbox("vowType9", &mut b) {
            self.set_vow_type9(b);
        }

        let mut b: bool = self.vow_type10();
        if ui.checkbox("vowType10", &mut b) {
            self.set_vow_type10(b);
        }

        let mut b: bool = self.vow_type11();
        if ui.checkbox("vowType11", &mut b) {
            self.set_vow_type11(b);
        }

        let mut b: bool = self.vow_type12();
        if ui.checkbox("vowType12", &mut b) {
            self.set_vow_type12(b);
        }

        let mut b: bool = self.vow_type13();
        if ui.checkbox("vowType13", &mut b) {
            self.set_vow_type13(b);
        }

        let mut b: bool = self.vow_type14();
        if ui.checkbox("vowType14", &mut b) {
            self.set_vow_type14(b);
        }

        let mut b: bool = self.vow_type15();
        if ui.checkbox("vowType15", &mut b) {
            self.set_vow_type15(b);
        }

        let mut b: bool = self.enable_live();
        if ui.checkbox("enable_live", &mut b) {
            self.set_enable_live(b);
        }

        let mut b: bool = self.enable_gray();
        if ui.checkbox("enable_gray", &mut b) {
            self.set_enable_gray(b);
        }

        let mut b: bool = self.enable_white();
        if ui.checkbox("enable_white", &mut b) {
            self.set_enable_white(b);
        }

        let mut b: bool = self.enable_black();
        if ui.checkbox("enable_black", &mut b) {
            self.set_enable_black(b);
        }

        let mut b: bool = self.enable_multi();
        if ui.checkbox("enable_multi", &mut b) {
            self.set_enable_multi(b);
        }

        let mut b: bool = self.disable_offline();
        if ui.checkbox("disable_offline", &mut b) {
            self.set_disable_offline(b);
        }

        let mut b: bool = self.is_equip();
        if ui.checkbox("isEquip", &mut b) {
            self.set_is_equip(b);
        }

        let mut b: bool = self.is_consume();
        if ui.checkbox("isConsume", &mut b) {
            self.set_is_consume(b);
        }

        let mut b: bool = self.is_auto_equip();
        if ui.checkbox("isAutoEquip", &mut b) {
            self.set_is_auto_equip(b);
        }

        let mut b: bool = self.is_establishment();
        if ui.checkbox("isEstablishment", &mut b) {
            self.set_is_establishment(b);
        }

        let mut b: bool = self.is_only_one();
        if ui.checkbox("isOnlyOne", &mut b) {
            self.set_is_only_one(b);
        }

        let mut b: bool = self.is_drop();
        if ui.checkbox("isDrop", &mut b) {
            self.set_is_drop(b);
        }

        let mut b: bool = self.is_deposit();
        if ui.checkbox("isDeposit", &mut b) {
            self.set_is_deposit(b);
        }

        let mut b: bool = self.is_disable_hand();
        if ui.checkbox("isDisableHand", &mut b) {
            self.set_is_disable_hand(b);
        }

        let mut b: bool = self.is_travel_item();
        if ui.checkbox("isTravelItem", &mut b) {
            self.set_is_travel_item(b);
        }

        let mut b: bool = self.is_supple_item();
        if ui.checkbox("isSuppleItem", &mut b) {
            self.set_is_supple_item(b);
        }

        let mut b: bool = self.is_full_supple_item();
        if ui.checkbox("isFullSuppleItem", &mut b) {
            self.set_is_full_supple_item(b);
        }

        let mut b: bool = self.is_enhance();
        if ui.checkbox("isEnhance", &mut b) {
            self.set_is_enhance(b);
        }

        let mut b: bool = self.is_fix_item();
        if ui.checkbox("isFixItem", &mut b) {
            self.set_is_fix_item(b);
        }

        let mut b: bool = self.disable_mutli_drop_share();
        if ui.checkbox("disableMutliDropShare", &mut b) {
            self.set_disable_mutli_drop_share(b);
        }

        let mut b: bool = self.disable_use_at_coliseum();
        if ui.checkbox("disableUseAtColiseum", &mut b) {
            self.set_disable_use_at_coliseum(b);
        }

        let mut b: bool = self.disable_use_at_outof_coliseum();
        if ui.checkbox("disableUseAtOutofColiseum", &mut b) {
            self.set_disable_use_at_outof_coliseum(b);
        }

        let mut b: bool = self.use_bullet_max_num();
        if ui.checkbox("useBulletMaxNum", &mut b) {
            self.set_use_bullet_max_num(b);
        }

        let mut b: bool = self.use_hp_cure_max_num();
        if ui.checkbox("useHpCureMaxNum", &mut b) {
            self.set_use_hp_cure_max_num(b);
        }

        let mut b: bool = self.is_auto_replenish();
        if ui.checkbox("isAutoReplenish", &mut b) {
            self.set_is_auto_replenish(b);
        }

        let mut b: bool = self.can_multi_use();
        if ui.checkbox("canMultiUse", &mut b) {
            self.set_can_multi_use(b);
        }

        let mut b: bool = self.is_guest_drop();
        if ui.checkbox("isGuestDrop", &mut b) {
            self.set_is_guest_drop(b);
        }

        let mut b: bool = self.is_enchant_left_hand();
        if ui.checkbox("isEnchantLeftHand", &mut b) {
            self.set_is_enchant_left_hand(b);
        }

        let mut b: bool = self.is_apply_special_effect();
        if ui.checkbox("isApplySpecialEffect", &mut b) {
            self.set_is_apply_special_effect(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut i: i32 = self.ref_id2 as _;
        if ui.input_int("refId2", &mut i).build() {
            self.ref_id2 = i as _;
        }

        let mut i: i32 = self.reinforce_param_weapon as _;
        if ui.input_int("reinforceParamWeapon", &mut i).build() {
            self.reinforce_param_weapon = i as _;
        }

        let mut i: i32 = self.vagrant_item_lot_id as _;
        if ui.input_int("VagrantItemLotId", &mut i).build() {
            self.vagrant_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_bonus_ene_drop_item_lot_id as _;
        if ui.input_int("VagrantBonusEneDropItemLotId", &mut i).build() {
            self.vagrant_bonus_ene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_itemene_drop_item_lot_id as _;
        if ui.input_int("vagrantItemeneDropItemLotId", &mut i).build() {
            self.vagrant_itemene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.ref_virtual_wep_id as _;
        if ui.input_int("refVirtualWepId", &mut i).build() {
            self.ref_virtual_wep_id = i as _;
        }

        let mut i: i32 = self.replace_item_id_by_sp_effect as _;
        if ui.input_int("replaceItemId_BySpEffect", &mut i).build() {
            self.replace_item_id_by_sp_effect = i as _;
        }

        let mut i: i32 = self.replace_trigger_sp_effect_id as _;
        if ui.input_int("replaceTriggerSpEffectId", &mut i).build() {
            self.replace_trigger_sp_effect_id = i as _;
        }

        let mut b: bool = self.is_load_of_cinder();
        if ui.checkbox("isLoadOfCinder", &mut b) {
            self.set_is_load_of_cinder(b);
        }

        let mut b: bool = self.is_play_region1();
        if ui.checkbox("isPlayRegion1", &mut b) {
            self.set_is_play_region1(b);
        }

        let mut b: bool = self.is_ladder();
        if ui.checkbox("isLadder", &mut b) {
            self.set_is_ladder(b);
        }

        let mut b: bool = self.is_multi_play();
        if ui.checkbox("isMultiPlay", &mut b) {
            self.set_is_multi_play(b);
        }

        let mut b: bool = self.use_selected();
        if ui.checkbox("useSelected", &mut b) {
            self.set_use_selected(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.is_play_region2();
        if ui.checkbox("isPlayRegion2", &mut b) {
            self.set_is_play_region2(b);
        }

        let mut b: bool = self.is_net_penalized();
        if ui.checkbox("isNetPenalized", &mut b) {
            self.set_is_net_penalized(b);
        }

        let mut i: i32 = self.supple_item_type as _;
        if ui.input_int("SuppleItemType", &mut i).build() {
            self.supple_item_type = i as _;
        }

        let mut i: i32 = self.menu_adhoc_type as _;
        if ui.input_int("menuAdhocType", &mut i).build() {
            self.menu_adhoc_type = i as _;
        }

        let mut i: i32 = self.drop as _;
        if ui.input_int("drop", &mut i).build() {
            self.drop = i as _;
        }

        let mut i: i32 = self.max_rep_num as _;
        if ui.input_int("maxRepNum", &mut i).build() {
            self.max_rep_num = i as _;
        }

        let mut i: i32 = self.invade_type as _;
        if ui.input_int("invadeType", &mut i).build() {
            self.invade_type = i as _;
        }

        let mut i: i32 = self.shop_id as _;
        if ui.input_int("shopId", &mut i).build() {
            self.shop_id = i as _;
        }

        let mut i: i32 = self.fp_consume as _;
        if ui.input_int("fpConsume", &mut i).build() {
            self.fp_consume = i as _;
        }

        let mut i: i32 = self.use_limit_category2 as _;
        if ui.input_int("useLimitCategory2", &mut i).build() {
            self.use_limit_category2 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct EquipParamProtector {
    pub sort_id: i32,
    pub wandering_equip_id: i32,
    pub vagrant_item_lot_id: i32,
    pub vagrant_bonusene_drop_item_lot_id: i32,
    pub vagrant_item_ene_drop_item_lot_id: i32,
    pub fix_price: i32,
    pub basic_price: i32,
    pub sell_value: i32,
    pub weight: f32,
    pub resident_sp_effect_id1: i32,
    pub resident_sp_effect_id2: i32,
    pub resident_sp_effect_id3: i32,
    pub material_set_id: i32,
    pub parts_damage_rate: f32,
    pub correct_sarecover: f32,
    pub origin_equip_pro1: i32,
    pub origin_equip_pro2: i32,
    pub origin_equip_pro3: i32,
    pub origin_equip_pro4: i32,
    pub origin_equip_pro5: i32,
    pub origin_equip_pro6: i32,
    pub origin_equip_pro7: i32,
    pub origin_equip_pro8: i32,
    pub origin_equip_pro9: i32,
    pub origin_equip_pro10: i32,
    pub origin_equip_pro11: i32,
    pub origin_equip_pro12: i32,
    pub origin_equip_pro13: i32,
    pub origin_equip_pro14: i32,
    pub origin_equip_pro15: i32,
    pub origin_equip_pro16: i32,
    pub face_scale_m_scale_x: f32,
    pub face_scale_m_scale_z: f32,
    pub face_scale_m_max_x: f32,
    pub face_scale_m_max_z: f32,
    pub face_scale_f_scale_x: f32,
    pub face_scale_f_scale_z: f32,
    pub face_scale_f_max_x: f32,
    pub face_scale_f_max_x_0: f32,
    pub qwc_id: i32,
    pub equip_model_id: i16,
    pub icon_id_m: i16,
    pub icon_id_f: i16,
    pub knockback: i16,
    pub knockback_bounce_rate: i16,
    pub durability: i16,
    pub durability_max: i16,
    pub sa_durability: i16,
    pub def_flick_power: i16,
    pub defense_phys: i16,
    pub defense_magic: i16,
    pub defense_fire: i16,
    pub defense_thunder: i16,
    pub defense_slash: i16,
    pub defense_blow: i16,
    pub defense_thrust: i16,
    pub resist_poison: i16,
    pub resist_toxic: i16,
    pub resist_blood: i16,
    pub resist_curse: i16,
    pub reinforce_type_id: i16,
    pub comp_trophy_sed_id: i16,
    pub shop_lv: i16,
    pub knockback_param_id: u8,
    pub flick_damage_cut_rate: u8,
    pub equip_model_category: u8,
    pub equip_model_gender: u8,
    pub protector_category: u8,
    pub defense_material: u8,
    pub defense_material_sfx: u8,
    pub parts_dmg_type: u8,
    pub defense_material_weak: u8,
    pub defense_material_sfx_weak: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub bitfield3: u8,
    pub bitfield4: u8,
    pub bitfield5: u8,
    pub bitfield6: u8,
    pub bitfield7: u8,
    pub phys_damage_cut_rate: f32,
    pub slash_damage_cut_rate: f32,
    pub strike_damage_cut_rate: f32,
    pub thrust_damage_cut_rate: f32,
    pub magic_damage_cut_rate: f32,
    pub fire_damage_cut_rate: f32,
    pub thunder_damage_cut_rate: f32,
    pub material_id0: u16,
    pub material_id1: u16,
    pub material_id2: u16,
    pub material_id3: u16,
    pub material_id4: u16,
    pub material_id5: u16,
    pub material_id6: u16,
    pub material_id7: u16,
    pub protector_category_id: i32,
    pub poise: f32,
    pub pad1: [u8; 4],
    pub dark_damage_cut_rate: f32,
    pub defense_dark: i16,
    pub unk6: u8,
    pub unk7: u8,
    pub unk8: i32,
    pub upper_arm_id: i32,
    pub unk9: i32,
    pub resist_frost: i16,
    pub mask00: u8,
    pub mask01: u8,
    pub mask02: u8,
    pub mask03: u8,
    pub mask04: u8,
    pub mask05: u8,
    pub mask06: u8,
    pub mask07: u8,
    pub mask08: u8,
    pub mask09: u8,
    pub mask10: u8,
    pub mask11: u8,
    pub mask12: u8,
    pub mask13: u8,
    pub mask14: u8,
    pub mask15: u8,
    pub mask16: u8,
    pub mask17: u8,
    pub mask18: u8,
    pub mask19: u8,
    pub mask20: u8,
    pub mask21: u8,
    pub mask22: u8,
    pub mask23: u8,
    pub mask24: u8,
    pub mask25: u8,
    pub mask26: u8,
    pub mask27: u8,
    pub mask28: u8,
    pub mask29: u8,
    pub mask30: u8,
    pub mask31: u8,
    pub mask32: u8,
    pub mask33: u8,
    pub mask34: u8,
    pub mask35: u8,
    pub mask36: u8,
    pub mask37: u8,
    pub mask38: u8,
    pub mask39: u8,
    pub mask40: u8,
    pub mask41: u8,
    pub mask42: u8,
    pub mask43: u8,
    pub mask44: u8,
    pub mask45: u8,
    pub mask46: u8,
    pub mask47: u8,
    pub mask48: u8,
    pub mask49: u8,
    pub mask50: u8,
    pub mask51: u8,
    pub mask52: u8,
    pub mask53: u8,
    pub mask54: u8,
    pub mask55: u8,
    pub mask56: u8,
    pub mask57: u8,
    pub mask58: u8,
    pub mask59: u8,
    pub mask60: u8,
    pub mask61: u8,
    pub mask62: u8,
    pub mask63: u8,
    pub mask64: u8,
    pub mask65: u8,
    pub mask66: u8,
    pub mask67: u8,
    pub mask68: u8,
    pub mask69: u8,
    pub mask70: u8,
    pub mask71: u8,
    pub mask72: u8,
    pub mask73: u8,
    pub mask74: u8,
    pub mask75: u8,
    pub mask76: u8,
    pub mask77: u8,
    pub mask78: u8,
    pub mask79: u8,
    pub mask80: u8,
    pub mask81: u8,
    pub mask82: u8,
    pub mask83: u8,
    pub mask84: u8,
    pub mask85: u8,
    pub mask86: u8,
    pub mask87: u8,
    pub mask88: u8,
    pub mask89: u8,
    pub mask90: u8,
    pub mask91: u8,
    pub mask92: u8,
    pub mask93: u8,
    pub mask94: u8,
    pub mask95: u8,
    pub mask96: u8,
    pub mask97: u8,
}

impl EquipParamProtector {
    #[allow(unused)]
    pub fn set_is_deposit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_deposit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_head_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn head_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_body_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn body_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_arm_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn arm_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_leg_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn leg_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_face_scale(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_face_scale(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag00(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag00(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag01(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag01(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag02(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag02(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag03(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag03(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag04(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag04(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag05(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag05(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag06(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag06(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag07(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag07(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag08(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag08(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag09(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag09(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag10(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag10(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag11(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag11(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag12(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag12(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag15(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag15(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag16(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag16(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag17(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag17(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag18(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag18(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag19(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag19(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag20(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag20(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag21(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag21(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag22(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag22(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag23(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag23(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag24(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag24(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag25(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag25(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag26(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag26(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag27(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag27(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag28(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag28(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag29(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag29(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag30(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag30(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag31(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag31(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag32(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag32(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag33(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag33(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag34(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag34(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag35(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag35(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag36(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag36(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag37(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag37(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag38(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag38(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag39(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag39(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag40(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag40(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag41(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag41(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag42(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag42(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag43(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag43(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag44(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag44(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag45(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag45(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag46(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag46(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_flag47(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_flag47(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_multi_drop_share(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_multi_drop_share(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_simple_model_for_dlc1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn simple_model_for_dlc1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_guest_drop0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_guest_drop0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_guest_drop1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_guest_drop1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_simple_model_for_dlc2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn simple_model_for_dlc2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield7 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for EquipParamProtector {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.sort_id as _;
        if ui.input_int("sortId", &mut i).build() {
            self.sort_id = i as _;
        }

        let mut i: i32 = self.wandering_equip_id as _;
        if ui.input_int("wanderingEquipId", &mut i).build() {
            self.wandering_equip_id = i as _;
        }

        let mut i: i32 = self.vagrant_item_lot_id as _;
        if ui.input_int("vagrantItemLotId", &mut i).build() {
            self.vagrant_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_bonusene_drop_item_lot_id as _;
        if ui.input_int("vagrantBonuseneDropItemLotId", &mut i).build() {
            self.vagrant_bonusene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_item_ene_drop_item_lot_id as _;
        if ui.input_int("vagrantItemEneDropItemLotId", &mut i).build() {
            self.vagrant_item_ene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.fix_price as _;
        if ui.input_int("fixPrice", &mut i).build() {
            self.fix_price = i as _;
        }

        let mut i: i32 = self.basic_price as _;
        if ui.input_int("basicPrice", &mut i).build() {
            self.basic_price = i as _;
        }

        let mut i: i32 = self.sell_value as _;
        if ui.input_int("sellValue", &mut i).build() {
            self.sell_value = i as _;
        }

        let mut i: f32 = self.weight;
        if ui.input_float("weight", &mut i).build() {
            self.weight = i;
        }

        let mut i: i32 = self.resident_sp_effect_id1 as _;
        if ui.input_int("residentSpEffectId1", &mut i).build() {
            self.resident_sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id2 as _;
        if ui.input_int("residentSpEffectId2", &mut i).build() {
            self.resident_sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id3 as _;
        if ui.input_int("residentSpEffectId3", &mut i).build() {
            self.resident_sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.material_set_id as _;
        if ui.input_int("materialSetId", &mut i).build() {
            self.material_set_id = i as _;
        }

        let mut i: f32 = self.parts_damage_rate;
        if ui.input_float("partsDamageRate", &mut i).build() {
            self.parts_damage_rate = i;
        }

        let mut i: f32 = self.correct_sarecover;
        if ui.input_float("correctSARecover", &mut i).build() {
            self.correct_sarecover = i;
        }

        let mut i: i32 = self.origin_equip_pro1 as _;
        if ui.input_int("originEquipPro1", &mut i).build() {
            self.origin_equip_pro1 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro2 as _;
        if ui.input_int("originEquipPro2", &mut i).build() {
            self.origin_equip_pro2 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro3 as _;
        if ui.input_int("originEquipPro3", &mut i).build() {
            self.origin_equip_pro3 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro4 as _;
        if ui.input_int("originEquipPro4", &mut i).build() {
            self.origin_equip_pro4 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro5 as _;
        if ui.input_int("originEquipPro5", &mut i).build() {
            self.origin_equip_pro5 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro6 as _;
        if ui.input_int("originEquipPro6", &mut i).build() {
            self.origin_equip_pro6 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro7 as _;
        if ui.input_int("originEquipPro7", &mut i).build() {
            self.origin_equip_pro7 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro8 as _;
        if ui.input_int("originEquipPro8", &mut i).build() {
            self.origin_equip_pro8 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro9 as _;
        if ui.input_int("originEquipPro9", &mut i).build() {
            self.origin_equip_pro9 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro10 as _;
        if ui.input_int("originEquipPro10", &mut i).build() {
            self.origin_equip_pro10 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro11 as _;
        if ui.input_int("originEquipPro11", &mut i).build() {
            self.origin_equip_pro11 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro12 as _;
        if ui.input_int("originEquipPro12", &mut i).build() {
            self.origin_equip_pro12 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro13 as _;
        if ui.input_int("originEquipPro13", &mut i).build() {
            self.origin_equip_pro13 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro14 as _;
        if ui.input_int("originEquipPro14", &mut i).build() {
            self.origin_equip_pro14 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro15 as _;
        if ui.input_int("originEquipPro15", &mut i).build() {
            self.origin_equip_pro15 = i as _;
        }

        let mut i: i32 = self.origin_equip_pro16 as _;
        if ui.input_int("originEquipPro16", &mut i).build() {
            self.origin_equip_pro16 = i as _;
        }

        let mut i: f32 = self.face_scale_m_scale_x;
        if ui.input_float("faceScaleM_ScaleX", &mut i).build() {
            self.face_scale_m_scale_x = i;
        }

        let mut i: f32 = self.face_scale_m_scale_z;
        if ui.input_float("faceScaleM_ScaleZ", &mut i).build() {
            self.face_scale_m_scale_z = i;
        }

        let mut i: f32 = self.face_scale_m_max_x;
        if ui.input_float("faceScaleM_MaxX", &mut i).build() {
            self.face_scale_m_max_x = i;
        }

        let mut i: f32 = self.face_scale_m_max_z;
        if ui.input_float("faceScaleM_MaxZ", &mut i).build() {
            self.face_scale_m_max_z = i;
        }

        let mut i: f32 = self.face_scale_f_scale_x;
        if ui.input_float("faceScaleF_ScaleX", &mut i).build() {
            self.face_scale_f_scale_x = i;
        }

        let mut i: f32 = self.face_scale_f_scale_z;
        if ui.input_float("faceScaleF_ScaleZ", &mut i).build() {
            self.face_scale_f_scale_z = i;
        }

        let mut i: f32 = self.face_scale_f_max_x;
        if ui.input_float("faceScaleF_MaxX", &mut i).build() {
            self.face_scale_f_max_x = i;
        }

        let mut i: f32 = self.face_scale_f_max_x_0;
        if ui.input_float("faceScaleF_MaxX_0", &mut i).build() {
            self.face_scale_f_max_x_0 = i;
        }

        let mut i: i32 = self.qwc_id as _;
        if ui.input_int("qwcId", &mut i).build() {
            self.qwc_id = i as _;
        }

        let mut i: i32 = self.equip_model_id as _;
        if ui.input_int("equipModelID", &mut i).build() {
            self.equip_model_id = i as _;
        }

        let mut i: i32 = self.icon_id_m as _;
        if ui.input_int("iconIdM", &mut i).build() {
            self.icon_id_m = i as _;
        }

        let mut i: i32 = self.icon_id_f as _;
        if ui.input_int("iconIdF", &mut i).build() {
            self.icon_id_f = i as _;
        }

        let mut i: i32 = self.knockback as _;
        if ui.input_int("Knockback", &mut i).build() {
            self.knockback = i as _;
        }

        let mut i: i32 = self.knockback_bounce_rate as _;
        if ui.input_int("KnockbackBounceRate", &mut i).build() {
            self.knockback_bounce_rate = i as _;
        }

        let mut i: i32 = self.durability as _;
        if ui.input_int("durability", &mut i).build() {
            self.durability = i as _;
        }

        let mut i: i32 = self.durability_max as _;
        if ui.input_int("durabilityMax", &mut i).build() {
            self.durability_max = i as _;
        }

        let mut i: i32 = self.sa_durability as _;
        if ui.input_int("saDurability", &mut i).build() {
            self.sa_durability = i as _;
        }

        let mut i: i32 = self.def_flick_power as _;
        if ui.input_int("defFlickPower", &mut i).build() {
            self.def_flick_power = i as _;
        }

        let mut i: i32 = self.defense_phys as _;
        if ui.input_int("defensePhys", &mut i).build() {
            self.defense_phys = i as _;
        }

        let mut i: i32 = self.defense_magic as _;
        if ui.input_int("defenseMagic", &mut i).build() {
            self.defense_magic = i as _;
        }

        let mut i: i32 = self.defense_fire as _;
        if ui.input_int("defenseFire", &mut i).build() {
            self.defense_fire = i as _;
        }

        let mut i: i32 = self.defense_thunder as _;
        if ui.input_int("defenseThunder", &mut i).build() {
            self.defense_thunder = i as _;
        }

        let mut i: i32 = self.defense_slash as _;
        if ui.input_int("defenseSlash", &mut i).build() {
            self.defense_slash = i as _;
        }

        let mut i: i32 = self.defense_blow as _;
        if ui.input_int("defenseBlow", &mut i).build() {
            self.defense_blow = i as _;
        }

        let mut i: i32 = self.defense_thrust as _;
        if ui.input_int("defenseThrust", &mut i).build() {
            self.defense_thrust = i as _;
        }

        let mut i: i32 = self.resist_poison as _;
        if ui.input_int("resistPoison", &mut i).build() {
            self.resist_poison = i as _;
        }

        let mut i: i32 = self.resist_toxic as _;
        if ui.input_int("resistToxic", &mut i).build() {
            self.resist_toxic = i as _;
        }

        let mut i: i32 = self.resist_blood as _;
        if ui.input_int("resistBlood", &mut i).build() {
            self.resist_blood = i as _;
        }

        let mut i: i32 = self.resist_curse as _;
        if ui.input_int("resistCurse", &mut i).build() {
            self.resist_curse = i as _;
        }

        let mut i: i32 = self.reinforce_type_id as _;
        if ui.input_int("reinforceTypeId", &mut i).build() {
            self.reinforce_type_id = i as _;
        }

        let mut i: i32 = self.comp_trophy_sed_id as _;
        if ui.input_int("compTrophySedId", &mut i).build() {
            self.comp_trophy_sed_id = i as _;
        }

        let mut i: i32 = self.shop_lv as _;
        if ui.input_int("shopLv", &mut i).build() {
            self.shop_lv = i as _;
        }

        let mut i: i32 = self.knockback_param_id as _;
        if ui.input_int("knockbackParamId", &mut i).build() {
            self.knockback_param_id = i as _;
        }

        let mut i: i32 = self.flick_damage_cut_rate as _;
        if ui.input_int("FlickDamageCutRate", &mut i).build() {
            self.flick_damage_cut_rate = i as _;
        }

        let mut i: i32 = self.equip_model_category as _;
        if ui.input_int("equipModelCategory", &mut i).build() {
            self.equip_model_category = i as _;
        }

        let mut i: i32 = self.equip_model_gender as _;
        if ui.input_int("equipModelGender", &mut i).build() {
            self.equip_model_gender = i as _;
        }

        let mut i: i32 = self.protector_category as _;
        if ui.input_int("protectorCategory", &mut i).build() {
            self.protector_category = i as _;
        }

        let mut i: i32 = self.defense_material as _;
        if ui.input_int("defenseMaterial", &mut i).build() {
            self.defense_material = i as _;
        }

        let mut i: i32 = self.defense_material_sfx as _;
        if ui.input_int("defenseMaterialSfx", &mut i).build() {
            self.defense_material_sfx = i as _;
        }

        let mut i: i32 = self.parts_dmg_type as _;
        if ui.input_int("partsDmgType", &mut i).build() {
            self.parts_dmg_type = i as _;
        }

        let mut i: i32 = self.defense_material_weak as _;
        if ui.input_int("defenseMaterial_Weak", &mut i).build() {
            self.defense_material_weak = i as _;
        }

        let mut i: i32 = self.defense_material_sfx_weak as _;
        if ui.input_int("defenseMaterialSfx_Weak", &mut i).build() {
            self.defense_material_sfx_weak = i as _;
        }

        let mut b: bool = self.is_deposit();
        if ui.checkbox("isDeposit", &mut b) {
            self.set_is_deposit(b);
        }

        let mut b: bool = self.head_equip();
        if ui.checkbox("headEquip", &mut b) {
            self.set_head_equip(b);
        }

        let mut b: bool = self.body_equip();
        if ui.checkbox("bodyEquip", &mut b) {
            self.set_body_equip(b);
        }

        let mut b: bool = self.arm_equip();
        if ui.checkbox("armEquip", &mut b) {
            self.set_arm_equip(b);
        }

        let mut b: bool = self.leg_equip();
        if ui.checkbox("legEquip", &mut b) {
            self.set_leg_equip(b);
        }

        let mut b: bool = self.use_face_scale();
        if ui.checkbox("useFaceScale", &mut b) {
            self.set_use_face_scale(b);
        }

        let mut b: bool = self.invisible_flag00();
        if ui.checkbox("InvisibleFlag00", &mut b) {
            self.set_invisible_flag00(b);
        }

        let mut b: bool = self.invisible_flag01();
        if ui.checkbox("InvisibleFlag01", &mut b) {
            self.set_invisible_flag01(b);
        }

        let mut b: bool = self.invisible_flag02();
        if ui.checkbox("InvisibleFlag02", &mut b) {
            self.set_invisible_flag02(b);
        }

        let mut b: bool = self.invisible_flag03();
        if ui.checkbox("InvisibleFlag03", &mut b) {
            self.set_invisible_flag03(b);
        }

        let mut b: bool = self.invisible_flag04();
        if ui.checkbox("InvisibleFlag04", &mut b) {
            self.set_invisible_flag04(b);
        }

        let mut b: bool = self.invisible_flag05();
        if ui.checkbox("InvisibleFlag05", &mut b) {
            self.set_invisible_flag05(b);
        }

        let mut b: bool = self.invisible_flag06();
        if ui.checkbox("InvisibleFlag06", &mut b) {
            self.set_invisible_flag06(b);
        }

        let mut b: bool = self.invisible_flag07();
        if ui.checkbox("InvisibleFlag07", &mut b) {
            self.set_invisible_flag07(b);
        }

        let mut b: bool = self.invisible_flag08();
        if ui.checkbox("InvisibleFlag08", &mut b) {
            self.set_invisible_flag08(b);
        }

        let mut b: bool = self.invisible_flag09();
        if ui.checkbox("InvisibleFlag09", &mut b) {
            self.set_invisible_flag09(b);
        }

        let mut b: bool = self.invisible_flag10();
        if ui.checkbox("InvisibleFlag10", &mut b) {
            self.set_invisible_flag10(b);
        }

        let mut b: bool = self.invisible_flag11();
        if ui.checkbox("InvisibleFlag11", &mut b) {
            self.set_invisible_flag11(b);
        }

        let mut b: bool = self.invisible_flag12();
        if ui.checkbox("InvisibleFlag12", &mut b) {
            self.set_invisible_flag12(b);
        }

        let mut b: bool = self.invisible_flag13();
        if ui.checkbox("InvisibleFlag13", &mut b) {
            self.set_invisible_flag13(b);
        }

        let mut b: bool = self.invisible_flag14();
        if ui.checkbox("InvisibleFlag14", &mut b) {
            self.set_invisible_flag14(b);
        }

        let mut b: bool = self.invisible_flag15();
        if ui.checkbox("InvisibleFlag15", &mut b) {
            self.set_invisible_flag15(b);
        }

        let mut b: bool = self.invisible_flag16();
        if ui.checkbox("InvisibleFlag16", &mut b) {
            self.set_invisible_flag16(b);
        }

        let mut b: bool = self.invisible_flag17();
        if ui.checkbox("InvisibleFlag17", &mut b) {
            self.set_invisible_flag17(b);
        }

        let mut b: bool = self.invisible_flag18();
        if ui.checkbox("InvisibleFlag18", &mut b) {
            self.set_invisible_flag18(b);
        }

        let mut b: bool = self.invisible_flag19();
        if ui.checkbox("InvisibleFlag19", &mut b) {
            self.set_invisible_flag19(b);
        }

        let mut b: bool = self.invisible_flag20();
        if ui.checkbox("InvisibleFlag20", &mut b) {
            self.set_invisible_flag20(b);
        }

        let mut b: bool = self.invisible_flag21();
        if ui.checkbox("InvisibleFlag21", &mut b) {
            self.set_invisible_flag21(b);
        }

        let mut b: bool = self.invisible_flag22();
        if ui.checkbox("InvisibleFlag22", &mut b) {
            self.set_invisible_flag22(b);
        }

        let mut b: bool = self.invisible_flag23();
        if ui.checkbox("InvisibleFlag23", &mut b) {
            self.set_invisible_flag23(b);
        }

        let mut b: bool = self.invisible_flag24();
        if ui.checkbox("InvisibleFlag24", &mut b) {
            self.set_invisible_flag24(b);
        }

        let mut b: bool = self.invisible_flag25();
        if ui.checkbox("InvisibleFlag25", &mut b) {
            self.set_invisible_flag25(b);
        }

        let mut b: bool = self.invisible_flag26();
        if ui.checkbox("InvisibleFlag26", &mut b) {
            self.set_invisible_flag26(b);
        }

        let mut b: bool = self.invisible_flag27();
        if ui.checkbox("InvisibleFlag27", &mut b) {
            self.set_invisible_flag27(b);
        }

        let mut b: bool = self.invisible_flag28();
        if ui.checkbox("InvisibleFlag28", &mut b) {
            self.set_invisible_flag28(b);
        }

        let mut b: bool = self.invisible_flag29();
        if ui.checkbox("InvisibleFlag29", &mut b) {
            self.set_invisible_flag29(b);
        }

        let mut b: bool = self.invisible_flag30();
        if ui.checkbox("InvisibleFlag30", &mut b) {
            self.set_invisible_flag30(b);
        }

        let mut b: bool = self.invisible_flag31();
        if ui.checkbox("InvisibleFlag31", &mut b) {
            self.set_invisible_flag31(b);
        }

        let mut b: bool = self.invisible_flag32();
        if ui.checkbox("InvisibleFlag32", &mut b) {
            self.set_invisible_flag32(b);
        }

        let mut b: bool = self.invisible_flag33();
        if ui.checkbox("InvisibleFlag33", &mut b) {
            self.set_invisible_flag33(b);
        }

        let mut b: bool = self.invisible_flag34();
        if ui.checkbox("InvisibleFlag34", &mut b) {
            self.set_invisible_flag34(b);
        }

        let mut b: bool = self.invisible_flag35();
        if ui.checkbox("InvisibleFlag35", &mut b) {
            self.set_invisible_flag35(b);
        }

        let mut b: bool = self.invisible_flag36();
        if ui.checkbox("InvisibleFlag36", &mut b) {
            self.set_invisible_flag36(b);
        }

        let mut b: bool = self.invisible_flag37();
        if ui.checkbox("InvisibleFlag37", &mut b) {
            self.set_invisible_flag37(b);
        }

        let mut b: bool = self.invisible_flag38();
        if ui.checkbox("InvisibleFlag38", &mut b) {
            self.set_invisible_flag38(b);
        }

        let mut b: bool = self.invisible_flag39();
        if ui.checkbox("InvisibleFlag39", &mut b) {
            self.set_invisible_flag39(b);
        }

        let mut b: bool = self.invisible_flag40();
        if ui.checkbox("InvisibleFlag40", &mut b) {
            self.set_invisible_flag40(b);
        }

        let mut b: bool = self.invisible_flag41();
        if ui.checkbox("InvisibleFlag41", &mut b) {
            self.set_invisible_flag41(b);
        }

        let mut b: bool = self.invisible_flag42();
        if ui.checkbox("InvisibleFlag42", &mut b) {
            self.set_invisible_flag42(b);
        }

        let mut b: bool = self.invisible_flag43();
        if ui.checkbox("InvisibleFlag43", &mut b) {
            self.set_invisible_flag43(b);
        }

        let mut b: bool = self.invisible_flag44();
        if ui.checkbox("InvisibleFlag44", &mut b) {
            self.set_invisible_flag44(b);
        }

        let mut b: bool = self.invisible_flag45();
        if ui.checkbox("InvisibleFlag45", &mut b) {
            self.set_invisible_flag45(b);
        }

        let mut b: bool = self.invisible_flag46();
        if ui.checkbox("InvisibleFlag46", &mut b) {
            self.set_invisible_flag46(b);
        }

        let mut b: bool = self.invisible_flag47();
        if ui.checkbox("InvisibleFlag47", &mut b) {
            self.set_invisible_flag47(b);
        }

        let mut b: bool = self.disable_multi_drop_share();
        if ui.checkbox("disableMultiDropShare", &mut b) {
            self.set_disable_multi_drop_share(b);
        }

        let mut b: bool = self.simple_model_for_dlc1();
        if ui.checkbox("simpleModelForDlc1", &mut b) {
            self.set_simple_model_for_dlc1(b);
        }

        let mut b: bool = self.is_guest_drop0();
        if ui.checkbox("isGuestDrop0", &mut b) {
            self.set_is_guest_drop0(b);
        }

        let mut b: bool = self.is_guest_drop1();
        if ui.checkbox("isGuestDrop1", &mut b) {
            self.set_is_guest_drop1(b);
        }

        let mut b: bool = self.simple_model_for_dlc2();
        if ui.checkbox("simpleModelForDlc2", &mut b) {
            self.set_simple_model_for_dlc2(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut i: f32 = self.phys_damage_cut_rate;
        if ui.input_float("PhysDamageCutRate", &mut i).build() {
            self.phys_damage_cut_rate = i;
        }

        let mut i: f32 = self.slash_damage_cut_rate;
        if ui.input_float("SlashDamageCutRate", &mut i).build() {
            self.slash_damage_cut_rate = i;
        }

        let mut i: f32 = self.strike_damage_cut_rate;
        if ui.input_float("StrikeDamageCutRate", &mut i).build() {
            self.strike_damage_cut_rate = i;
        }

        let mut i: f32 = self.thrust_damage_cut_rate;
        if ui.input_float("ThrustDamageCutRate", &mut i).build() {
            self.thrust_damage_cut_rate = i;
        }

        let mut i: f32 = self.magic_damage_cut_rate;
        if ui.input_float("MagicDamageCutRate", &mut i).build() {
            self.magic_damage_cut_rate = i;
        }

        let mut i: f32 = self.fire_damage_cut_rate;
        if ui.input_float("FireDamageCutRate", &mut i).build() {
            self.fire_damage_cut_rate = i;
        }

        let mut i: f32 = self.thunder_damage_cut_rate;
        if ui.input_float("ThunderDamageCutRate", &mut i).build() {
            self.thunder_damage_cut_rate = i;
        }

        let mut i: i32 = self.material_id0 as _;
        if ui.input_int("MaterialId0", &mut i).build() {
            self.material_id0 = i as _;
        }

        let mut i: i32 = self.material_id1 as _;
        if ui.input_int("MaterialId1", &mut i).build() {
            self.material_id1 = i as _;
        }

        let mut i: i32 = self.material_id2 as _;
        if ui.input_int("MaterialId2", &mut i).build() {
            self.material_id2 = i as _;
        }

        let mut i: i32 = self.material_id3 as _;
        if ui.input_int("MaterialId3", &mut i).build() {
            self.material_id3 = i as _;
        }

        let mut i: i32 = self.material_id4 as _;
        if ui.input_int("MaterialId4", &mut i).build() {
            self.material_id4 = i as _;
        }

        let mut i: i32 = self.material_id5 as _;
        if ui.input_int("MaterialId5", &mut i).build() {
            self.material_id5 = i as _;
        }

        let mut i: i32 = self.material_id6 as _;
        if ui.input_int("MaterialId6", &mut i).build() {
            self.material_id6 = i as _;
        }

        let mut i: i32 = self.material_id7 as _;
        if ui.input_int("MaterialId7", &mut i).build() {
            self.material_id7 = i as _;
        }

        let mut i: i32 = self.protector_category_id as _;
        if ui.input_int("protectorCategoryId", &mut i).build() {
            self.protector_category_id = i as _;
        }

        let mut i: f32 = self.poise;
        if ui.input_float("Poise", &mut i).build() {
            self.poise = i;
        }

        let mut i: f32 = self.dark_damage_cut_rate;
        if ui.input_float("DarkDamageCutRate", &mut i).build() {
            self.dark_damage_cut_rate = i;
        }

        let mut i: i32 = self.defense_dark as _;
        if ui.input_int("defenseDark", &mut i).build() {
            self.defense_dark = i as _;
        }

        let mut i: i32 = self.unk6 as _;
        if ui.input_int("Unk6", &mut i).build() {
            self.unk6 = i as _;
        }

        let mut i: i32 = self.unk7 as _;
        if ui.input_int("Unk7", &mut i).build() {
            self.unk7 = i as _;
        }

        let mut i: i32 = self.unk8 as _;
        if ui.input_int("Unk8", &mut i).build() {
            self.unk8 = i as _;
        }

        let mut i: i32 = self.upper_arm_id as _;
        if ui.input_int("UpperArmId", &mut i).build() {
            self.upper_arm_id = i as _;
        }

        let mut i: i32 = self.unk9 as _;
        if ui.input_int("Unk9", &mut i).build() {
            self.unk9 = i as _;
        }

        let mut i: i32 = self.resist_frost as _;
        if ui.input_int("resistFrost", &mut i).build() {
            self.resist_frost = i as _;
        }

        let mut i: i32 = self.mask00 as _;
        if ui.input_int("Mask00", &mut i).build() {
            self.mask00 = i as _;
        }

        let mut i: i32 = self.mask01 as _;
        if ui.input_int("Mask01", &mut i).build() {
            self.mask01 = i as _;
        }

        let mut i: i32 = self.mask02 as _;
        if ui.input_int("Mask02", &mut i).build() {
            self.mask02 = i as _;
        }

        let mut i: i32 = self.mask03 as _;
        if ui.input_int("Mask03", &mut i).build() {
            self.mask03 = i as _;
        }

        let mut i: i32 = self.mask04 as _;
        if ui.input_int("Mask04", &mut i).build() {
            self.mask04 = i as _;
        }

        let mut i: i32 = self.mask05 as _;
        if ui.input_int("Mask05", &mut i).build() {
            self.mask05 = i as _;
        }

        let mut i: i32 = self.mask06 as _;
        if ui.input_int("Mask06", &mut i).build() {
            self.mask06 = i as _;
        }

        let mut i: i32 = self.mask07 as _;
        if ui.input_int("Mask07", &mut i).build() {
            self.mask07 = i as _;
        }

        let mut i: i32 = self.mask08 as _;
        if ui.input_int("Mask08", &mut i).build() {
            self.mask08 = i as _;
        }

        let mut i: i32 = self.mask09 as _;
        if ui.input_int("Mask09", &mut i).build() {
            self.mask09 = i as _;
        }

        let mut i: i32 = self.mask10 as _;
        if ui.input_int("Mask10", &mut i).build() {
            self.mask10 = i as _;
        }

        let mut i: i32 = self.mask11 as _;
        if ui.input_int("Mask11", &mut i).build() {
            self.mask11 = i as _;
        }

        let mut i: i32 = self.mask12 as _;
        if ui.input_int("Mask12", &mut i).build() {
            self.mask12 = i as _;
        }

        let mut i: i32 = self.mask13 as _;
        if ui.input_int("Mask13", &mut i).build() {
            self.mask13 = i as _;
        }

        let mut i: i32 = self.mask14 as _;
        if ui.input_int("Mask14", &mut i).build() {
            self.mask14 = i as _;
        }

        let mut i: i32 = self.mask15 as _;
        if ui.input_int("Mask15", &mut i).build() {
            self.mask15 = i as _;
        }

        let mut i: i32 = self.mask16 as _;
        if ui.input_int("Mask16", &mut i).build() {
            self.mask16 = i as _;
        }

        let mut i: i32 = self.mask17 as _;
        if ui.input_int("Mask17", &mut i).build() {
            self.mask17 = i as _;
        }

        let mut i: i32 = self.mask18 as _;
        if ui.input_int("Mask18", &mut i).build() {
            self.mask18 = i as _;
        }

        let mut i: i32 = self.mask19 as _;
        if ui.input_int("Mask19", &mut i).build() {
            self.mask19 = i as _;
        }

        let mut i: i32 = self.mask20 as _;
        if ui.input_int("Mask20", &mut i).build() {
            self.mask20 = i as _;
        }

        let mut i: i32 = self.mask21 as _;
        if ui.input_int("Mask21", &mut i).build() {
            self.mask21 = i as _;
        }

        let mut i: i32 = self.mask22 as _;
        if ui.input_int("Mask22", &mut i).build() {
            self.mask22 = i as _;
        }

        let mut i: i32 = self.mask23 as _;
        if ui.input_int("Mask23", &mut i).build() {
            self.mask23 = i as _;
        }

        let mut i: i32 = self.mask24 as _;
        if ui.input_int("Mask24", &mut i).build() {
            self.mask24 = i as _;
        }

        let mut i: i32 = self.mask25 as _;
        if ui.input_int("Mask25", &mut i).build() {
            self.mask25 = i as _;
        }

        let mut i: i32 = self.mask26 as _;
        if ui.input_int("Mask26", &mut i).build() {
            self.mask26 = i as _;
        }

        let mut i: i32 = self.mask27 as _;
        if ui.input_int("Mask27", &mut i).build() {
            self.mask27 = i as _;
        }

        let mut i: i32 = self.mask28 as _;
        if ui.input_int("Mask28", &mut i).build() {
            self.mask28 = i as _;
        }

        let mut i: i32 = self.mask29 as _;
        if ui.input_int("Mask29", &mut i).build() {
            self.mask29 = i as _;
        }

        let mut i: i32 = self.mask30 as _;
        if ui.input_int("Mask30", &mut i).build() {
            self.mask30 = i as _;
        }

        let mut i: i32 = self.mask31 as _;
        if ui.input_int("Mask31", &mut i).build() {
            self.mask31 = i as _;
        }

        let mut i: i32 = self.mask32 as _;
        if ui.input_int("Mask32", &mut i).build() {
            self.mask32 = i as _;
        }

        let mut i: i32 = self.mask33 as _;
        if ui.input_int("Mask33", &mut i).build() {
            self.mask33 = i as _;
        }

        let mut i: i32 = self.mask34 as _;
        if ui.input_int("Mask34", &mut i).build() {
            self.mask34 = i as _;
        }

        let mut i: i32 = self.mask35 as _;
        if ui.input_int("Mask35", &mut i).build() {
            self.mask35 = i as _;
        }

        let mut i: i32 = self.mask36 as _;
        if ui.input_int("Mask36", &mut i).build() {
            self.mask36 = i as _;
        }

        let mut i: i32 = self.mask37 as _;
        if ui.input_int("Mask37", &mut i).build() {
            self.mask37 = i as _;
        }

        let mut i: i32 = self.mask38 as _;
        if ui.input_int("Mask38", &mut i).build() {
            self.mask38 = i as _;
        }

        let mut i: i32 = self.mask39 as _;
        if ui.input_int("Mask39", &mut i).build() {
            self.mask39 = i as _;
        }

        let mut i: i32 = self.mask40 as _;
        if ui.input_int("Mask40", &mut i).build() {
            self.mask40 = i as _;
        }

        let mut i: i32 = self.mask41 as _;
        if ui.input_int("Mask41", &mut i).build() {
            self.mask41 = i as _;
        }

        let mut i: i32 = self.mask42 as _;
        if ui.input_int("Mask42", &mut i).build() {
            self.mask42 = i as _;
        }

        let mut i: i32 = self.mask43 as _;
        if ui.input_int("Mask43", &mut i).build() {
            self.mask43 = i as _;
        }

        let mut i: i32 = self.mask44 as _;
        if ui.input_int("Mask44", &mut i).build() {
            self.mask44 = i as _;
        }

        let mut i: i32 = self.mask45 as _;
        if ui.input_int("Mask45", &mut i).build() {
            self.mask45 = i as _;
        }

        let mut i: i32 = self.mask46 as _;
        if ui.input_int("Mask46", &mut i).build() {
            self.mask46 = i as _;
        }

        let mut i: i32 = self.mask47 as _;
        if ui.input_int("Mask47", &mut i).build() {
            self.mask47 = i as _;
        }

        let mut i: i32 = self.mask48 as _;
        if ui.input_int("Mask48", &mut i).build() {
            self.mask48 = i as _;
        }

        let mut i: i32 = self.mask49 as _;
        if ui.input_int("Mask49", &mut i).build() {
            self.mask49 = i as _;
        }

        let mut i: i32 = self.mask50 as _;
        if ui.input_int("Mask50", &mut i).build() {
            self.mask50 = i as _;
        }

        let mut i: i32 = self.mask51 as _;
        if ui.input_int("Mask51", &mut i).build() {
            self.mask51 = i as _;
        }

        let mut i: i32 = self.mask52 as _;
        if ui.input_int("Mask52", &mut i).build() {
            self.mask52 = i as _;
        }

        let mut i: i32 = self.mask53 as _;
        if ui.input_int("Mask53", &mut i).build() {
            self.mask53 = i as _;
        }

        let mut i: i32 = self.mask54 as _;
        if ui.input_int("Mask54", &mut i).build() {
            self.mask54 = i as _;
        }

        let mut i: i32 = self.mask55 as _;
        if ui.input_int("Mask55", &mut i).build() {
            self.mask55 = i as _;
        }

        let mut i: i32 = self.mask56 as _;
        if ui.input_int("Mask56", &mut i).build() {
            self.mask56 = i as _;
        }

        let mut i: i32 = self.mask57 as _;
        if ui.input_int("Mask57", &mut i).build() {
            self.mask57 = i as _;
        }

        let mut i: i32 = self.mask58 as _;
        if ui.input_int("Mask58", &mut i).build() {
            self.mask58 = i as _;
        }

        let mut i: i32 = self.mask59 as _;
        if ui.input_int("Mask59", &mut i).build() {
            self.mask59 = i as _;
        }

        let mut i: i32 = self.mask60 as _;
        if ui.input_int("Mask60", &mut i).build() {
            self.mask60 = i as _;
        }

        let mut i: i32 = self.mask61 as _;
        if ui.input_int("Mask61", &mut i).build() {
            self.mask61 = i as _;
        }

        let mut i: i32 = self.mask62 as _;
        if ui.input_int("Mask62", &mut i).build() {
            self.mask62 = i as _;
        }

        let mut i: i32 = self.mask63 as _;
        if ui.input_int("Mask63", &mut i).build() {
            self.mask63 = i as _;
        }

        let mut i: i32 = self.mask64 as _;
        if ui.input_int("Mask64", &mut i).build() {
            self.mask64 = i as _;
        }

        let mut i: i32 = self.mask65 as _;
        if ui.input_int("Mask65", &mut i).build() {
            self.mask65 = i as _;
        }

        let mut i: i32 = self.mask66 as _;
        if ui.input_int("Mask66", &mut i).build() {
            self.mask66 = i as _;
        }

        let mut i: i32 = self.mask67 as _;
        if ui.input_int("Mask67", &mut i).build() {
            self.mask67 = i as _;
        }

        let mut i: i32 = self.mask68 as _;
        if ui.input_int("Mask68", &mut i).build() {
            self.mask68 = i as _;
        }

        let mut i: i32 = self.mask69 as _;
        if ui.input_int("Mask69", &mut i).build() {
            self.mask69 = i as _;
        }

        let mut i: i32 = self.mask70 as _;
        if ui.input_int("Mask70", &mut i).build() {
            self.mask70 = i as _;
        }

        let mut i: i32 = self.mask71 as _;
        if ui.input_int("Mask71", &mut i).build() {
            self.mask71 = i as _;
        }

        let mut i: i32 = self.mask72 as _;
        if ui.input_int("Mask72", &mut i).build() {
            self.mask72 = i as _;
        }

        let mut i: i32 = self.mask73 as _;
        if ui.input_int("Mask73", &mut i).build() {
            self.mask73 = i as _;
        }

        let mut i: i32 = self.mask74 as _;
        if ui.input_int("Mask74", &mut i).build() {
            self.mask74 = i as _;
        }

        let mut i: i32 = self.mask75 as _;
        if ui.input_int("Mask75", &mut i).build() {
            self.mask75 = i as _;
        }

        let mut i: i32 = self.mask76 as _;
        if ui.input_int("Mask76", &mut i).build() {
            self.mask76 = i as _;
        }

        let mut i: i32 = self.mask77 as _;
        if ui.input_int("Mask77", &mut i).build() {
            self.mask77 = i as _;
        }

        let mut i: i32 = self.mask78 as _;
        if ui.input_int("Mask78", &mut i).build() {
            self.mask78 = i as _;
        }

        let mut i: i32 = self.mask79 as _;
        if ui.input_int("Mask79", &mut i).build() {
            self.mask79 = i as _;
        }

        let mut i: i32 = self.mask80 as _;
        if ui.input_int("Mask80", &mut i).build() {
            self.mask80 = i as _;
        }

        let mut i: i32 = self.mask81 as _;
        if ui.input_int("Mask81", &mut i).build() {
            self.mask81 = i as _;
        }

        let mut i: i32 = self.mask82 as _;
        if ui.input_int("Mask82", &mut i).build() {
            self.mask82 = i as _;
        }

        let mut i: i32 = self.mask83 as _;
        if ui.input_int("Mask83", &mut i).build() {
            self.mask83 = i as _;
        }

        let mut i: i32 = self.mask84 as _;
        if ui.input_int("Mask84", &mut i).build() {
            self.mask84 = i as _;
        }

        let mut i: i32 = self.mask85 as _;
        if ui.input_int("Mask85", &mut i).build() {
            self.mask85 = i as _;
        }

        let mut i: i32 = self.mask86 as _;
        if ui.input_int("Mask86", &mut i).build() {
            self.mask86 = i as _;
        }

        let mut i: i32 = self.mask87 as _;
        if ui.input_int("Mask87", &mut i).build() {
            self.mask87 = i as _;
        }

        let mut i: i32 = self.mask88 as _;
        if ui.input_int("Mask88", &mut i).build() {
            self.mask88 = i as _;
        }

        let mut i: i32 = self.mask89 as _;
        if ui.input_int("Mask89", &mut i).build() {
            self.mask89 = i as _;
        }

        let mut i: i32 = self.mask90 as _;
        if ui.input_int("Mask90", &mut i).build() {
            self.mask90 = i as _;
        }

        let mut i: i32 = self.mask91 as _;
        if ui.input_int("Mask91", &mut i).build() {
            self.mask91 = i as _;
        }

        let mut i: i32 = self.mask92 as _;
        if ui.input_int("Mask92", &mut i).build() {
            self.mask92 = i as _;
        }

        let mut i: i32 = self.mask93 as _;
        if ui.input_int("Mask93", &mut i).build() {
            self.mask93 = i as _;
        }

        let mut i: i32 = self.mask94 as _;
        if ui.input_int("Mask94", &mut i).build() {
            self.mask94 = i as _;
        }

        let mut i: i32 = self.mask95 as _;
        if ui.input_int("Mask95", &mut i).build() {
            self.mask95 = i as _;
        }

        let mut i: i32 = self.mask96 as _;
        if ui.input_int("Mask96", &mut i).build() {
            self.mask96 = i as _;
        }

        let mut i: i32 = self.mask97 as _;
        if ui.input_int("Mask97", &mut i).build() {
            self.mask97 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct EquipParamWeapon {
    pub behavior_variation_id: i32,
    pub sort_id: i32,
    pub wandering_equip_id: i32,
    pub weight: f32,
    pub weapon_weight_rate: f32,
    pub fix_price: i32,
    pub basic_price: i32,
    pub sell_value: i32,
    pub correct_strength: f32,
    pub correct_agility: f32,
    pub corret_magic: f32,
    pub corret_faith: f32,
    pub phys_guard_cut_rate: f32,
    pub mag_guard_cut_rate: f32,
    pub fire_guard_cut_rate: f32,
    pub thun_guard_cut_rate: f32,
    pub sp_effect_behavior_id0: i32,
    pub sp_effect_behavior_id1: i32,
    pub sp_effect_behavior_id2: i32,
    pub resident_sp_effect_id0: i32,
    pub resident_sp_effect_id1: i32,
    pub resident_sp_effect_id2: i32,
    pub material_set_id: i32,
    pub origin_equip_wep0: i32,
    pub origin_equip_wep1: i32,
    pub origin_equip_wep2: i32,
    pub origin_equip_wep3: i32,
    pub origin_equip_wep4: i32,
    pub origin_equip_wep5: i32,
    pub origin_equip_wep6: i32,
    pub origin_equip_wep7: i32,
    pub origin_equip_wep8: i32,
    pub origin_equip_wep9: i32,
    pub origin_equip_wep10: i32,
    pub origin_equip_wep11: i32,
    pub origin_equip_wep12: i32,
    pub origin_equip_wep13: i32,
    pub origin_equip_wep14: i32,
    pub origin_equip_wep15: i32,
    pub anti_demon_damage_rate: f32,
    pub ant_undead_damage_rate: f32,
    pub ant_hollow_damage_rate: f32,
    pub ant_abyssal_damage_rate: f32,
    pub vagrant_item_lot_id: i32,
    pub vagrant_bonus_ene_drop_item_lot_id: i32,
    pub vagrant_item_ene_drop_item_lot_id: i32,
    pub equip_model_id: i16,
    pub icon_id: i16,
    pub durability: i16,
    pub duraility_max: i16,
    pub attack_throw_escape: i16,
    pub parry_damage_life: i16,
    pub atk_base_physics: i16,
    pub atk_base_magic: i16,
    pub atk_base_fire: i16,
    pub atk_base_thunder: i16,
    pub atk_base_stamina: i16,
    pub sa_weapon_damage: i16,
    pub sa_durability: i16,
    pub guard_angle: i16,
    pub stamina_guard_def: i16,
    pub reinforce_type_id: i16,
    pub trophy_sgrade_id: i16,
    pub trophy_seq_id: i16,
    pub throw_atk_rate: i16,
    pub bow_dist_rate: i16,
    pub equip_model_category: u8,
    pub equip_model_gender: u8,
    pub weapon_category: u8,
    pub wepmotion_category: u8,
    pub guardmotion_category: u8,
    pub atk_material: u8,
    pub def_material: u8,
    pub def_sfx_material: u8,
    pub correct_type: u8,
    pub sp_attribute: u8,
    pub sp_atk_category: i16,
    pub wepmotion_one_hand_id: u8,
    pub wepmotion_both_hand_id: u8,
    pub proper_strength: u8,
    pub proper_agility: u8,
    pub proper_magic: u8,
    pub proper_faith: u8,
    pub over_strength: u8,
    pub attack_base_parry: u8,
    pub defense_base_parry: u8,
    pub guard_base_repel: u8,
    pub attack_base_repel: u8,
    pub guard_cut_cancel_rate: u8,
    pub guard_level: u8,
    pub slash_guard_cut_rate: u8,
    pub blow_guard_cut_rate: u8,
    pub thrust_guard_cut_rate: u8,
    pub poison_guard_resist: u8,
    pub toxic_guard_resist: u8,
    pub blood_guard_resist: u8,
    pub curse_guard_resist: u8,
    pub is_durability_divergence: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub bitfield3: u8,
    pub unk6: u8,
    pub unk7: u8,
    pub unk8: u8,
    pub unk9: u8,
    pub unk10: u8,
    pub unk11: u8,
    pub group0_atk_vfx_id: i32,
    pub group0_dummy_poly_id0: i32,
    pub group0_dummy_poly_id1: i32,
    pub group1_atk_vfx_id: i32,
    pub group1_dummy_poly_id0: i32,
    pub group1_dummy_poly_id1: i32,
    pub group2_atk_vfx_id: i32,
    pub group2_dummy_poly_id0: i32,
    pub group2_dummy_poly_id1: i32,
    pub group3_atk_vfx_id: i32,
    pub group3_dummy_poly_id0: i32,
    pub group3_dummy_poly_id1: i32,
    pub group4_atk_vfx_id: i32,
    pub group4_dummy_poly_id0: i32,
    pub group4_dummy_poly_id1: i32,
    pub group5_atk_vfx_id: i32,
    pub group5_dummy_poly_id0: i32,
    pub group5_dummy_poly_id1: i32,
    pub group6_atk_vfx_id: i32,
    pub group6_dummy_poly_id0: i32,
    pub group6_dummy_poly_id1: i32,
    pub group7_atk_vfx_id: i32,
    pub group7_dummy_poly_id0: i32,
    pub group7_dummy_poly_id1: i32,
    pub material_val0: i16,
    pub material_val1: i16,
    pub wep_absorp_pos_id: i32,
    pub unk12: f32,
    pub bitfield4: u8,
    pub unk21: u8,
    pub unk22: u8,
    pub unk23: u8,
    pub unk24: f32,
    pub unk25: f32,
    pub dark_guard_cut_rate: f32,
    pub atk_base_dark: i16,
    pub unk26: u8,
    pub atk_throw_escape_a: u8,
    pub sword_art_act_id: i32,
    pub atk_throw_escape_b: u8,
    pub unk30: u8,
    pub unk31: u8,
    pub menu_adhoc: u8,
    pub sword_art_id: i32,
    pub correct_luck: f32,
    pub reinforce_weapon_id: i32,
    pub unk34: i16,
    pub display_type_id: i16,
    pub calc_correct_val0: f32,
    pub calc_correct_val1: f32,
    pub calc_correct_val2: f32,
    pub calc_correct_val3: f32,
    pub calc_correct_val4: f32,
    pub calc_correct_val5: f32,
    pub calc_correct_val6: f32,
    pub calc_correct_val7: f32,
    pub calc_correct_val8: f32,
    pub calc_correct_val9: f32,
    pub calc_correct_val10: f32,
    pub weapon_vfx0: i32,
    pub weapon_vfx1: i32,
    pub weapon_vfx2: i32,
    pub weapon_vfx3: i32,
    pub weapon_vfx4: i32,
    pub weapon_vfx5: i32,
    pub weapon_vfx6: i32,
    pub weapon_vfx7: i32,
    pub stamina_consume_rate: f32,
    pub unk48: f32,
    pub unk49: f32,
    pub unk50: f32,
    pub unk51: f32,
    pub unk52: f32,
    pub unk53: f32,
    pub unk54: f32,
    pub unk55: f32,
    pub unk56: i32,
    pub unk57: i32,
    pub unk58: i32,
    pub unk59: i32,
    pub unk60: i32,
    pub attack_element_correct_id: i32,
    pub shop_price: i32,
    pub unk62: u8,
    pub max_num: u8,
    pub bitfield5: u8,
    pub unk65: u8,
    pub unk66: i32,
    pub sp_eff9600: i16,
    pub pad1: [u8; 38],
}

impl EquipParamWeapon {
    #[allow(unused)]
    pub fn set_right_hand_equipable(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn right_hand_equipable(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_left_hand_equipable(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn left_hand_equipable(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_both_hand_equipable(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn both_hand_equipable(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_arrow_slot_equipable(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn arrow_slot_equipable(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_bolt_slot_equipable(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn bolt_slot_equipable(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_guard(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_guard(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_parry(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_parry(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_magic(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_magic(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_pyromancy(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_pyromancy(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_miracle(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_miracle(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_vow_magic(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_vow_magic(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_normal_attack_type(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_normal_attack_type(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_blow_attack_type(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_blow_attack_type(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_slash_attack_type(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_slash_attack_type(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_thrust_attack_type(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_thrust_attack_type(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enhance(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enhance(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_luck_correct(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_luck_correct(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_custom(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_custom(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_base_change_reset(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_base_change_reset(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_repair(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_repair(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_dark_hand(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_dark_hand(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_simple_model_for_dlc(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn simple_model_for_dlc(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_ubyte_lantern_wep(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn ubyte_lantern_wep(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_versus_ghost_wep(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_versus_ghost_wep(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_base_change_category(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn base_change_category(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_dragon_slayer(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_dragon_slayer(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_deposit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_deposit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_multi_drop_share(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_multi_drop_share(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_discard(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_discard(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_drop(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_drop(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_bool3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn bool3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_bool4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn bool4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_bool5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn bool5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_bool6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn bool6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_bool7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn bool7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_auto_equip(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_auto_equip(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk16(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk16(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk17(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk17(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk18(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk18(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk19(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk19(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk20(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk20(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_wep_sp_mask0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn wep_sp_mask0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_wep_sp_mask1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn wep_sp_mask1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_wep_sp_mask2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn wep_sp_mask2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_wep_sp_mask3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn wep_sp_mask3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_wep_sp_mask4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn wep_sp_mask4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield5 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for EquipParamWeapon {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.behavior_variation_id as _;
        if ui.input_int("behaviorVariationId", &mut i).build() {
            self.behavior_variation_id = i as _;
        }

        let mut i: i32 = self.sort_id as _;
        if ui.input_int("sortId", &mut i).build() {
            self.sort_id = i as _;
        }

        let mut i: i32 = self.wandering_equip_id as _;
        if ui.input_int("wanderingEquipId", &mut i).build() {
            self.wandering_equip_id = i as _;
        }

        let mut i: f32 = self.weight;
        if ui.input_float("weight", &mut i).build() {
            self.weight = i;
        }

        let mut i: f32 = self.weapon_weight_rate;
        if ui.input_float("weaponWeightRate", &mut i).build() {
            self.weapon_weight_rate = i;
        }

        let mut i: i32 = self.fix_price as _;
        if ui.input_int("fixPrice", &mut i).build() {
            self.fix_price = i as _;
        }

        let mut i: i32 = self.basic_price as _;
        if ui.input_int("basicPrice", &mut i).build() {
            self.basic_price = i as _;
        }

        let mut i: i32 = self.sell_value as _;
        if ui.input_int("sellValue", &mut i).build() {
            self.sell_value = i as _;
        }

        let mut i: f32 = self.correct_strength;
        if ui.input_float("correctStrength", &mut i).build() {
            self.correct_strength = i;
        }

        let mut i: f32 = self.correct_agility;
        if ui.input_float("correctAgility", &mut i).build() {
            self.correct_agility = i;
        }

        let mut i: f32 = self.corret_magic;
        if ui.input_float("corretMagic", &mut i).build() {
            self.corret_magic = i;
        }

        let mut i: f32 = self.corret_faith;
        if ui.input_float("corretFaith", &mut i).build() {
            self.corret_faith = i;
        }

        let mut i: f32 = self.phys_guard_cut_rate;
        if ui.input_float("physGuardCutRate", &mut i).build() {
            self.phys_guard_cut_rate = i;
        }

        let mut i: f32 = self.mag_guard_cut_rate;
        if ui.input_float("magGuardCutRate", &mut i).build() {
            self.mag_guard_cut_rate = i;
        }

        let mut i: f32 = self.fire_guard_cut_rate;
        if ui.input_float("fireGuardCutRate", &mut i).build() {
            self.fire_guard_cut_rate = i;
        }

        let mut i: f32 = self.thun_guard_cut_rate;
        if ui.input_float("thunGuardCutRate", &mut i).build() {
            self.thun_guard_cut_rate = i;
        }

        let mut i: i32 = self.sp_effect_behavior_id0 as _;
        if ui.input_int("spEffectBehaviorId0", &mut i).build() {
            self.sp_effect_behavior_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_behavior_id1 as _;
        if ui.input_int("spEffectBehaviorId1", &mut i).build() {
            self.sp_effect_behavior_id1 = i as _;
        }

        let mut i: i32 = self.sp_effect_behavior_id2 as _;
        if ui.input_int("spEffectBehaviorId2", &mut i).build() {
            self.sp_effect_behavior_id2 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id0 as _;
        if ui.input_int("residentSpEffectId0", &mut i).build() {
            self.resident_sp_effect_id0 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id1 as _;
        if ui.input_int("residentSpEffectId1", &mut i).build() {
            self.resident_sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id2 as _;
        if ui.input_int("residentSpEffectId2", &mut i).build() {
            self.resident_sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.material_set_id as _;
        if ui.input_int("materialSetId", &mut i).build() {
            self.material_set_id = i as _;
        }

        let mut i: i32 = self.origin_equip_wep0 as _;
        if ui.input_int("originEquipWep0", &mut i).build() {
            self.origin_equip_wep0 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep1 as _;
        if ui.input_int("originEquipWep1", &mut i).build() {
            self.origin_equip_wep1 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep2 as _;
        if ui.input_int("originEquipWep2", &mut i).build() {
            self.origin_equip_wep2 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep3 as _;
        if ui.input_int("originEquipWep3", &mut i).build() {
            self.origin_equip_wep3 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep4 as _;
        if ui.input_int("originEquipWep4", &mut i).build() {
            self.origin_equip_wep4 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep5 as _;
        if ui.input_int("originEquipWep5", &mut i).build() {
            self.origin_equip_wep5 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep6 as _;
        if ui.input_int("originEquipWep6", &mut i).build() {
            self.origin_equip_wep6 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep7 as _;
        if ui.input_int("originEquipWep7", &mut i).build() {
            self.origin_equip_wep7 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep8 as _;
        if ui.input_int("originEquipWep8", &mut i).build() {
            self.origin_equip_wep8 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep9 as _;
        if ui.input_int("originEquipWep9", &mut i).build() {
            self.origin_equip_wep9 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep10 as _;
        if ui.input_int("originEquipWep10", &mut i).build() {
            self.origin_equip_wep10 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep11 as _;
        if ui.input_int("originEquipWep11", &mut i).build() {
            self.origin_equip_wep11 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep12 as _;
        if ui.input_int("originEquipWep12", &mut i).build() {
            self.origin_equip_wep12 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep13 as _;
        if ui.input_int("originEquipWep13", &mut i).build() {
            self.origin_equip_wep13 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep14 as _;
        if ui.input_int("originEquipWep14", &mut i).build() {
            self.origin_equip_wep14 = i as _;
        }

        let mut i: i32 = self.origin_equip_wep15 as _;
        if ui.input_int("originEquipWep15", &mut i).build() {
            self.origin_equip_wep15 = i as _;
        }

        let mut i: f32 = self.anti_demon_damage_rate;
        if ui.input_float("antiDemonDamageRate", &mut i).build() {
            self.anti_demon_damage_rate = i;
        }

        let mut i: f32 = self.ant_undead_damage_rate;
        if ui.input_float("antUndeadDamageRate", &mut i).build() {
            self.ant_undead_damage_rate = i;
        }

        let mut i: f32 = self.ant_hollow_damage_rate;
        if ui.input_float("antHollowDamageRate", &mut i).build() {
            self.ant_hollow_damage_rate = i;
        }

        let mut i: f32 = self.ant_abyssal_damage_rate;
        if ui.input_float("antAbyssalDamageRate", &mut i).build() {
            self.ant_abyssal_damage_rate = i;
        }

        let mut i: i32 = self.vagrant_item_lot_id as _;
        if ui.input_int("vagrantItemLotId", &mut i).build() {
            self.vagrant_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_bonus_ene_drop_item_lot_id as _;
        if ui.input_int("vagrantBonusEneDropItemLotId", &mut i).build() {
            self.vagrant_bonus_ene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.vagrant_item_ene_drop_item_lot_id as _;
        if ui.input_int("vagrantItemEneDropItemLotId", &mut i).build() {
            self.vagrant_item_ene_drop_item_lot_id = i as _;
        }

        let mut i: i32 = self.equip_model_id as _;
        if ui.input_int("equipModelId", &mut i).build() {
            self.equip_model_id = i as _;
        }

        let mut i: i32 = self.icon_id as _;
        if ui.input_int("iconId", &mut i).build() {
            self.icon_id = i as _;
        }

        let mut i: i32 = self.durability as _;
        if ui.input_int("durability", &mut i).build() {
            self.durability = i as _;
        }

        let mut i: i32 = self.duraility_max as _;
        if ui.input_int("durailityMax", &mut i).build() {
            self.duraility_max = i as _;
        }

        let mut i: i32 = self.attack_throw_escape as _;
        if ui.input_int("attackThrowEscape", &mut i).build() {
            self.attack_throw_escape = i as _;
        }

        let mut i: i32 = self.parry_damage_life as _;
        if ui.input_int("parryDamageLife", &mut i).build() {
            self.parry_damage_life = i as _;
        }

        let mut i: i32 = self.atk_base_physics as _;
        if ui.input_int("atkBasePhysics", &mut i).build() {
            self.atk_base_physics = i as _;
        }

        let mut i: i32 = self.atk_base_magic as _;
        if ui.input_int("atkBaseMagic", &mut i).build() {
            self.atk_base_magic = i as _;
        }

        let mut i: i32 = self.atk_base_fire as _;
        if ui.input_int("atkBaseFire", &mut i).build() {
            self.atk_base_fire = i as _;
        }

        let mut i: i32 = self.atk_base_thunder as _;
        if ui.input_int("atkBaseThunder", &mut i).build() {
            self.atk_base_thunder = i as _;
        }

        let mut i: i32 = self.atk_base_stamina as _;
        if ui.input_int("atkBaseStamina", &mut i).build() {
            self.atk_base_stamina = i as _;
        }

        let mut i: i32 = self.sa_weapon_damage as _;
        if ui.input_int("saWeaponDamage", &mut i).build() {
            self.sa_weapon_damage = i as _;
        }

        let mut i: i32 = self.sa_durability as _;
        if ui.input_int("saDurability", &mut i).build() {
            self.sa_durability = i as _;
        }

        let mut i: i32 = self.guard_angle as _;
        if ui.input_int("guardAngle", &mut i).build() {
            self.guard_angle = i as _;
        }

        let mut i: i32 = self.stamina_guard_def as _;
        if ui.input_int("staminaGuardDef", &mut i).build() {
            self.stamina_guard_def = i as _;
        }

        let mut i: i32 = self.reinforce_type_id as _;
        if ui.input_int("reinforceTypeId", &mut i).build() {
            self.reinforce_type_id = i as _;
        }

        let mut i: i32 = self.trophy_sgrade_id as _;
        if ui.input_int("trophySGradeId", &mut i).build() {
            self.trophy_sgrade_id = i as _;
        }

        let mut i: i32 = self.trophy_seq_id as _;
        if ui.input_int("trophySeqId", &mut i).build() {
            self.trophy_seq_id = i as _;
        }

        let mut i: i32 = self.throw_atk_rate as _;
        if ui.input_int("throwAtkRate", &mut i).build() {
            self.throw_atk_rate = i as _;
        }

        let mut i: i32 = self.bow_dist_rate as _;
        if ui.input_int("bowDistRate", &mut i).build() {
            self.bow_dist_rate = i as _;
        }

        let mut i: i32 = self.equip_model_category as _;
        if ui.input_int("equipModelCategory", &mut i).build() {
            self.equip_model_category = i as _;
        }

        let mut i: i32 = self.equip_model_gender as _;
        if ui.input_int("equipModelGender", &mut i).build() {
            self.equip_model_gender = i as _;
        }

        let mut i: i32 = self.weapon_category as _;
        if ui.input_int("weaponCategory", &mut i).build() {
            self.weapon_category = i as _;
        }

        let mut i: i32 = self.wepmotion_category as _;
        if ui.input_int("wepmotionCategory", &mut i).build() {
            self.wepmotion_category = i as _;
        }

        let mut i: i32 = self.guardmotion_category as _;
        if ui.input_int("guardmotionCategory", &mut i).build() {
            self.guardmotion_category = i as _;
        }

        let mut i: i32 = self.atk_material as _;
        if ui.input_int("atkMaterial", &mut i).build() {
            self.atk_material = i as _;
        }

        let mut i: i32 = self.def_material as _;
        if ui.input_int("defMaterial", &mut i).build() {
            self.def_material = i as _;
        }

        let mut i: i32 = self.def_sfx_material as _;
        if ui.input_int("defSfxMaterial", &mut i).build() {
            self.def_sfx_material = i as _;
        }

        let mut i: i32 = self.correct_type as _;
        if ui.input_int("correctType", &mut i).build() {
            self.correct_type = i as _;
        }

        let mut i: i32 = self.sp_attribute as _;
        if ui.input_int("spAttribute", &mut i).build() {
            self.sp_attribute = i as _;
        }

        let mut i: i32 = self.sp_atk_category as _;
        if ui.input_int("spAtkCategory", &mut i).build() {
            self.sp_atk_category = i as _;
        }

        let mut i: i32 = self.wepmotion_one_hand_id as _;
        if ui.input_int("wepmotionOneHandId", &mut i).build() {
            self.wepmotion_one_hand_id = i as _;
        }

        let mut i: i32 = self.wepmotion_both_hand_id as _;
        if ui.input_int("wepmotionBothHandId", &mut i).build() {
            self.wepmotion_both_hand_id = i as _;
        }

        let mut i: i32 = self.proper_strength as _;
        if ui.input_int("properStrength", &mut i).build() {
            self.proper_strength = i as _;
        }

        let mut i: i32 = self.proper_agility as _;
        if ui.input_int("properAgility", &mut i).build() {
            self.proper_agility = i as _;
        }

        let mut i: i32 = self.proper_magic as _;
        if ui.input_int("properMagic", &mut i).build() {
            self.proper_magic = i as _;
        }

        let mut i: i32 = self.proper_faith as _;
        if ui.input_int("properFaith", &mut i).build() {
            self.proper_faith = i as _;
        }

        let mut i: i32 = self.over_strength as _;
        if ui.input_int("overStrength", &mut i).build() {
            self.over_strength = i as _;
        }

        let mut i: i32 = self.attack_base_parry as _;
        if ui.input_int("attackBaseParry", &mut i).build() {
            self.attack_base_parry = i as _;
        }

        let mut i: i32 = self.defense_base_parry as _;
        if ui.input_int("defenseBaseParry", &mut i).build() {
            self.defense_base_parry = i as _;
        }

        let mut i: i32 = self.guard_base_repel as _;
        if ui.input_int("guardBaseRepel", &mut i).build() {
            self.guard_base_repel = i as _;
        }

        let mut i: i32 = self.attack_base_repel as _;
        if ui.input_int("attackBaseRepel", &mut i).build() {
            self.attack_base_repel = i as _;
        }

        let mut i: i32 = self.guard_cut_cancel_rate as _;
        if ui.input_int("guardCutCancelRate", &mut i).build() {
            self.guard_cut_cancel_rate = i as _;
        }

        let mut i: i32 = self.guard_level as _;
        if ui.input_int("guardLevel", &mut i).build() {
            self.guard_level = i as _;
        }

        let mut i: i32 = self.slash_guard_cut_rate as _;
        if ui.input_int("slashGuardCutRate", &mut i).build() {
            self.slash_guard_cut_rate = i as _;
        }

        let mut i: i32 = self.blow_guard_cut_rate as _;
        if ui.input_int("blowGuardCutRate", &mut i).build() {
            self.blow_guard_cut_rate = i as _;
        }

        let mut i: i32 = self.thrust_guard_cut_rate as _;
        if ui.input_int("thrustGuardCutRate", &mut i).build() {
            self.thrust_guard_cut_rate = i as _;
        }

        let mut i: i32 = self.poison_guard_resist as _;
        if ui.input_int("poisonGuardResist", &mut i).build() {
            self.poison_guard_resist = i as _;
        }

        let mut i: i32 = self.toxic_guard_resist as _;
        if ui.input_int("toxicGuardResist", &mut i).build() {
            self.toxic_guard_resist = i as _;
        }

        let mut i: i32 = self.blood_guard_resist as _;
        if ui.input_int("bloodGuardResist", &mut i).build() {
            self.blood_guard_resist = i as _;
        }

        let mut i: i32 = self.curse_guard_resist as _;
        if ui.input_int("curseGuardResist", &mut i).build() {
            self.curse_guard_resist = i as _;
        }

        let mut i: i32 = self.is_durability_divergence as _;
        if ui.input_int("isDurabilityDivergence", &mut i).build() {
            self.is_durability_divergence = i as _;
        }

        let mut b: bool = self.right_hand_equipable();
        if ui.checkbox("rightHandEquipable", &mut b) {
            self.set_right_hand_equipable(b);
        }

        let mut b: bool = self.left_hand_equipable();
        if ui.checkbox("leftHandEquipable", &mut b) {
            self.set_left_hand_equipable(b);
        }

        let mut b: bool = self.both_hand_equipable();
        if ui.checkbox("bothHandEquipable", &mut b) {
            self.set_both_hand_equipable(b);
        }

        let mut b: bool = self.arrow_slot_equipable();
        if ui.checkbox("arrowSlotEquipable", &mut b) {
            self.set_arrow_slot_equipable(b);
        }

        let mut b: bool = self.bolt_slot_equipable();
        if ui.checkbox("boltSlotEquipable", &mut b) {
            self.set_bolt_slot_equipable(b);
        }

        let mut b: bool = self.enable_guard();
        if ui.checkbox("enableGuard", &mut b) {
            self.set_enable_guard(b);
        }

        let mut b: bool = self.enable_parry();
        if ui.checkbox("enableParry", &mut b) {
            self.set_enable_parry(b);
        }

        let mut b: bool = self.enable_magic();
        if ui.checkbox("enableMagic", &mut b) {
            self.set_enable_magic(b);
        }

        let mut b: bool = self.enable_pyromancy();
        if ui.checkbox("enablePyromancy", &mut b) {
            self.set_enable_pyromancy(b);
        }

        let mut b: bool = self.enable_miracle();
        if ui.checkbox("enableMiracle", &mut b) {
            self.set_enable_miracle(b);
        }

        let mut b: bool = self.enable_vow_magic();
        if ui.checkbox("enableVowMagic", &mut b) {
            self.set_enable_vow_magic(b);
        }

        let mut b: bool = self.is_normal_attack_type();
        if ui.checkbox("isNormalAttackType", &mut b) {
            self.set_is_normal_attack_type(b);
        }

        let mut b: bool = self.is_blow_attack_type();
        if ui.checkbox("isBlowAttackType", &mut b) {
            self.set_is_blow_attack_type(b);
        }

        let mut b: bool = self.is_slash_attack_type();
        if ui.checkbox("isSlashAttackType", &mut b) {
            self.set_is_slash_attack_type(b);
        }

        let mut b: bool = self.is_thrust_attack_type();
        if ui.checkbox("isThrustAttackType", &mut b) {
            self.set_is_thrust_attack_type(b);
        }

        let mut b: bool = self.is_enhance();
        if ui.checkbox("isEnhance", &mut b) {
            self.set_is_enhance(b);
        }

        let mut b: bool = self.is_luck_correct();
        if ui.checkbox("isLuckCorrect", &mut b) {
            self.set_is_luck_correct(b);
        }

        let mut b: bool = self.is_custom();
        if ui.checkbox("isCustom", &mut b) {
            self.set_is_custom(b);
        }

        let mut b: bool = self.disable_base_change_reset();
        if ui.checkbox("disableBaseChangeReset", &mut b) {
            self.set_disable_base_change_reset(b);
        }

        let mut b: bool = self.disable_repair();
        if ui.checkbox("disableRepair", &mut b) {
            self.set_disable_repair(b);
        }

        let mut b: bool = self.is_dark_hand();
        if ui.checkbox("isDarkHand", &mut b) {
            self.set_is_dark_hand(b);
        }

        let mut b: bool = self.simple_model_for_dlc();
        if ui.checkbox("simpleModelForDlc", &mut b) {
            self.set_simple_model_for_dlc(b);
        }

        let mut b: bool = self.ubyte_lantern_wep();
        if ui.checkbox("ubyteLanternWep", &mut b) {
            self.set_ubyte_lantern_wep(b);
        }

        let mut b: bool = self.is_versus_ghost_wep();
        if ui.checkbox("isVersusGhostWep", &mut b) {
            self.set_is_versus_ghost_wep(b);
        }

        let mut b: bool = self.base_change_category();
        if ui.checkbox("baseChangeCategory", &mut b) {
            self.set_base_change_category(b);
        }

        let mut b: bool = self.is_dragon_slayer();
        if ui.checkbox("isDragonSlayer", &mut b) {
            self.set_is_dragon_slayer(b);
        }

        let mut b: bool = self.is_deposit();
        if ui.checkbox("isDeposit", &mut b) {
            self.set_is_deposit(b);
        }

        let mut b: bool = self.disable_multi_drop_share();
        if ui.checkbox("disableMultiDropShare", &mut b) {
            self.set_disable_multi_drop_share(b);
        }

        let mut b: bool = self.is_discard();
        if ui.checkbox("IsDiscard", &mut b) {
            self.set_is_discard(b);
        }

        let mut b: bool = self.is_drop();
        if ui.checkbox("IsDrop", &mut b) {
            self.set_is_drop(b);
        }

        let mut b: bool = self.bool3();
        if ui.checkbox("Bool3", &mut b) {
            self.set_bool3(b);
        }

        let mut b: bool = self.bool4();
        if ui.checkbox("Bool4", &mut b) {
            self.set_bool4(b);
        }

        let mut i: i32 = self.unk6 as _;
        if ui.input_int("Unk6", &mut i).build() {
            self.unk6 = i as _;
        }

        let mut i: i32 = self.unk7 as _;
        if ui.input_int("Unk7", &mut i).build() {
            self.unk7 = i as _;
        }

        let mut i: i32 = self.unk8 as _;
        if ui.input_int("Unk8", &mut i).build() {
            self.unk8 = i as _;
        }

        let mut i: i32 = self.unk9 as _;
        if ui.input_int("Unk9", &mut i).build() {
            self.unk9 = i as _;
        }

        let mut i: i32 = self.unk10 as _;
        if ui.input_int("Unk10", &mut i).build() {
            self.unk10 = i as _;
        }

        let mut i: i32 = self.unk11 as _;
        if ui.input_int("Unk11", &mut i).build() {
            self.unk11 = i as _;
        }

        let mut i: i32 = self.group0_atk_vfx_id as _;
        if ui.input_int("Group0_AtkVfxId", &mut i).build() {
            self.group0_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group0_dummy_poly_id0 as _;
        if ui.input_int("Group0_DummyPolyId0", &mut i).build() {
            self.group0_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group0_dummy_poly_id1 as _;
        if ui.input_int("Group0_DummyPolyId1", &mut i).build() {
            self.group0_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group1_atk_vfx_id as _;
        if ui.input_int("Group1_AtkVfxId", &mut i).build() {
            self.group1_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group1_dummy_poly_id0 as _;
        if ui.input_int("Group1_DummyPolyId0", &mut i).build() {
            self.group1_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group1_dummy_poly_id1 as _;
        if ui.input_int("Group1_DummyPolyId1", &mut i).build() {
            self.group1_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group2_atk_vfx_id as _;
        if ui.input_int("Group2_AtkVfxId", &mut i).build() {
            self.group2_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group2_dummy_poly_id0 as _;
        if ui.input_int("Group2_DummyPolyId0", &mut i).build() {
            self.group2_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group2_dummy_poly_id1 as _;
        if ui.input_int("Group2_DummyPolyId1", &mut i).build() {
            self.group2_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group3_atk_vfx_id as _;
        if ui.input_int("Group3_AtkVfxId", &mut i).build() {
            self.group3_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group3_dummy_poly_id0 as _;
        if ui.input_int("Group3_DummyPolyId0", &mut i).build() {
            self.group3_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group3_dummy_poly_id1 as _;
        if ui.input_int("Group3_DummyPolyId1", &mut i).build() {
            self.group3_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group4_atk_vfx_id as _;
        if ui.input_int("Group4_AtkVfxId", &mut i).build() {
            self.group4_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group4_dummy_poly_id0 as _;
        if ui.input_int("Group4_DummyPolyId0", &mut i).build() {
            self.group4_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group4_dummy_poly_id1 as _;
        if ui.input_int("Group4_DummyPolyId1", &mut i).build() {
            self.group4_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group5_atk_vfx_id as _;
        if ui.input_int("Group5_AtkVfxId", &mut i).build() {
            self.group5_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group5_dummy_poly_id0 as _;
        if ui.input_int("Group5_DummyPolyId0", &mut i).build() {
            self.group5_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group5_dummy_poly_id1 as _;
        if ui.input_int("Group5_DummyPolyId1", &mut i).build() {
            self.group5_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group6_atk_vfx_id as _;
        if ui.input_int("Group6_AtkVfxId", &mut i).build() {
            self.group6_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group6_dummy_poly_id0 as _;
        if ui.input_int("Group6_DummyPolyId0", &mut i).build() {
            self.group6_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group6_dummy_poly_id1 as _;
        if ui.input_int("Group6_DummyPolyId1", &mut i).build() {
            self.group6_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.group7_atk_vfx_id as _;
        if ui.input_int("Group7_AtkVfxId", &mut i).build() {
            self.group7_atk_vfx_id = i as _;
        }

        let mut i: i32 = self.group7_dummy_poly_id0 as _;
        if ui.input_int("Group7_DummyPolyId0", &mut i).build() {
            self.group7_dummy_poly_id0 = i as _;
        }

        let mut i: i32 = self.group7_dummy_poly_id1 as _;
        if ui.input_int("Group7_DummyPolyId1", &mut i).build() {
            self.group7_dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.material_val0 as _;
        if ui.input_int("materialVal0", &mut i).build() {
            self.material_val0 = i as _;
        }

        let mut i: i32 = self.material_val1 as _;
        if ui.input_int("materialVal1", &mut i).build() {
            self.material_val1 = i as _;
        }

        let mut i: i32 = self.wep_absorp_pos_id as _;
        if ui.input_int("wepAbsorpPosId", &mut i).build() {
            self.wep_absorp_pos_id = i as _;
        }

        let mut i: f32 = self.unk12;
        if ui.input_float("Unk12", &mut i).build() {
            self.unk12 = i;
        }

        let mut b: bool = self.bool5();
        if ui.checkbox("Bool5", &mut b) {
            self.set_bool5(b);
        }

        let mut b: bool = self.bool6();
        if ui.checkbox("Bool6", &mut b) {
            self.set_bool6(b);
        }

        let mut b: bool = self.bool7();
        if ui.checkbox("Bool7", &mut b) {
            self.set_bool7(b);
        }

        let mut b: bool = self.unk13();
        if ui.checkbox("Unk13", &mut b) {
            self.set_unk13(b);
        }

        let mut b: bool = self.unk14();
        if ui.checkbox("Unk14", &mut b) {
            self.set_unk14(b);
        }

        let mut b: bool = self.is_auto_equip();
        if ui.checkbox("IsAutoEquip", &mut b) {
            self.set_is_auto_equip(b);
        }

        let mut b: bool = self.unk16();
        if ui.checkbox("Unk16", &mut b) {
            self.set_unk16(b);
        }

        let mut b: bool = self.unk17();
        if ui.checkbox("Unk17", &mut b) {
            self.set_unk17(b);
        }

        let mut i: i32 = self.unk21 as _;
        if ui.input_int("Unk21", &mut i).build() {
            self.unk21 = i as _;
        }

        let mut i: i32 = self.unk22 as _;
        if ui.input_int("Unk22", &mut i).build() {
            self.unk22 = i as _;
        }

        let mut i: i32 = self.unk23 as _;
        if ui.input_int("Unk23", &mut i).build() {
            self.unk23 = i as _;
        }

        let mut i: f32 = self.unk24;
        if ui.input_float("Unk24", &mut i).build() {
            self.unk24 = i;
        }

        let mut i: f32 = self.unk25;
        if ui.input_float("Unk25", &mut i).build() {
            self.unk25 = i;
        }

        let mut i: f32 = self.dark_guard_cut_rate;
        if ui.input_float("darkGuardCutRate", &mut i).build() {
            self.dark_guard_cut_rate = i;
        }

        let mut i: i32 = self.atk_base_dark as _;
        if ui.input_int("atkBaseDark", &mut i).build() {
            self.atk_base_dark = i as _;
        }

        let mut i: i32 = self.unk26 as _;
        if ui.input_int("Unk26", &mut i).build() {
            self.unk26 = i as _;
        }

        let mut i: i32 = self.atk_throw_escape_a as _;
        if ui.input_int("AtkThrowEscapeA", &mut i).build() {
            self.atk_throw_escape_a = i as _;
        }

        let mut i: i32 = self.sword_art_act_id as _;
        if ui.input_int("swordArt_ActId", &mut i).build() {
            self.sword_art_act_id = i as _;
        }

        let mut i: i32 = self.atk_throw_escape_b as _;
        if ui.input_int("AtkThrowEscapeB", &mut i).build() {
            self.atk_throw_escape_b = i as _;
        }

        let mut i: i32 = self.unk30 as _;
        if ui.input_int("Unk30", &mut i).build() {
            self.unk30 = i as _;
        }

        let mut i: i32 = self.unk31 as _;
        if ui.input_int("Unk31", &mut i).build() {
            self.unk31 = i as _;
        }

        let mut i: i32 = self.menu_adhoc as _;
        if ui.input_int("MenuAdhoc", &mut i).build() {
            self.menu_adhoc = i as _;
        }

        let mut i: i32 = self.sword_art_id as _;
        if ui.input_int("swordArtId", &mut i).build() {
            self.sword_art_id = i as _;
        }

        let mut i: f32 = self.correct_luck;
        if ui.input_float("correctLuck", &mut i).build() {
            self.correct_luck = i;
        }

        let mut i: i32 = self.reinforce_weapon_id as _;
        if ui.input_int("reinforceWeaponId", &mut i).build() {
            self.reinforce_weapon_id = i as _;
        }

        let mut i: i32 = self.unk34 as _;
        if ui.input_int("Unk34", &mut i).build() {
            self.unk34 = i as _;
        }

        let mut i: i32 = self.display_type_id as _;
        if ui.input_int("displayTypeId", &mut i).build() {
            self.display_type_id = i as _;
        }

        let mut i: f32 = self.calc_correct_val0;
        if ui.input_float("CalcCorrectVal0", &mut i).build() {
            self.calc_correct_val0 = i;
        }

        let mut i: f32 = self.calc_correct_val1;
        if ui.input_float("CalcCorrectVal1", &mut i).build() {
            self.calc_correct_val1 = i;
        }

        let mut i: f32 = self.calc_correct_val2;
        if ui.input_float("CalcCorrectVal2", &mut i).build() {
            self.calc_correct_val2 = i;
        }

        let mut i: f32 = self.calc_correct_val3;
        if ui.input_float("CalcCorrectVal3", &mut i).build() {
            self.calc_correct_val3 = i;
        }

        let mut i: f32 = self.calc_correct_val4;
        if ui.input_float("CalcCorrectVal4", &mut i).build() {
            self.calc_correct_val4 = i;
        }

        let mut i: f32 = self.calc_correct_val5;
        if ui.input_float("CalcCorrectVal5", &mut i).build() {
            self.calc_correct_val5 = i;
        }

        let mut i: f32 = self.calc_correct_val6;
        if ui.input_float("CalcCorrectVal6", &mut i).build() {
            self.calc_correct_val6 = i;
        }

        let mut i: f32 = self.calc_correct_val7;
        if ui.input_float("CalcCorrectVal7", &mut i).build() {
            self.calc_correct_val7 = i;
        }

        let mut i: f32 = self.calc_correct_val8;
        if ui.input_float("CalcCorrectVal8", &mut i).build() {
            self.calc_correct_val8 = i;
        }

        let mut i: f32 = self.calc_correct_val9;
        if ui.input_float("CalcCorrectVal9", &mut i).build() {
            self.calc_correct_val9 = i;
        }

        let mut i: f32 = self.calc_correct_val10;
        if ui.input_float("CalcCorrectVal10", &mut i).build() {
            self.calc_correct_val10 = i;
        }

        let mut i: i32 = self.weapon_vfx0 as _;
        if ui.input_int("weaponVfx0", &mut i).build() {
            self.weapon_vfx0 = i as _;
        }

        let mut i: i32 = self.weapon_vfx1 as _;
        if ui.input_int("weaponVfx1", &mut i).build() {
            self.weapon_vfx1 = i as _;
        }

        let mut i: i32 = self.weapon_vfx2 as _;
        if ui.input_int("weaponVfx2", &mut i).build() {
            self.weapon_vfx2 = i as _;
        }

        let mut i: i32 = self.weapon_vfx3 as _;
        if ui.input_int("weaponVfx3", &mut i).build() {
            self.weapon_vfx3 = i as _;
        }

        let mut i: i32 = self.weapon_vfx4 as _;
        if ui.input_int("weaponVfx4", &mut i).build() {
            self.weapon_vfx4 = i as _;
        }

        let mut i: i32 = self.weapon_vfx5 as _;
        if ui.input_int("weaponVfx5", &mut i).build() {
            self.weapon_vfx5 = i as _;
        }

        let mut i: i32 = self.weapon_vfx6 as _;
        if ui.input_int("weaponVfx6", &mut i).build() {
            self.weapon_vfx6 = i as _;
        }

        let mut i: i32 = self.weapon_vfx7 as _;
        if ui.input_int("weaponVfx7", &mut i).build() {
            self.weapon_vfx7 = i as _;
        }

        let mut i: f32 = self.stamina_consume_rate;
        if ui.input_float("StaminaConsumeRate", &mut i).build() {
            self.stamina_consume_rate = i;
        }

        let mut i: f32 = self.unk48;
        if ui.input_float("Unk48", &mut i).build() {
            self.unk48 = i;
        }

        let mut i: f32 = self.unk49;
        if ui.input_float("Unk49", &mut i).build() {
            self.unk49 = i;
        }

        let mut i: f32 = self.unk50;
        if ui.input_float("Unk50", &mut i).build() {
            self.unk50 = i;
        }

        let mut i: f32 = self.unk51;
        if ui.input_float("Unk51", &mut i).build() {
            self.unk51 = i;
        }

        let mut i: f32 = self.unk52;
        if ui.input_float("Unk52", &mut i).build() {
            self.unk52 = i;
        }

        let mut i: f32 = self.unk53;
        if ui.input_float("Unk53", &mut i).build() {
            self.unk53 = i;
        }

        let mut i: f32 = self.unk54;
        if ui.input_float("Unk54", &mut i).build() {
            self.unk54 = i;
        }

        let mut i: f32 = self.unk55;
        if ui.input_float("Unk55", &mut i).build() {
            self.unk55 = i;
        }

        let mut i: i32 = self.unk56 as _;
        if ui.input_int("Unk56", &mut i).build() {
            self.unk56 = i as _;
        }

        let mut i: i32 = self.unk57 as _;
        if ui.input_int("Unk57", &mut i).build() {
            self.unk57 = i as _;
        }

        let mut i: i32 = self.unk58 as _;
        if ui.input_int("Unk58", &mut i).build() {
            self.unk58 = i as _;
        }

        let mut i: i32 = self.unk59 as _;
        if ui.input_int("Unk59", &mut i).build() {
            self.unk59 = i as _;
        }

        let mut i: i32 = self.unk60 as _;
        if ui.input_int("Unk60", &mut i).build() {
            self.unk60 = i as _;
        }

        let mut i: i32 = self.attack_element_correct_id as _;
        if ui.input_int("attackElementCorrectId", &mut i).build() {
            self.attack_element_correct_id = i as _;
        }

        let mut i: i32 = self.shop_price as _;
        if ui.input_int("shopPrice", &mut i).build() {
            self.shop_price = i as _;
        }

        let mut i: i32 = self.unk62 as _;
        if ui.input_int("Unk62", &mut i).build() {
            self.unk62 = i as _;
        }

        let mut i: i32 = self.max_num as _;
        if ui.input_int("MaxNum", &mut i).build() {
            self.max_num = i as _;
        }

        let mut b: bool = self.unk18();
        if ui.checkbox("Unk18", &mut b) {
            self.set_unk18(b);
        }

        let mut b: bool = self.unk19();
        if ui.checkbox("Unk19", &mut b) {
            self.set_unk19(b);
        }

        let mut b: bool = self.unk20();
        if ui.checkbox("Unk20", &mut b) {
            self.set_unk20(b);
        }

        let mut b: bool = self.wep_sp_mask0();
        if ui.checkbox("WepSpMask0", &mut b) {
            self.set_wep_sp_mask0(b);
        }

        let mut b: bool = self.wep_sp_mask1();
        if ui.checkbox("WepSpMask1", &mut b) {
            self.set_wep_sp_mask1(b);
        }

        let mut b: bool = self.wep_sp_mask2();
        if ui.checkbox("WepSpMask2", &mut b) {
            self.set_wep_sp_mask2(b);
        }

        let mut b: bool = self.wep_sp_mask3();
        if ui.checkbox("WepSpMask3", &mut b) {
            self.set_wep_sp_mask3(b);
        }

        let mut b: bool = self.wep_sp_mask4();
        if ui.checkbox("WepSpMask4", &mut b) {
            self.set_wep_sp_mask4(b);
        }

        let mut i: i32 = self.unk65 as _;
        if ui.input_int("Unk65", &mut i).build() {
            self.unk65 = i as _;
        }

        let mut i: i32 = self.unk66 as _;
        if ui.input_int("Unk66", &mut i).build() {
            self.unk66 = i as _;
        }

        let mut i: i32 = self.sp_eff9600 as _;
        if ui.input_int("SpEff9600", &mut i).build() {
            self.sp_eff9600 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct FaceGenParam {
    pub face_geo_data01: u8,
    pub face_geo_data02: u8,
    pub face_geo_data03: u8,
    pub face_geo_data04: u8,
    pub face_geo_data05: u8,
    pub face_geo_data06: u8,
    pub face_geo_data07: u8,
    pub face_geo_data08: u8,
    pub face_geo_data09: u8,
    pub face_geo_data10: u8,
    pub face_geo_data11: u8,
    pub face_geo_data12: u8,
    pub face_geo_data13: u8,
    pub face_geo_data14: u8,
    pub face_geo_data15: u8,
    pub face_geo_data16: u8,
    pub face_geo_data17: u8,
    pub face_geo_data18: u8,
    pub face_geo_data19: u8,
    pub face_geo_data20: u8,
    pub face_geo_data21: u8,
    pub face_geo_data22: u8,
    pub face_geo_data23: u8,
    pub face_geo_data24: u8,
    pub face_geo_data25: u8,
    pub face_geo_data26: u8,
    pub face_geo_data27: u8,
    pub face_geo_data28: u8,
    pub face_geo_data29: u8,
    pub face_geo_data30: u8,
    pub face_geo_data31: u8,
    pub face_geo_data32: u8,
    pub face_geo_data33: u8,
    pub face_geo_data34: u8,
    pub face_geo_data35: u8,
    pub face_geo_data36: u8,
    pub face_geo_data37: u8,
    pub face_geo_data38: u8,
    pub face_geo_data39: u8,
    pub face_geo_data40: u8,
    pub face_geo_data41: u8,
    pub face_geo_data42: u8,
    pub face_geo_data43: u8,
    pub face_geo_data44: u8,
    pub face_geo_data45: u8,
    pub face_geo_data46: u8,
    pub face_geo_data47: u8,
    pub face_geo_data48: u8,
    pub face_geo_data49: u8,
    pub face_tex_data00: u8,
    pub face_tex_data01: u8,
    pub face_tex_data02: u8,
    pub face_tex_data03: u8,
    pub face_tex_data04: u8,
    pub face_tex_data05: u8,
    pub face_tex_data06: u8,
    pub face_tex_data07: u8,
    pub face_tex_data08: u8,
    pub face_tex_data09: u8,
    pub face_tex_data10: u8,
    pub face_tex_data11: u8,
    pub face_tex_data12: u8,
    pub face_tex_data13: u8,
    pub face_tex_data14: u8,
    pub face_tex_data15: u8,
    pub face_tex_data16: u8,
    pub face_tex_data17: u8,
    pub face_tex_data18: u8,
    pub face_tex_data19: u8,
    pub face_tex_data20: u8,
    pub face_tex_data21: u8,
    pub face_tex_data22: u8,
    pub face_tex_data23: u8,
    pub face_tex_data24: u8,
    pub face_tex_data25: u8,
    pub face_tex_data26: u8,
    pub face_tex_data27: u8,
    pub face_tex_data28: u8,
    pub face_tex_data29: u8,
    pub face_tex_data30: u8,
    pub face_tex_data31: u8,
    pub face_tex_data32: u8,
    pub face_tex_data33: u8,
    pub face_tex_data34: u8,
    pub face_tex_data35: u8,
    pub face_tex_data36: u8,
    pub face_tex_data37: u8,
    pub face_tex_data38: u8,
    pub face_tex_data39: u8,
    pub face_tex_data40: u8,
    pub face_tex_data41: u8,
    pub face_tex_data42: u8,
    pub face_tex_data43: u8,
    pub face_tex_data44: u8,
    pub face_tex_data45: u8,
    pub face_tex_data46: u8,
    pub face_tex_data47: u8,
    pub face_tex_data48: u8,
    pub face_tex_data49: u8,
    pub face_parts_id: u8,
    pub skin_color_r: u8,
    pub skin_color_g: u8,
    pub skin_color_b: u8,
    pub hair_parts_id: u8,
    pub hair_color_r: u8,
    pub hair_color_g: u8,
    pub hair_color_b: u8,
    pub hair_color_g_0: u8,
    pub eye_lparts_id: u8,
    pub eye_lcolor_r: u8,
    pub eye_lcolor_g: u8,
    pub eye_lcolor_b: u8,
    pub eye_rparts_id: u8,
    pub eye_rcolor_r: u8,
    pub eye_rcolor_g: u8,
    pub eye_rcolor_b: u8,
    pub eye_brow_parts_id: u8,
    pub eye_brow_color_r: u8,
    pub eye_brow_color_g: u8,
    pub eye_brow_color_b: u8,
    pub beard_parts_id: u8,
    pub beard_color_r: u8,
    pub beard_color_g: u8,
    pub beard_color_b: u8,
    pub accessories_parts_id: u8,
    pub accessories_color_r: u8,
    pub accessories_color_g: u8,
    pub accessories_color_b: u8,
    pub decal_parts_id: u8,
    pub decal_color_r: u8,
    pub decal_color_g: u8,
    pub decal_color_b: u8,
    pub decal_pos_x: u8,
    pub decal_pos_y: u8,
    pub decal_angle: u8,
    pub decal_scale: u8,
}

impl RenderableParam for FaceGenParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.face_geo_data01 as _;
        if ui.input_int("FaceGeoData01", &mut i).build() {
            self.face_geo_data01 = i as _;
        }

        let mut i: i32 = self.face_geo_data02 as _;
        if ui.input_int("FaceGeoData02", &mut i).build() {
            self.face_geo_data02 = i as _;
        }

        let mut i: i32 = self.face_geo_data03 as _;
        if ui.input_int("FaceGeoData03", &mut i).build() {
            self.face_geo_data03 = i as _;
        }

        let mut i: i32 = self.face_geo_data04 as _;
        if ui.input_int("FaceGeoData04", &mut i).build() {
            self.face_geo_data04 = i as _;
        }

        let mut i: i32 = self.face_geo_data05 as _;
        if ui.input_int("FaceGeoData05", &mut i).build() {
            self.face_geo_data05 = i as _;
        }

        let mut i: i32 = self.face_geo_data06 as _;
        if ui.input_int("FaceGeoData06", &mut i).build() {
            self.face_geo_data06 = i as _;
        }

        let mut i: i32 = self.face_geo_data07 as _;
        if ui.input_int("FaceGeoData07", &mut i).build() {
            self.face_geo_data07 = i as _;
        }

        let mut i: i32 = self.face_geo_data08 as _;
        if ui.input_int("FaceGeoData08", &mut i).build() {
            self.face_geo_data08 = i as _;
        }

        let mut i: i32 = self.face_geo_data09 as _;
        if ui.input_int("FaceGeoData09", &mut i).build() {
            self.face_geo_data09 = i as _;
        }

        let mut i: i32 = self.face_geo_data10 as _;
        if ui.input_int("FaceGeoData10", &mut i).build() {
            self.face_geo_data10 = i as _;
        }

        let mut i: i32 = self.face_geo_data11 as _;
        if ui.input_int("FaceGeoData11", &mut i).build() {
            self.face_geo_data11 = i as _;
        }

        let mut i: i32 = self.face_geo_data12 as _;
        if ui.input_int("FaceGeoData12", &mut i).build() {
            self.face_geo_data12 = i as _;
        }

        let mut i: i32 = self.face_geo_data13 as _;
        if ui.input_int("FaceGeoData13", &mut i).build() {
            self.face_geo_data13 = i as _;
        }

        let mut i: i32 = self.face_geo_data14 as _;
        if ui.input_int("FaceGeoData14", &mut i).build() {
            self.face_geo_data14 = i as _;
        }

        let mut i: i32 = self.face_geo_data15 as _;
        if ui.input_int("FaceGeoData15", &mut i).build() {
            self.face_geo_data15 = i as _;
        }

        let mut i: i32 = self.face_geo_data16 as _;
        if ui.input_int("FaceGeoData16", &mut i).build() {
            self.face_geo_data16 = i as _;
        }

        let mut i: i32 = self.face_geo_data17 as _;
        if ui.input_int("FaceGeoData17", &mut i).build() {
            self.face_geo_data17 = i as _;
        }

        let mut i: i32 = self.face_geo_data18 as _;
        if ui.input_int("FaceGeoData18", &mut i).build() {
            self.face_geo_data18 = i as _;
        }

        let mut i: i32 = self.face_geo_data19 as _;
        if ui.input_int("FaceGeoData19", &mut i).build() {
            self.face_geo_data19 = i as _;
        }

        let mut i: i32 = self.face_geo_data20 as _;
        if ui.input_int("FaceGeoData20", &mut i).build() {
            self.face_geo_data20 = i as _;
        }

        let mut i: i32 = self.face_geo_data21 as _;
        if ui.input_int("FaceGeoData21", &mut i).build() {
            self.face_geo_data21 = i as _;
        }

        let mut i: i32 = self.face_geo_data22 as _;
        if ui.input_int("FaceGeoData22", &mut i).build() {
            self.face_geo_data22 = i as _;
        }

        let mut i: i32 = self.face_geo_data23 as _;
        if ui.input_int("FaceGeoData23", &mut i).build() {
            self.face_geo_data23 = i as _;
        }

        let mut i: i32 = self.face_geo_data24 as _;
        if ui.input_int("FaceGeoData24", &mut i).build() {
            self.face_geo_data24 = i as _;
        }

        let mut i: i32 = self.face_geo_data25 as _;
        if ui.input_int("FaceGeoData25", &mut i).build() {
            self.face_geo_data25 = i as _;
        }

        let mut i: i32 = self.face_geo_data26 as _;
        if ui.input_int("FaceGeoData26", &mut i).build() {
            self.face_geo_data26 = i as _;
        }

        let mut i: i32 = self.face_geo_data27 as _;
        if ui.input_int("FaceGeoData27", &mut i).build() {
            self.face_geo_data27 = i as _;
        }

        let mut i: i32 = self.face_geo_data28 as _;
        if ui.input_int("FaceGeoData28", &mut i).build() {
            self.face_geo_data28 = i as _;
        }

        let mut i: i32 = self.face_geo_data29 as _;
        if ui.input_int("FaceGeoData29", &mut i).build() {
            self.face_geo_data29 = i as _;
        }

        let mut i: i32 = self.face_geo_data30 as _;
        if ui.input_int("FaceGeoData30", &mut i).build() {
            self.face_geo_data30 = i as _;
        }

        let mut i: i32 = self.face_geo_data31 as _;
        if ui.input_int("FaceGeoData31", &mut i).build() {
            self.face_geo_data31 = i as _;
        }

        let mut i: i32 = self.face_geo_data32 as _;
        if ui.input_int("FaceGeoData32", &mut i).build() {
            self.face_geo_data32 = i as _;
        }

        let mut i: i32 = self.face_geo_data33 as _;
        if ui.input_int("FaceGeoData33", &mut i).build() {
            self.face_geo_data33 = i as _;
        }

        let mut i: i32 = self.face_geo_data34 as _;
        if ui.input_int("FaceGeoData34", &mut i).build() {
            self.face_geo_data34 = i as _;
        }

        let mut i: i32 = self.face_geo_data35 as _;
        if ui.input_int("FaceGeoData35", &mut i).build() {
            self.face_geo_data35 = i as _;
        }

        let mut i: i32 = self.face_geo_data36 as _;
        if ui.input_int("FaceGeoData36", &mut i).build() {
            self.face_geo_data36 = i as _;
        }

        let mut i: i32 = self.face_geo_data37 as _;
        if ui.input_int("FaceGeoData37", &mut i).build() {
            self.face_geo_data37 = i as _;
        }

        let mut i: i32 = self.face_geo_data38 as _;
        if ui.input_int("FaceGeoData38", &mut i).build() {
            self.face_geo_data38 = i as _;
        }

        let mut i: i32 = self.face_geo_data39 as _;
        if ui.input_int("FaceGeoData39", &mut i).build() {
            self.face_geo_data39 = i as _;
        }

        let mut i: i32 = self.face_geo_data40 as _;
        if ui.input_int("FaceGeoData40", &mut i).build() {
            self.face_geo_data40 = i as _;
        }

        let mut i: i32 = self.face_geo_data41 as _;
        if ui.input_int("FaceGeoData41", &mut i).build() {
            self.face_geo_data41 = i as _;
        }

        let mut i: i32 = self.face_geo_data42 as _;
        if ui.input_int("FaceGeoData42", &mut i).build() {
            self.face_geo_data42 = i as _;
        }

        let mut i: i32 = self.face_geo_data43 as _;
        if ui.input_int("FaceGeoData43", &mut i).build() {
            self.face_geo_data43 = i as _;
        }

        let mut i: i32 = self.face_geo_data44 as _;
        if ui.input_int("FaceGeoData44", &mut i).build() {
            self.face_geo_data44 = i as _;
        }

        let mut i: i32 = self.face_geo_data45 as _;
        if ui.input_int("FaceGeoData45", &mut i).build() {
            self.face_geo_data45 = i as _;
        }

        let mut i: i32 = self.face_geo_data46 as _;
        if ui.input_int("FaceGeoData46", &mut i).build() {
            self.face_geo_data46 = i as _;
        }

        let mut i: i32 = self.face_geo_data47 as _;
        if ui.input_int("FaceGeoData47", &mut i).build() {
            self.face_geo_data47 = i as _;
        }

        let mut i: i32 = self.face_geo_data48 as _;
        if ui.input_int("FaceGeoData48", &mut i).build() {
            self.face_geo_data48 = i as _;
        }

        let mut i: i32 = self.face_geo_data49 as _;
        if ui.input_int("FaceGeoData49", &mut i).build() {
            self.face_geo_data49 = i as _;
        }

        let mut i: i32 = self.face_tex_data00 as _;
        if ui.input_int("FaceTexData00", &mut i).build() {
            self.face_tex_data00 = i as _;
        }

        let mut i: i32 = self.face_tex_data01 as _;
        if ui.input_int("FaceTexData01", &mut i).build() {
            self.face_tex_data01 = i as _;
        }

        let mut i: i32 = self.face_tex_data02 as _;
        if ui.input_int("FaceTexData02", &mut i).build() {
            self.face_tex_data02 = i as _;
        }

        let mut i: i32 = self.face_tex_data03 as _;
        if ui.input_int("FaceTexData03", &mut i).build() {
            self.face_tex_data03 = i as _;
        }

        let mut i: i32 = self.face_tex_data04 as _;
        if ui.input_int("FaceTexData04", &mut i).build() {
            self.face_tex_data04 = i as _;
        }

        let mut i: i32 = self.face_tex_data05 as _;
        if ui.input_int("FaceTexData05", &mut i).build() {
            self.face_tex_data05 = i as _;
        }

        let mut i: i32 = self.face_tex_data06 as _;
        if ui.input_int("FaceTexData06", &mut i).build() {
            self.face_tex_data06 = i as _;
        }

        let mut i: i32 = self.face_tex_data07 as _;
        if ui.input_int("FaceTexData07", &mut i).build() {
            self.face_tex_data07 = i as _;
        }

        let mut i: i32 = self.face_tex_data08 as _;
        if ui.input_int("FaceTexData08", &mut i).build() {
            self.face_tex_data08 = i as _;
        }

        let mut i: i32 = self.face_tex_data09 as _;
        if ui.input_int("FaceTexData09", &mut i).build() {
            self.face_tex_data09 = i as _;
        }

        let mut i: i32 = self.face_tex_data10 as _;
        if ui.input_int("FaceTexData10", &mut i).build() {
            self.face_tex_data10 = i as _;
        }

        let mut i: i32 = self.face_tex_data11 as _;
        if ui.input_int("FaceTexData11", &mut i).build() {
            self.face_tex_data11 = i as _;
        }

        let mut i: i32 = self.face_tex_data12 as _;
        if ui.input_int("FaceTexData12", &mut i).build() {
            self.face_tex_data12 = i as _;
        }

        let mut i: i32 = self.face_tex_data13 as _;
        if ui.input_int("FaceTexData13", &mut i).build() {
            self.face_tex_data13 = i as _;
        }

        let mut i: i32 = self.face_tex_data14 as _;
        if ui.input_int("FaceTexData14", &mut i).build() {
            self.face_tex_data14 = i as _;
        }

        let mut i: i32 = self.face_tex_data15 as _;
        if ui.input_int("FaceTexData15", &mut i).build() {
            self.face_tex_data15 = i as _;
        }

        let mut i: i32 = self.face_tex_data16 as _;
        if ui.input_int("FaceTexData16", &mut i).build() {
            self.face_tex_data16 = i as _;
        }

        let mut i: i32 = self.face_tex_data17 as _;
        if ui.input_int("FaceTexData17", &mut i).build() {
            self.face_tex_data17 = i as _;
        }

        let mut i: i32 = self.face_tex_data18 as _;
        if ui.input_int("FaceTexData18", &mut i).build() {
            self.face_tex_data18 = i as _;
        }

        let mut i: i32 = self.face_tex_data19 as _;
        if ui.input_int("FaceTexData19", &mut i).build() {
            self.face_tex_data19 = i as _;
        }

        let mut i: i32 = self.face_tex_data20 as _;
        if ui.input_int("FaceTexData20", &mut i).build() {
            self.face_tex_data20 = i as _;
        }

        let mut i: i32 = self.face_tex_data21 as _;
        if ui.input_int("FaceTexData21", &mut i).build() {
            self.face_tex_data21 = i as _;
        }

        let mut i: i32 = self.face_tex_data22 as _;
        if ui.input_int("FaceTexData22", &mut i).build() {
            self.face_tex_data22 = i as _;
        }

        let mut i: i32 = self.face_tex_data23 as _;
        if ui.input_int("FaceTexData23", &mut i).build() {
            self.face_tex_data23 = i as _;
        }

        let mut i: i32 = self.face_tex_data24 as _;
        if ui.input_int("FaceTexData24", &mut i).build() {
            self.face_tex_data24 = i as _;
        }

        let mut i: i32 = self.face_tex_data25 as _;
        if ui.input_int("FaceTexData25", &mut i).build() {
            self.face_tex_data25 = i as _;
        }

        let mut i: i32 = self.face_tex_data26 as _;
        if ui.input_int("FaceTexData26", &mut i).build() {
            self.face_tex_data26 = i as _;
        }

        let mut i: i32 = self.face_tex_data27 as _;
        if ui.input_int("FaceTexData27", &mut i).build() {
            self.face_tex_data27 = i as _;
        }

        let mut i: i32 = self.face_tex_data28 as _;
        if ui.input_int("FaceTexData28", &mut i).build() {
            self.face_tex_data28 = i as _;
        }

        let mut i: i32 = self.face_tex_data29 as _;
        if ui.input_int("FaceTexData29", &mut i).build() {
            self.face_tex_data29 = i as _;
        }

        let mut i: i32 = self.face_tex_data30 as _;
        if ui.input_int("FaceTexData30", &mut i).build() {
            self.face_tex_data30 = i as _;
        }

        let mut i: i32 = self.face_tex_data31 as _;
        if ui.input_int("FaceTexData31", &mut i).build() {
            self.face_tex_data31 = i as _;
        }

        let mut i: i32 = self.face_tex_data32 as _;
        if ui.input_int("FaceTexData32", &mut i).build() {
            self.face_tex_data32 = i as _;
        }

        let mut i: i32 = self.face_tex_data33 as _;
        if ui.input_int("FaceTexData33", &mut i).build() {
            self.face_tex_data33 = i as _;
        }

        let mut i: i32 = self.face_tex_data34 as _;
        if ui.input_int("FaceTexData34", &mut i).build() {
            self.face_tex_data34 = i as _;
        }

        let mut i: i32 = self.face_tex_data35 as _;
        if ui.input_int("FaceTexData35", &mut i).build() {
            self.face_tex_data35 = i as _;
        }

        let mut i: i32 = self.face_tex_data36 as _;
        if ui.input_int("FaceTexData36", &mut i).build() {
            self.face_tex_data36 = i as _;
        }

        let mut i: i32 = self.face_tex_data37 as _;
        if ui.input_int("FaceTexData37", &mut i).build() {
            self.face_tex_data37 = i as _;
        }

        let mut i: i32 = self.face_tex_data38 as _;
        if ui.input_int("FaceTexData38", &mut i).build() {
            self.face_tex_data38 = i as _;
        }

        let mut i: i32 = self.face_tex_data39 as _;
        if ui.input_int("FaceTexData39", &mut i).build() {
            self.face_tex_data39 = i as _;
        }

        let mut i: i32 = self.face_tex_data40 as _;
        if ui.input_int("FaceTexData40", &mut i).build() {
            self.face_tex_data40 = i as _;
        }

        let mut i: i32 = self.face_tex_data41 as _;
        if ui.input_int("FaceTexData41", &mut i).build() {
            self.face_tex_data41 = i as _;
        }

        let mut i: i32 = self.face_tex_data42 as _;
        if ui.input_int("FaceTexData42", &mut i).build() {
            self.face_tex_data42 = i as _;
        }

        let mut i: i32 = self.face_tex_data43 as _;
        if ui.input_int("FaceTexData43", &mut i).build() {
            self.face_tex_data43 = i as _;
        }

        let mut i: i32 = self.face_tex_data44 as _;
        if ui.input_int("FaceTexData44", &mut i).build() {
            self.face_tex_data44 = i as _;
        }

        let mut i: i32 = self.face_tex_data45 as _;
        if ui.input_int("FaceTexData45", &mut i).build() {
            self.face_tex_data45 = i as _;
        }

        let mut i: i32 = self.face_tex_data46 as _;
        if ui.input_int("FaceTexData46", &mut i).build() {
            self.face_tex_data46 = i as _;
        }

        let mut i: i32 = self.face_tex_data47 as _;
        if ui.input_int("FaceTexData47", &mut i).build() {
            self.face_tex_data47 = i as _;
        }

        let mut i: i32 = self.face_tex_data48 as _;
        if ui.input_int("FaceTexData48", &mut i).build() {
            self.face_tex_data48 = i as _;
        }

        let mut i: i32 = self.face_tex_data49 as _;
        if ui.input_int("FaceTexData49", &mut i).build() {
            self.face_tex_data49 = i as _;
        }

        let mut i: i32 = self.face_parts_id as _;
        if ui.input_int("facePartsId", &mut i).build() {
            self.face_parts_id = i as _;
        }

        let mut i: i32 = self.skin_color_r as _;
        if ui.input_int("skinColor_R", &mut i).build() {
            self.skin_color_r = i as _;
        }

        let mut i: i32 = self.skin_color_g as _;
        if ui.input_int("skinColor_G", &mut i).build() {
            self.skin_color_g = i as _;
        }

        let mut i: i32 = self.skin_color_b as _;
        if ui.input_int("skinColor_B", &mut i).build() {
            self.skin_color_b = i as _;
        }

        let mut i: i32 = self.hair_parts_id as _;
        if ui.input_int("hairPartsId", &mut i).build() {
            self.hair_parts_id = i as _;
        }

        let mut i: i32 = self.hair_color_r as _;
        if ui.input_int("hairColor_R", &mut i).build() {
            self.hair_color_r = i as _;
        }

        let mut i: i32 = self.hair_color_g as _;
        if ui.input_int("hairColor_G", &mut i).build() {
            self.hair_color_g = i as _;
        }

        let mut i: i32 = self.hair_color_b as _;
        if ui.input_int("hairColor_B", &mut i).build() {
            self.hair_color_b = i as _;
        }

        let mut i: i32 = self.hair_color_g_0 as _;
        if ui.input_int("hairColor_G_0", &mut i).build() {
            self.hair_color_g_0 = i as _;
        }

        let mut i: i32 = self.eye_lparts_id as _;
        if ui.input_int("eyeLPartsId", &mut i).build() {
            self.eye_lparts_id = i as _;
        }

        let mut i: i32 = self.eye_lcolor_r as _;
        if ui.input_int("eyeLColor_R", &mut i).build() {
            self.eye_lcolor_r = i as _;
        }

        let mut i: i32 = self.eye_lcolor_g as _;
        if ui.input_int("eyeLColor_G", &mut i).build() {
            self.eye_lcolor_g = i as _;
        }

        let mut i: i32 = self.eye_lcolor_b as _;
        if ui.input_int("eyeLColor_B", &mut i).build() {
            self.eye_lcolor_b = i as _;
        }

        let mut i: i32 = self.eye_rparts_id as _;
        if ui.input_int("eyeRPartsId", &mut i).build() {
            self.eye_rparts_id = i as _;
        }

        let mut i: i32 = self.eye_rcolor_r as _;
        if ui.input_int("eyeRColor_R", &mut i).build() {
            self.eye_rcolor_r = i as _;
        }

        let mut i: i32 = self.eye_rcolor_g as _;
        if ui.input_int("eyeRColor_G", &mut i).build() {
            self.eye_rcolor_g = i as _;
        }

        let mut i: i32 = self.eye_rcolor_b as _;
        if ui.input_int("eyeRColor_B", &mut i).build() {
            self.eye_rcolor_b = i as _;
        }

        let mut i: i32 = self.eye_brow_parts_id as _;
        if ui.input_int("eyeBrowPartsId", &mut i).build() {
            self.eye_brow_parts_id = i as _;
        }

        let mut i: i32 = self.eye_brow_color_r as _;
        if ui.input_int("eyeBrowColor_R", &mut i).build() {
            self.eye_brow_color_r = i as _;
        }

        let mut i: i32 = self.eye_brow_color_g as _;
        if ui.input_int("eyeBrowColor_G", &mut i).build() {
            self.eye_brow_color_g = i as _;
        }

        let mut i: i32 = self.eye_brow_color_b as _;
        if ui.input_int("eyeBrowColor_B", &mut i).build() {
            self.eye_brow_color_b = i as _;
        }

        let mut i: i32 = self.beard_parts_id as _;
        if ui.input_int("beardPartsId", &mut i).build() {
            self.beard_parts_id = i as _;
        }

        let mut i: i32 = self.beard_color_r as _;
        if ui.input_int("beardColor_R", &mut i).build() {
            self.beard_color_r = i as _;
        }

        let mut i: i32 = self.beard_color_g as _;
        if ui.input_int("beardColor_G", &mut i).build() {
            self.beard_color_g = i as _;
        }

        let mut i: i32 = self.beard_color_b as _;
        if ui.input_int("beardColor_B", &mut i).build() {
            self.beard_color_b = i as _;
        }

        let mut i: i32 = self.accessories_parts_id as _;
        if ui.input_int("accessoriesPartsId", &mut i).build() {
            self.accessories_parts_id = i as _;
        }

        let mut i: i32 = self.accessories_color_r as _;
        if ui.input_int("accessoriesColor_R", &mut i).build() {
            self.accessories_color_r = i as _;
        }

        let mut i: i32 = self.accessories_color_g as _;
        if ui.input_int("accessoriesColor_G", &mut i).build() {
            self.accessories_color_g = i as _;
        }

        let mut i: i32 = self.accessories_color_b as _;
        if ui.input_int("accessoriesColor_B", &mut i).build() {
            self.accessories_color_b = i as _;
        }

        let mut i: i32 = self.decal_parts_id as _;
        if ui.input_int("decalPartsId", &mut i).build() {
            self.decal_parts_id = i as _;
        }

        let mut i: i32 = self.decal_color_r as _;
        if ui.input_int("decalColor_R", &mut i).build() {
            self.decal_color_r = i as _;
        }

        let mut i: i32 = self.decal_color_g as _;
        if ui.input_int("decalColor_G", &mut i).build() {
            self.decal_color_g = i as _;
        }

        let mut i: i32 = self.decal_color_b as _;
        if ui.input_int("decalColor_B", &mut i).build() {
            self.decal_color_b = i as _;
        }

        let mut i: i32 = self.decal_pos_x as _;
        if ui.input_int("decalPosX", &mut i).build() {
            self.decal_pos_x = i as _;
        }

        let mut i: i32 = self.decal_pos_y as _;
        if ui.input_int("decalPosY", &mut i).build() {
            self.decal_pos_y = i as _;
        }

        let mut i: i32 = self.decal_angle as _;
        if ui.input_int("decalAngle", &mut i).build() {
            self.decal_angle = i as _;
        }

        let mut i: i32 = self.decal_scale as _;
        if ui.input_int("decalScale", &mut i).build() {
            self.decal_scale = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct FaceParam {
    pub face_parts_id: u8,
    pub skin_color_r: u8,
    pub skin_color_g: u8,
    pub skin_color_b: u8,
    pub hair_parts_id: u8,
    pub hair_color_r: u8,
    pub hair_color_g: u8,
    pub hair_color_b: u8,
    pub eye_lparts_id: u8,
    pub eye_lcolor_r: u8,
    pub eye_lcolor_g: u8,
    pub eye_lcolor_b: u8,
    pub eye_rparts_id: u8,
    pub eye_rcolor_r: u8,
    pub eye_rcolor_g: u8,
    pub eye_rcolor_b: u8,
    pub eye_brow_parts_id: u8,
    pub eye_brow_color_r: u8,
    pub eye_brow_color_g: u8,
    pub eye_brow_color_b: u8,
    pub beard_parts_id: u8,
    pub beard_color_r: u8,
    pub beard_color_g: u8,
    pub beard_color_b: u8,
    pub accessories_parts_id: u8,
    pub accessories_color_r: u8,
    pub accessories_color_g: u8,
    pub accessories_color_b: u8,
    pub decal_parts_id: u8,
    pub decal_color_r: u8,
    pub decal_color_g: u8,
    pub decal_color_b: u8,
    pub decal_pos_x: u8,
    pub decal_pos_y: u8,
    pub decal_angle: u8,
    pub decal_scale: u8,
    pub chr_body_scale_head: u8,
    pub chr_body_scale_breast: u8,
    pub chr_body_scale_abdomen: u8,
    pub chr_body_scale_arm: u8,
    pub chr_body_scale_leg: u8,
    pub age: u8,
    pub gender: u8,
    pub carricature_geometry: u8,
    pub carricature_texture: u8,
    pub face_geo_data00: u8,
    pub face_geo_data01: u8,
    pub face_geo_data02: u8,
    pub face_geo_data03: u8,
    pub face_geo_data04: u8,
    pub face_geo_data05: u8,
    pub face_geo_data06: u8,
    pub face_geo_data07: u8,
    pub face_geo_data08: u8,
    pub face_geo_data09: u8,
    pub face_geo_data10: u8,
    pub face_geo_data11: u8,
    pub face_geo_data12: u8,
    pub face_geo_data13: u8,
    pub face_geo_data14: u8,
    pub face_geo_data15: u8,
    pub face_geo_data16: u8,
    pub face_geo_data17: u8,
    pub face_geo_data18: u8,
    pub face_geo_data19: u8,
    pub face_geo_data20: u8,
    pub face_geo_data21: u8,
    pub face_geo_data22: u8,
    pub face_geo_data23: u8,
    pub face_geo_data24: u8,
    pub face_geo_data25: u8,
    pub face_geo_data26: u8,
    pub face_geo_data27: u8,
    pub face_geo_data28: u8,
    pub face_geo_data29: u8,
    pub face_geo_data30: u8,
    pub face_geo_data31: u8,
    pub face_geo_data32: u8,
    pub face_geo_data33: u8,
    pub face_geo_data34: u8,
    pub face_geo_data35: u8,
    pub face_geo_data36: u8,
    pub face_geo_data37: u8,
    pub face_geo_data38: u8,
    pub face_geo_data39: u8,
    pub face_geo_data40: u8,
    pub face_geo_data41: u8,
    pub face_geo_data42: u8,
    pub face_geo_data43: u8,
    pub face_geo_data44: u8,
    pub face_geo_data45: u8,
    pub face_geo_data46: u8,
    pub face_geo_data47: u8,
    pub face_geo_data48: u8,
    pub face_geo_data49: u8,
    pub face_geo_data50: u8,
    pub face_geo_data51: u8,
    pub face_geo_data52: u8,
    pub face_geo_data53: u8,
    pub face_geo_data54: u8,
    pub face_geo_data55: u8,
    pub face_geo_data56: u8,
    pub face_geo_data57: u8,
    pub face_geo_data58: u8,
    pub face_geo_data59: u8,
    pub face_geo_data60: u8,
    pub face_tex_data00: u8,
    pub face_tex_data01: u8,
    pub face_tex_data02: u8,
    pub face_tex_data03: u8,
    pub face_tex_data04: u8,
    pub face_tex_data05: u8,
    pub face_tex_data06: u8,
    pub face_tex_data07: u8,
    pub face_tex_data08: u8,
    pub face_tex_data09: u8,
    pub face_tex_data10: u8,
    pub face_tex_data11: u8,
    pub face_tex_data12: u8,
    pub face_tex_data13: u8,
    pub face_tex_data14: u8,
    pub face_tex_data15: u8,
    pub face_tex_data16: u8,
    pub face_tex_data17: u8,
    pub face_tex_data18: u8,
    pub face_tex_data19: u8,
    pub face_tex_data20: u8,
    pub face_tex_data21: u8,
    pub face_tex_data22: u8,
    pub face_tex_data23: u8,
    pub face_tex_data24: u8,
    pub face_tex_data25: u8,
    pub face_tex_data26: u8,
    pub face_tex_data27: u8,
    pub face_tex_data28: u8,
    pub face_tex_data29: u8,
    pub face_tex_data30: u8,
    pub face_tex_data31: u8,
    pub face_tex_data32: u8,
    pub face_tex_data33: u8,
    pub face_tex_data34: u8,
    pub face_tex_data35: u8,
    pub face_geo_asym_data00: u8,
    pub face_geo_asym_data01: u8,
    pub face_geo_asym_data02: u8,
    pub face_geo_asym_data03: u8,
    pub face_geo_asym_data04: u8,
    pub face_geo_asym_data05: u8,
    pub face_geo_asym_data06: u8,
    pub face_geo_asym_data07: u8,
    pub face_geo_asym_data08: u8,
    pub face_geo_asym_data09: u8,
    pub face_geo_asym_data10: u8,
    pub face_geo_asym_data11: u8,
    pub face_geo_asym_data12: u8,
    pub face_geo_asym_data13: u8,
    pub face_geo_asym_data14: u8,
    pub face_geo_asym_data15: u8,
    pub face_geo_asym_data16: u8,
    pub face_geo_asym_data17: u8,
    pub face_geo_asym_data18: u8,
    pub face_geo_asym_data19: u8,
    pub face_geo_asym_data20: u8,
    pub face_geo_asym_data21: u8,
    pub face_geo_asym_data22: u8,
    pub face_geo_asym_data23: u8,
    pub face_geo_asym_data24: u8,
    pub face_geo_asym_data25: u8,
    pub face_geo_asym_data26: u8,
    pub face_geo_asym_data27: u8,
    pub face_geo_asym_data28: u8,
    pub face_geo_asym_data29: u8,
    pub face_geo_asym_data30: u8,
    pub face_geo_asym_data31: u8,
    pub padding: [u8; 18],
}

impl RenderableParam for FaceParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.face_parts_id as _;
        if ui.input_int("facePartsId", &mut i).build() {
            self.face_parts_id = i as _;
        }

        let mut i: i32 = self.skin_color_r as _;
        if ui.input_int("skinColor_R", &mut i).build() {
            self.skin_color_r = i as _;
        }

        let mut i: i32 = self.skin_color_g as _;
        if ui.input_int("skinColor_G", &mut i).build() {
            self.skin_color_g = i as _;
        }

        let mut i: i32 = self.skin_color_b as _;
        if ui.input_int("skinColor_B", &mut i).build() {
            self.skin_color_b = i as _;
        }

        let mut i: i32 = self.hair_parts_id as _;
        if ui.input_int("hairPartsId", &mut i).build() {
            self.hair_parts_id = i as _;
        }

        let mut i: i32 = self.hair_color_r as _;
        if ui.input_int("hairColor_R", &mut i).build() {
            self.hair_color_r = i as _;
        }

        let mut i: i32 = self.hair_color_g as _;
        if ui.input_int("hairColor_G", &mut i).build() {
            self.hair_color_g = i as _;
        }

        let mut i: i32 = self.hair_color_b as _;
        if ui.input_int("hairColor_B", &mut i).build() {
            self.hair_color_b = i as _;
        }

        let mut i: i32 = self.eye_lparts_id as _;
        if ui.input_int("eyeLPartsId", &mut i).build() {
            self.eye_lparts_id = i as _;
        }

        let mut i: i32 = self.eye_lcolor_r as _;
        if ui.input_int("eyeLColor_R", &mut i).build() {
            self.eye_lcolor_r = i as _;
        }

        let mut i: i32 = self.eye_lcolor_g as _;
        if ui.input_int("eyeLColor_G", &mut i).build() {
            self.eye_lcolor_g = i as _;
        }

        let mut i: i32 = self.eye_lcolor_b as _;
        if ui.input_int("eyeLColor_B", &mut i).build() {
            self.eye_lcolor_b = i as _;
        }

        let mut i: i32 = self.eye_rparts_id as _;
        if ui.input_int("eyeRPartsId", &mut i).build() {
            self.eye_rparts_id = i as _;
        }

        let mut i: i32 = self.eye_rcolor_r as _;
        if ui.input_int("eyeRColor_R", &mut i).build() {
            self.eye_rcolor_r = i as _;
        }

        let mut i: i32 = self.eye_rcolor_g as _;
        if ui.input_int("eyeRColor_G", &mut i).build() {
            self.eye_rcolor_g = i as _;
        }

        let mut i: i32 = self.eye_rcolor_b as _;
        if ui.input_int("eyeRColor_B", &mut i).build() {
            self.eye_rcolor_b = i as _;
        }

        let mut i: i32 = self.eye_brow_parts_id as _;
        if ui.input_int("eyeBrowPartsId", &mut i).build() {
            self.eye_brow_parts_id = i as _;
        }

        let mut i: i32 = self.eye_brow_color_r as _;
        if ui.input_int("eyeBrowColor_R", &mut i).build() {
            self.eye_brow_color_r = i as _;
        }

        let mut i: i32 = self.eye_brow_color_g as _;
        if ui.input_int("eyeBrowColor_G", &mut i).build() {
            self.eye_brow_color_g = i as _;
        }

        let mut i: i32 = self.eye_brow_color_b as _;
        if ui.input_int("eyeBrowColor_B", &mut i).build() {
            self.eye_brow_color_b = i as _;
        }

        let mut i: i32 = self.beard_parts_id as _;
        if ui.input_int("beardPartsId", &mut i).build() {
            self.beard_parts_id = i as _;
        }

        let mut i: i32 = self.beard_color_r as _;
        if ui.input_int("beardColor_R", &mut i).build() {
            self.beard_color_r = i as _;
        }

        let mut i: i32 = self.beard_color_g as _;
        if ui.input_int("beardColor_G", &mut i).build() {
            self.beard_color_g = i as _;
        }

        let mut i: i32 = self.beard_color_b as _;
        if ui.input_int("beardColor_B", &mut i).build() {
            self.beard_color_b = i as _;
        }

        let mut i: i32 = self.accessories_parts_id as _;
        if ui.input_int("accessoriesPartsId", &mut i).build() {
            self.accessories_parts_id = i as _;
        }

        let mut i: i32 = self.accessories_color_r as _;
        if ui.input_int("accessoriesColor_R", &mut i).build() {
            self.accessories_color_r = i as _;
        }

        let mut i: i32 = self.accessories_color_g as _;
        if ui.input_int("accessoriesColor_G", &mut i).build() {
            self.accessories_color_g = i as _;
        }

        let mut i: i32 = self.accessories_color_b as _;
        if ui.input_int("accessoriesColor_B", &mut i).build() {
            self.accessories_color_b = i as _;
        }

        let mut i: i32 = self.decal_parts_id as _;
        if ui.input_int("decalPartsId", &mut i).build() {
            self.decal_parts_id = i as _;
        }

        let mut i: i32 = self.decal_color_r as _;
        if ui.input_int("decalColor_R", &mut i).build() {
            self.decal_color_r = i as _;
        }

        let mut i: i32 = self.decal_color_g as _;
        if ui.input_int("decalColor_G", &mut i).build() {
            self.decal_color_g = i as _;
        }

        let mut i: i32 = self.decal_color_b as _;
        if ui.input_int("decalColor_B", &mut i).build() {
            self.decal_color_b = i as _;
        }

        let mut i: i32 = self.decal_pos_x as _;
        if ui.input_int("decalPosX", &mut i).build() {
            self.decal_pos_x = i as _;
        }

        let mut i: i32 = self.decal_pos_y as _;
        if ui.input_int("decalPosY", &mut i).build() {
            self.decal_pos_y = i as _;
        }

        let mut i: i32 = self.decal_angle as _;
        if ui.input_int("decalAngle", &mut i).build() {
            self.decal_angle = i as _;
        }

        let mut i: i32 = self.decal_scale as _;
        if ui.input_int("decalScale", &mut i).build() {
            self.decal_scale = i as _;
        }

        let mut i: i32 = self.chr_body_scale_head as _;
        if ui.input_int("ChrBodyScaleHead", &mut i).build() {
            self.chr_body_scale_head = i as _;
        }

        let mut i: i32 = self.chr_body_scale_breast as _;
        if ui.input_int("ChrBodyScaleBreast", &mut i).build() {
            self.chr_body_scale_breast = i as _;
        }

        let mut i: i32 = self.chr_body_scale_abdomen as _;
        if ui.input_int("ChrBodyScaleAbdomen", &mut i).build() {
            self.chr_body_scale_abdomen = i as _;
        }

        let mut i: i32 = self.chr_body_scale_arm as _;
        if ui.input_int("ChrBodyScaleArm", &mut i).build() {
            self.chr_body_scale_arm = i as _;
        }

        let mut i: i32 = self.chr_body_scale_leg as _;
        if ui.input_int("ChrBodyScaleLeg", &mut i).build() {
            self.chr_body_scale_leg = i as _;
        }

        let mut i: i32 = self.age as _;
        if ui.input_int("Age", &mut i).build() {
            self.age = i as _;
        }

        let mut i: i32 = self.gender as _;
        if ui.input_int("Gender", &mut i).build() {
            self.gender = i as _;
        }

        let mut i: i32 = self.carricature_geometry as _;
        if ui.input_int("carricatureGeometry", &mut i).build() {
            self.carricature_geometry = i as _;
        }

        let mut i: i32 = self.carricature_texture as _;
        if ui.input_int("carricatureTexture", &mut i).build() {
            self.carricature_texture = i as _;
        }

        let mut i: i32 = self.face_geo_data00 as _;
        if ui.input_int("FaceGeoData00", &mut i).build() {
            self.face_geo_data00 = i as _;
        }

        let mut i: i32 = self.face_geo_data01 as _;
        if ui.input_int("FaceGeoData01", &mut i).build() {
            self.face_geo_data01 = i as _;
        }

        let mut i: i32 = self.face_geo_data02 as _;
        if ui.input_int("FaceGeoData02", &mut i).build() {
            self.face_geo_data02 = i as _;
        }

        let mut i: i32 = self.face_geo_data03 as _;
        if ui.input_int("FaceGeoData03", &mut i).build() {
            self.face_geo_data03 = i as _;
        }

        let mut i: i32 = self.face_geo_data04 as _;
        if ui.input_int("FaceGeoData04", &mut i).build() {
            self.face_geo_data04 = i as _;
        }

        let mut i: i32 = self.face_geo_data05 as _;
        if ui.input_int("FaceGeoData05", &mut i).build() {
            self.face_geo_data05 = i as _;
        }

        let mut i: i32 = self.face_geo_data06 as _;
        if ui.input_int("FaceGeoData06", &mut i).build() {
            self.face_geo_data06 = i as _;
        }

        let mut i: i32 = self.face_geo_data07 as _;
        if ui.input_int("FaceGeoData07", &mut i).build() {
            self.face_geo_data07 = i as _;
        }

        let mut i: i32 = self.face_geo_data08 as _;
        if ui.input_int("FaceGeoData08", &mut i).build() {
            self.face_geo_data08 = i as _;
        }

        let mut i: i32 = self.face_geo_data09 as _;
        if ui.input_int("FaceGeoData09", &mut i).build() {
            self.face_geo_data09 = i as _;
        }

        let mut i: i32 = self.face_geo_data10 as _;
        if ui.input_int("FaceGeoData10", &mut i).build() {
            self.face_geo_data10 = i as _;
        }

        let mut i: i32 = self.face_geo_data11 as _;
        if ui.input_int("FaceGeoData11", &mut i).build() {
            self.face_geo_data11 = i as _;
        }

        let mut i: i32 = self.face_geo_data12 as _;
        if ui.input_int("FaceGeoData12", &mut i).build() {
            self.face_geo_data12 = i as _;
        }

        let mut i: i32 = self.face_geo_data13 as _;
        if ui.input_int("FaceGeoData13", &mut i).build() {
            self.face_geo_data13 = i as _;
        }

        let mut i: i32 = self.face_geo_data14 as _;
        if ui.input_int("FaceGeoData14", &mut i).build() {
            self.face_geo_data14 = i as _;
        }

        let mut i: i32 = self.face_geo_data15 as _;
        if ui.input_int("FaceGeoData15", &mut i).build() {
            self.face_geo_data15 = i as _;
        }

        let mut i: i32 = self.face_geo_data16 as _;
        if ui.input_int("FaceGeoData16", &mut i).build() {
            self.face_geo_data16 = i as _;
        }

        let mut i: i32 = self.face_geo_data17 as _;
        if ui.input_int("FaceGeoData17", &mut i).build() {
            self.face_geo_data17 = i as _;
        }

        let mut i: i32 = self.face_geo_data18 as _;
        if ui.input_int("FaceGeoData18", &mut i).build() {
            self.face_geo_data18 = i as _;
        }

        let mut i: i32 = self.face_geo_data19 as _;
        if ui.input_int("FaceGeoData19", &mut i).build() {
            self.face_geo_data19 = i as _;
        }

        let mut i: i32 = self.face_geo_data20 as _;
        if ui.input_int("FaceGeoData20", &mut i).build() {
            self.face_geo_data20 = i as _;
        }

        let mut i: i32 = self.face_geo_data21 as _;
        if ui.input_int("FaceGeoData21", &mut i).build() {
            self.face_geo_data21 = i as _;
        }

        let mut i: i32 = self.face_geo_data22 as _;
        if ui.input_int("FaceGeoData22", &mut i).build() {
            self.face_geo_data22 = i as _;
        }

        let mut i: i32 = self.face_geo_data23 as _;
        if ui.input_int("FaceGeoData23", &mut i).build() {
            self.face_geo_data23 = i as _;
        }

        let mut i: i32 = self.face_geo_data24 as _;
        if ui.input_int("FaceGeoData24", &mut i).build() {
            self.face_geo_data24 = i as _;
        }

        let mut i: i32 = self.face_geo_data25 as _;
        if ui.input_int("FaceGeoData25", &mut i).build() {
            self.face_geo_data25 = i as _;
        }

        let mut i: i32 = self.face_geo_data26 as _;
        if ui.input_int("FaceGeoData26", &mut i).build() {
            self.face_geo_data26 = i as _;
        }

        let mut i: i32 = self.face_geo_data27 as _;
        if ui.input_int("FaceGeoData27", &mut i).build() {
            self.face_geo_data27 = i as _;
        }

        let mut i: i32 = self.face_geo_data28 as _;
        if ui.input_int("FaceGeoData28", &mut i).build() {
            self.face_geo_data28 = i as _;
        }

        let mut i: i32 = self.face_geo_data29 as _;
        if ui.input_int("FaceGeoData29", &mut i).build() {
            self.face_geo_data29 = i as _;
        }

        let mut i: i32 = self.face_geo_data30 as _;
        if ui.input_int("FaceGeoData30", &mut i).build() {
            self.face_geo_data30 = i as _;
        }

        let mut i: i32 = self.face_geo_data31 as _;
        if ui.input_int("FaceGeoData31", &mut i).build() {
            self.face_geo_data31 = i as _;
        }

        let mut i: i32 = self.face_geo_data32 as _;
        if ui.input_int("FaceGeoData32", &mut i).build() {
            self.face_geo_data32 = i as _;
        }

        let mut i: i32 = self.face_geo_data33 as _;
        if ui.input_int("FaceGeoData33", &mut i).build() {
            self.face_geo_data33 = i as _;
        }

        let mut i: i32 = self.face_geo_data34 as _;
        if ui.input_int("FaceGeoData34", &mut i).build() {
            self.face_geo_data34 = i as _;
        }

        let mut i: i32 = self.face_geo_data35 as _;
        if ui.input_int("FaceGeoData35", &mut i).build() {
            self.face_geo_data35 = i as _;
        }

        let mut i: i32 = self.face_geo_data36 as _;
        if ui.input_int("FaceGeoData36", &mut i).build() {
            self.face_geo_data36 = i as _;
        }

        let mut i: i32 = self.face_geo_data37 as _;
        if ui.input_int("FaceGeoData37", &mut i).build() {
            self.face_geo_data37 = i as _;
        }

        let mut i: i32 = self.face_geo_data38 as _;
        if ui.input_int("FaceGeoData38", &mut i).build() {
            self.face_geo_data38 = i as _;
        }

        let mut i: i32 = self.face_geo_data39 as _;
        if ui.input_int("FaceGeoData39", &mut i).build() {
            self.face_geo_data39 = i as _;
        }

        let mut i: i32 = self.face_geo_data40 as _;
        if ui.input_int("FaceGeoData40", &mut i).build() {
            self.face_geo_data40 = i as _;
        }

        let mut i: i32 = self.face_geo_data41 as _;
        if ui.input_int("FaceGeoData41", &mut i).build() {
            self.face_geo_data41 = i as _;
        }

        let mut i: i32 = self.face_geo_data42 as _;
        if ui.input_int("FaceGeoData42", &mut i).build() {
            self.face_geo_data42 = i as _;
        }

        let mut i: i32 = self.face_geo_data43 as _;
        if ui.input_int("FaceGeoData43", &mut i).build() {
            self.face_geo_data43 = i as _;
        }

        let mut i: i32 = self.face_geo_data44 as _;
        if ui.input_int("FaceGeoData44", &mut i).build() {
            self.face_geo_data44 = i as _;
        }

        let mut i: i32 = self.face_geo_data45 as _;
        if ui.input_int("FaceGeoData45", &mut i).build() {
            self.face_geo_data45 = i as _;
        }

        let mut i: i32 = self.face_geo_data46 as _;
        if ui.input_int("FaceGeoData46", &mut i).build() {
            self.face_geo_data46 = i as _;
        }

        let mut i: i32 = self.face_geo_data47 as _;
        if ui.input_int("FaceGeoData47", &mut i).build() {
            self.face_geo_data47 = i as _;
        }

        let mut i: i32 = self.face_geo_data48 as _;
        if ui.input_int("FaceGeoData48", &mut i).build() {
            self.face_geo_data48 = i as _;
        }

        let mut i: i32 = self.face_geo_data49 as _;
        if ui.input_int("FaceGeoData49", &mut i).build() {
            self.face_geo_data49 = i as _;
        }

        let mut i: i32 = self.face_geo_data50 as _;
        if ui.input_int("FaceGeoData50", &mut i).build() {
            self.face_geo_data50 = i as _;
        }

        let mut i: i32 = self.face_geo_data51 as _;
        if ui.input_int("FaceGeoData51", &mut i).build() {
            self.face_geo_data51 = i as _;
        }

        let mut i: i32 = self.face_geo_data52 as _;
        if ui.input_int("FaceGeoData52", &mut i).build() {
            self.face_geo_data52 = i as _;
        }

        let mut i: i32 = self.face_geo_data53 as _;
        if ui.input_int("FaceGeoData53", &mut i).build() {
            self.face_geo_data53 = i as _;
        }

        let mut i: i32 = self.face_geo_data54 as _;
        if ui.input_int("FaceGeoData54", &mut i).build() {
            self.face_geo_data54 = i as _;
        }

        let mut i: i32 = self.face_geo_data55 as _;
        if ui.input_int("FaceGeoData55", &mut i).build() {
            self.face_geo_data55 = i as _;
        }

        let mut i: i32 = self.face_geo_data56 as _;
        if ui.input_int("FaceGeoData56", &mut i).build() {
            self.face_geo_data56 = i as _;
        }

        let mut i: i32 = self.face_geo_data57 as _;
        if ui.input_int("FaceGeoData57", &mut i).build() {
            self.face_geo_data57 = i as _;
        }

        let mut i: i32 = self.face_geo_data58 as _;
        if ui.input_int("FaceGeoData58", &mut i).build() {
            self.face_geo_data58 = i as _;
        }

        let mut i: i32 = self.face_geo_data59 as _;
        if ui.input_int("FaceGeoData59", &mut i).build() {
            self.face_geo_data59 = i as _;
        }

        let mut i: i32 = self.face_geo_data60 as _;
        if ui.input_int("FaceGeoData60", &mut i).build() {
            self.face_geo_data60 = i as _;
        }

        let mut i: i32 = self.face_tex_data00 as _;
        if ui.input_int("FaceTexData00", &mut i).build() {
            self.face_tex_data00 = i as _;
        }

        let mut i: i32 = self.face_tex_data01 as _;
        if ui.input_int("FaceTexData01", &mut i).build() {
            self.face_tex_data01 = i as _;
        }

        let mut i: i32 = self.face_tex_data02 as _;
        if ui.input_int("FaceTexData02", &mut i).build() {
            self.face_tex_data02 = i as _;
        }

        let mut i: i32 = self.face_tex_data03 as _;
        if ui.input_int("FaceTexData03", &mut i).build() {
            self.face_tex_data03 = i as _;
        }

        let mut i: i32 = self.face_tex_data04 as _;
        if ui.input_int("FaceTexData04", &mut i).build() {
            self.face_tex_data04 = i as _;
        }

        let mut i: i32 = self.face_tex_data05 as _;
        if ui.input_int("FaceTexData05", &mut i).build() {
            self.face_tex_data05 = i as _;
        }

        let mut i: i32 = self.face_tex_data06 as _;
        if ui.input_int("FaceTexData06", &mut i).build() {
            self.face_tex_data06 = i as _;
        }

        let mut i: i32 = self.face_tex_data07 as _;
        if ui.input_int("FaceTexData07", &mut i).build() {
            self.face_tex_data07 = i as _;
        }

        let mut i: i32 = self.face_tex_data08 as _;
        if ui.input_int("FaceTexData08", &mut i).build() {
            self.face_tex_data08 = i as _;
        }

        let mut i: i32 = self.face_tex_data09 as _;
        if ui.input_int("FaceTexData09", &mut i).build() {
            self.face_tex_data09 = i as _;
        }

        let mut i: i32 = self.face_tex_data10 as _;
        if ui.input_int("FaceTexData10", &mut i).build() {
            self.face_tex_data10 = i as _;
        }

        let mut i: i32 = self.face_tex_data11 as _;
        if ui.input_int("FaceTexData11", &mut i).build() {
            self.face_tex_data11 = i as _;
        }

        let mut i: i32 = self.face_tex_data12 as _;
        if ui.input_int("FaceTexData12", &mut i).build() {
            self.face_tex_data12 = i as _;
        }

        let mut i: i32 = self.face_tex_data13 as _;
        if ui.input_int("FaceTexData13", &mut i).build() {
            self.face_tex_data13 = i as _;
        }

        let mut i: i32 = self.face_tex_data14 as _;
        if ui.input_int("FaceTexData14", &mut i).build() {
            self.face_tex_data14 = i as _;
        }

        let mut i: i32 = self.face_tex_data15 as _;
        if ui.input_int("FaceTexData15", &mut i).build() {
            self.face_tex_data15 = i as _;
        }

        let mut i: i32 = self.face_tex_data16 as _;
        if ui.input_int("FaceTexData16", &mut i).build() {
            self.face_tex_data16 = i as _;
        }

        let mut i: i32 = self.face_tex_data17 as _;
        if ui.input_int("FaceTexData17", &mut i).build() {
            self.face_tex_data17 = i as _;
        }

        let mut i: i32 = self.face_tex_data18 as _;
        if ui.input_int("FaceTexData18", &mut i).build() {
            self.face_tex_data18 = i as _;
        }

        let mut i: i32 = self.face_tex_data19 as _;
        if ui.input_int("FaceTexData19", &mut i).build() {
            self.face_tex_data19 = i as _;
        }

        let mut i: i32 = self.face_tex_data20 as _;
        if ui.input_int("FaceTexData20", &mut i).build() {
            self.face_tex_data20 = i as _;
        }

        let mut i: i32 = self.face_tex_data21 as _;
        if ui.input_int("FaceTexData21", &mut i).build() {
            self.face_tex_data21 = i as _;
        }

        let mut i: i32 = self.face_tex_data22 as _;
        if ui.input_int("FaceTexData22", &mut i).build() {
            self.face_tex_data22 = i as _;
        }

        let mut i: i32 = self.face_tex_data23 as _;
        if ui.input_int("FaceTexData23", &mut i).build() {
            self.face_tex_data23 = i as _;
        }

        let mut i: i32 = self.face_tex_data24 as _;
        if ui.input_int("FaceTexData24", &mut i).build() {
            self.face_tex_data24 = i as _;
        }

        let mut i: i32 = self.face_tex_data25 as _;
        if ui.input_int("FaceTexData25", &mut i).build() {
            self.face_tex_data25 = i as _;
        }

        let mut i: i32 = self.face_tex_data26 as _;
        if ui.input_int("FaceTexData26", &mut i).build() {
            self.face_tex_data26 = i as _;
        }

        let mut i: i32 = self.face_tex_data27 as _;
        if ui.input_int("FaceTexData27", &mut i).build() {
            self.face_tex_data27 = i as _;
        }

        let mut i: i32 = self.face_tex_data28 as _;
        if ui.input_int("FaceTexData28", &mut i).build() {
            self.face_tex_data28 = i as _;
        }

        let mut i: i32 = self.face_tex_data29 as _;
        if ui.input_int("FaceTexData29", &mut i).build() {
            self.face_tex_data29 = i as _;
        }

        let mut i: i32 = self.face_tex_data30 as _;
        if ui.input_int("FaceTexData30", &mut i).build() {
            self.face_tex_data30 = i as _;
        }

        let mut i: i32 = self.face_tex_data31 as _;
        if ui.input_int("FaceTexData31", &mut i).build() {
            self.face_tex_data31 = i as _;
        }

        let mut i: i32 = self.face_tex_data32 as _;
        if ui.input_int("FaceTexData32", &mut i).build() {
            self.face_tex_data32 = i as _;
        }

        let mut i: i32 = self.face_tex_data33 as _;
        if ui.input_int("FaceTexData33", &mut i).build() {
            self.face_tex_data33 = i as _;
        }

        let mut i: i32 = self.face_tex_data34 as _;
        if ui.input_int("FaceTexData34", &mut i).build() {
            self.face_tex_data34 = i as _;
        }

        let mut i: i32 = self.face_tex_data35 as _;
        if ui.input_int("FaceTexData35", &mut i).build() {
            self.face_tex_data35 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data00 as _;
        if ui.input_int("FaceGeoAsymData00", &mut i).build() {
            self.face_geo_asym_data00 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data01 as _;
        if ui.input_int("FaceGeoAsymData01", &mut i).build() {
            self.face_geo_asym_data01 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data02 as _;
        if ui.input_int("FaceGeoAsymData02", &mut i).build() {
            self.face_geo_asym_data02 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data03 as _;
        if ui.input_int("FaceGeoAsymData03", &mut i).build() {
            self.face_geo_asym_data03 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data04 as _;
        if ui.input_int("FaceGeoAsymData04", &mut i).build() {
            self.face_geo_asym_data04 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data05 as _;
        if ui.input_int("FaceGeoAsymData05", &mut i).build() {
            self.face_geo_asym_data05 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data06 as _;
        if ui.input_int("FaceGeoAsymData06", &mut i).build() {
            self.face_geo_asym_data06 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data07 as _;
        if ui.input_int("FaceGeoAsymData07", &mut i).build() {
            self.face_geo_asym_data07 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data08 as _;
        if ui.input_int("FaceGeoAsymData08", &mut i).build() {
            self.face_geo_asym_data08 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data09 as _;
        if ui.input_int("FaceGeoAsymData09", &mut i).build() {
            self.face_geo_asym_data09 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data10 as _;
        if ui.input_int("FaceGeoAsymData10", &mut i).build() {
            self.face_geo_asym_data10 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data11 as _;
        if ui.input_int("FaceGeoAsymData11", &mut i).build() {
            self.face_geo_asym_data11 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data12 as _;
        if ui.input_int("FaceGeoAsymData12", &mut i).build() {
            self.face_geo_asym_data12 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data13 as _;
        if ui.input_int("FaceGeoAsymData13", &mut i).build() {
            self.face_geo_asym_data13 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data14 as _;
        if ui.input_int("FaceGeoAsymData14", &mut i).build() {
            self.face_geo_asym_data14 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data15 as _;
        if ui.input_int("FaceGeoAsymData15", &mut i).build() {
            self.face_geo_asym_data15 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data16 as _;
        if ui.input_int("FaceGeoAsymData16", &mut i).build() {
            self.face_geo_asym_data16 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data17 as _;
        if ui.input_int("FaceGeoAsymData17", &mut i).build() {
            self.face_geo_asym_data17 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data18 as _;
        if ui.input_int("FaceGeoAsymData18", &mut i).build() {
            self.face_geo_asym_data18 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data19 as _;
        if ui.input_int("FaceGeoAsymData19", &mut i).build() {
            self.face_geo_asym_data19 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data20 as _;
        if ui.input_int("FaceGeoAsymData20", &mut i).build() {
            self.face_geo_asym_data20 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data21 as _;
        if ui.input_int("FaceGeoAsymData21", &mut i).build() {
            self.face_geo_asym_data21 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data22 as _;
        if ui.input_int("FaceGeoAsymData22", &mut i).build() {
            self.face_geo_asym_data22 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data23 as _;
        if ui.input_int("FaceGeoAsymData23", &mut i).build() {
            self.face_geo_asym_data23 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data24 as _;
        if ui.input_int("FaceGeoAsymData24", &mut i).build() {
            self.face_geo_asym_data24 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data25 as _;
        if ui.input_int("FaceGeoAsymData25", &mut i).build() {
            self.face_geo_asym_data25 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data26 as _;
        if ui.input_int("FaceGeoAsymData26", &mut i).build() {
            self.face_geo_asym_data26 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data27 as _;
        if ui.input_int("FaceGeoAsymData27", &mut i).build() {
            self.face_geo_asym_data27 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data28 as _;
        if ui.input_int("FaceGeoAsymData28", &mut i).build() {
            self.face_geo_asym_data28 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data29 as _;
        if ui.input_int("FaceGeoAsymData29", &mut i).build() {
            self.face_geo_asym_data29 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data30 as _;
        if ui.input_int("FaceGeoAsymData30", &mut i).build() {
            self.face_geo_asym_data30 = i as _;
        }

        let mut i: i32 = self.face_geo_asym_data31 as _;
        if ui.input_int("FaceGeoAsymData31", &mut i).build() {
            self.face_geo_asym_data31 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct FaceRangeParam {
    pub unknown: [u8; 196],
    pub face_geo_data00: f32,
    pub face_geo_data01: f32,
    pub face_geo_data02: f32,
    pub face_geo_data03: f32,
    pub face_geo_data04: f32,
    pub face_geo_data05: f32,
    pub face_geo_data06: f32,
    pub face_geo_data07: f32,
    pub face_geo_data08: f32,
    pub face_geo_data09: f32,
    pub face_geo_data10: f32,
    pub face_geo_data11: f32,
    pub face_geo_data12: f32,
    pub face_geo_data13: f32,
    pub face_geo_data14: f32,
    pub face_geo_data15: f32,
    pub face_geo_data16: f32,
    pub face_geo_data17: f32,
    pub face_geo_data18: f32,
    pub face_geo_data19: f32,
    pub face_geo_data20: f32,
    pub face_geo_data21: f32,
    pub face_geo_data22: f32,
    pub face_geo_data23: f32,
    pub face_geo_data24: f32,
    pub face_geo_data25: f32,
    pub face_geo_data26: f32,
    pub face_geo_data27: f32,
    pub face_geo_data28: f32,
    pub face_geo_data29: f32,
    pub face_geo_data30: f32,
    pub face_geo_data31: f32,
    pub face_geo_data32: f32,
    pub face_geo_data33: f32,
    pub face_geo_data34: f32,
    pub face_geo_data35: f32,
    pub face_geo_data36: f32,
    pub face_geo_data37: f32,
    pub face_geo_data38: f32,
    pub face_geo_data39: f32,
    pub face_geo_data40: f32,
    pub face_geo_data41: f32,
    pub face_geo_data42: f32,
    pub face_geo_data43: f32,
    pub face_geo_data44: f32,
    pub face_geo_data45: f32,
    pub face_geo_data46: f32,
    pub face_geo_data47: f32,
    pub face_geo_data48: f32,
    pub face_geo_data49: f32,
    pub face_geo_data50: f32,
    pub face_geo_data51: f32,
    pub face_geo_data52: f32,
    pub face_geo_data53: f32,
    pub face_geo_data54: f32,
    pub face_geo_data55: f32,
    pub face_geo_data56: f32,
    pub face_geo_data57: f32,
    pub face_geo_data58: f32,
    pub face_geo_data59: f32,
    pub face_geo_data60: f32,
    pub face_tex_data00: f32,
    pub face_tex_data01: f32,
    pub face_tex_data02: f32,
    pub face_tex_data03: f32,
    pub face_tex_data04: f32,
    pub face_tex_data05: f32,
    pub face_tex_data06: f32,
    pub face_tex_data07: f32,
    pub face_tex_data08: f32,
    pub face_tex_data09: f32,
    pub face_tex_data10: f32,
    pub face_tex_data11: f32,
    pub face_tex_data12: f32,
    pub face_tex_data13: f32,
    pub face_tex_data14: f32,
    pub face_tex_data15: f32,
    pub face_tex_data16: f32,
    pub face_tex_data17: f32,
    pub face_tex_data18: f32,
    pub face_tex_data19: f32,
    pub face_tex_data20: f32,
    pub face_tex_data21: f32,
    pub face_tex_data22: f32,
    pub face_tex_data23: f32,
    pub face_tex_data24: f32,
    pub face_tex_data25: f32,
    pub face_tex_data26: f32,
    pub face_tex_data27: f32,
    pub face_tex_data28: f32,
    pub face_tex_data29: f32,
    pub face_tex_data30: f32,
    pub face_tex_data31: f32,
    pub face_tex_data32: f32,
    pub face_tex_data33: f32,
    pub face_tex_data34: f32,
    pub face_tex_data35: f32,
}

impl RenderableParam for FaceRangeParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.face_geo_data00;
        if ui.input_float("FaceGeoData00", &mut i).build() {
            self.face_geo_data00 = i;
        }

        let mut i: f32 = self.face_geo_data01;
        if ui.input_float("FaceGeoData01", &mut i).build() {
            self.face_geo_data01 = i;
        }

        let mut i: f32 = self.face_geo_data02;
        if ui.input_float("FaceGeoData02", &mut i).build() {
            self.face_geo_data02 = i;
        }

        let mut i: f32 = self.face_geo_data03;
        if ui.input_float("FaceGeoData03", &mut i).build() {
            self.face_geo_data03 = i;
        }

        let mut i: f32 = self.face_geo_data04;
        if ui.input_float("FaceGeoData04", &mut i).build() {
            self.face_geo_data04 = i;
        }

        let mut i: f32 = self.face_geo_data05;
        if ui.input_float("FaceGeoData05", &mut i).build() {
            self.face_geo_data05 = i;
        }

        let mut i: f32 = self.face_geo_data06;
        if ui.input_float("FaceGeoData06", &mut i).build() {
            self.face_geo_data06 = i;
        }

        let mut i: f32 = self.face_geo_data07;
        if ui.input_float("FaceGeoData07", &mut i).build() {
            self.face_geo_data07 = i;
        }

        let mut i: f32 = self.face_geo_data08;
        if ui.input_float("FaceGeoData08", &mut i).build() {
            self.face_geo_data08 = i;
        }

        let mut i: f32 = self.face_geo_data09;
        if ui.input_float("FaceGeoData09", &mut i).build() {
            self.face_geo_data09 = i;
        }

        let mut i: f32 = self.face_geo_data10;
        if ui.input_float("FaceGeoData10", &mut i).build() {
            self.face_geo_data10 = i;
        }

        let mut i: f32 = self.face_geo_data11;
        if ui.input_float("FaceGeoData11", &mut i).build() {
            self.face_geo_data11 = i;
        }

        let mut i: f32 = self.face_geo_data12;
        if ui.input_float("FaceGeoData12", &mut i).build() {
            self.face_geo_data12 = i;
        }

        let mut i: f32 = self.face_geo_data13;
        if ui.input_float("FaceGeoData13", &mut i).build() {
            self.face_geo_data13 = i;
        }

        let mut i: f32 = self.face_geo_data14;
        if ui.input_float("FaceGeoData14", &mut i).build() {
            self.face_geo_data14 = i;
        }

        let mut i: f32 = self.face_geo_data15;
        if ui.input_float("FaceGeoData15", &mut i).build() {
            self.face_geo_data15 = i;
        }

        let mut i: f32 = self.face_geo_data16;
        if ui.input_float("FaceGeoData16", &mut i).build() {
            self.face_geo_data16 = i;
        }

        let mut i: f32 = self.face_geo_data17;
        if ui.input_float("FaceGeoData17", &mut i).build() {
            self.face_geo_data17 = i;
        }

        let mut i: f32 = self.face_geo_data18;
        if ui.input_float("FaceGeoData18", &mut i).build() {
            self.face_geo_data18 = i;
        }

        let mut i: f32 = self.face_geo_data19;
        if ui.input_float("FaceGeoData19", &mut i).build() {
            self.face_geo_data19 = i;
        }

        let mut i: f32 = self.face_geo_data20;
        if ui.input_float("FaceGeoData20", &mut i).build() {
            self.face_geo_data20 = i;
        }

        let mut i: f32 = self.face_geo_data21;
        if ui.input_float("FaceGeoData21", &mut i).build() {
            self.face_geo_data21 = i;
        }

        let mut i: f32 = self.face_geo_data22;
        if ui.input_float("FaceGeoData22", &mut i).build() {
            self.face_geo_data22 = i;
        }

        let mut i: f32 = self.face_geo_data23;
        if ui.input_float("FaceGeoData23", &mut i).build() {
            self.face_geo_data23 = i;
        }

        let mut i: f32 = self.face_geo_data24;
        if ui.input_float("FaceGeoData24", &mut i).build() {
            self.face_geo_data24 = i;
        }

        let mut i: f32 = self.face_geo_data25;
        if ui.input_float("FaceGeoData25", &mut i).build() {
            self.face_geo_data25 = i;
        }

        let mut i: f32 = self.face_geo_data26;
        if ui.input_float("FaceGeoData26", &mut i).build() {
            self.face_geo_data26 = i;
        }

        let mut i: f32 = self.face_geo_data27;
        if ui.input_float("FaceGeoData27", &mut i).build() {
            self.face_geo_data27 = i;
        }

        let mut i: f32 = self.face_geo_data28;
        if ui.input_float("FaceGeoData28", &mut i).build() {
            self.face_geo_data28 = i;
        }

        let mut i: f32 = self.face_geo_data29;
        if ui.input_float("FaceGeoData29", &mut i).build() {
            self.face_geo_data29 = i;
        }

        let mut i: f32 = self.face_geo_data30;
        if ui.input_float("FaceGeoData30", &mut i).build() {
            self.face_geo_data30 = i;
        }

        let mut i: f32 = self.face_geo_data31;
        if ui.input_float("FaceGeoData31", &mut i).build() {
            self.face_geo_data31 = i;
        }

        let mut i: f32 = self.face_geo_data32;
        if ui.input_float("FaceGeoData32", &mut i).build() {
            self.face_geo_data32 = i;
        }

        let mut i: f32 = self.face_geo_data33;
        if ui.input_float("FaceGeoData33", &mut i).build() {
            self.face_geo_data33 = i;
        }

        let mut i: f32 = self.face_geo_data34;
        if ui.input_float("FaceGeoData34", &mut i).build() {
            self.face_geo_data34 = i;
        }

        let mut i: f32 = self.face_geo_data35;
        if ui.input_float("FaceGeoData35", &mut i).build() {
            self.face_geo_data35 = i;
        }

        let mut i: f32 = self.face_geo_data36;
        if ui.input_float("FaceGeoData36", &mut i).build() {
            self.face_geo_data36 = i;
        }

        let mut i: f32 = self.face_geo_data37;
        if ui.input_float("FaceGeoData37", &mut i).build() {
            self.face_geo_data37 = i;
        }

        let mut i: f32 = self.face_geo_data38;
        if ui.input_float("FaceGeoData38", &mut i).build() {
            self.face_geo_data38 = i;
        }

        let mut i: f32 = self.face_geo_data39;
        if ui.input_float("FaceGeoData39", &mut i).build() {
            self.face_geo_data39 = i;
        }

        let mut i: f32 = self.face_geo_data40;
        if ui.input_float("FaceGeoData40", &mut i).build() {
            self.face_geo_data40 = i;
        }

        let mut i: f32 = self.face_geo_data41;
        if ui.input_float("FaceGeoData41", &mut i).build() {
            self.face_geo_data41 = i;
        }

        let mut i: f32 = self.face_geo_data42;
        if ui.input_float("FaceGeoData42", &mut i).build() {
            self.face_geo_data42 = i;
        }

        let mut i: f32 = self.face_geo_data43;
        if ui.input_float("FaceGeoData43", &mut i).build() {
            self.face_geo_data43 = i;
        }

        let mut i: f32 = self.face_geo_data44;
        if ui.input_float("FaceGeoData44", &mut i).build() {
            self.face_geo_data44 = i;
        }

        let mut i: f32 = self.face_geo_data45;
        if ui.input_float("FaceGeoData45", &mut i).build() {
            self.face_geo_data45 = i;
        }

        let mut i: f32 = self.face_geo_data46;
        if ui.input_float("FaceGeoData46", &mut i).build() {
            self.face_geo_data46 = i;
        }

        let mut i: f32 = self.face_geo_data47;
        if ui.input_float("FaceGeoData47", &mut i).build() {
            self.face_geo_data47 = i;
        }

        let mut i: f32 = self.face_geo_data48;
        if ui.input_float("FaceGeoData48", &mut i).build() {
            self.face_geo_data48 = i;
        }

        let mut i: f32 = self.face_geo_data49;
        if ui.input_float("FaceGeoData49", &mut i).build() {
            self.face_geo_data49 = i;
        }

        let mut i: f32 = self.face_geo_data50;
        if ui.input_float("FaceGeoData50", &mut i).build() {
            self.face_geo_data50 = i;
        }

        let mut i: f32 = self.face_geo_data51;
        if ui.input_float("FaceGeoData51", &mut i).build() {
            self.face_geo_data51 = i;
        }

        let mut i: f32 = self.face_geo_data52;
        if ui.input_float("FaceGeoData52", &mut i).build() {
            self.face_geo_data52 = i;
        }

        let mut i: f32 = self.face_geo_data53;
        if ui.input_float("FaceGeoData53", &mut i).build() {
            self.face_geo_data53 = i;
        }

        let mut i: f32 = self.face_geo_data54;
        if ui.input_float("FaceGeoData54", &mut i).build() {
            self.face_geo_data54 = i;
        }

        let mut i: f32 = self.face_geo_data55;
        if ui.input_float("FaceGeoData55", &mut i).build() {
            self.face_geo_data55 = i;
        }

        let mut i: f32 = self.face_geo_data56;
        if ui.input_float("FaceGeoData56", &mut i).build() {
            self.face_geo_data56 = i;
        }

        let mut i: f32 = self.face_geo_data57;
        if ui.input_float("FaceGeoData57", &mut i).build() {
            self.face_geo_data57 = i;
        }

        let mut i: f32 = self.face_geo_data58;
        if ui.input_float("FaceGeoData58", &mut i).build() {
            self.face_geo_data58 = i;
        }

        let mut i: f32 = self.face_geo_data59;
        if ui.input_float("FaceGeoData59", &mut i).build() {
            self.face_geo_data59 = i;
        }

        let mut i: f32 = self.face_geo_data60;
        if ui.input_float("FaceGeoData60", &mut i).build() {
            self.face_geo_data60 = i;
        }

        let mut i: f32 = self.face_tex_data00;
        if ui.input_float("FaceTexData00", &mut i).build() {
            self.face_tex_data00 = i;
        }

        let mut i: f32 = self.face_tex_data01;
        if ui.input_float("FaceTexData01", &mut i).build() {
            self.face_tex_data01 = i;
        }

        let mut i: f32 = self.face_tex_data02;
        if ui.input_float("FaceTexData02", &mut i).build() {
            self.face_tex_data02 = i;
        }

        let mut i: f32 = self.face_tex_data03;
        if ui.input_float("FaceTexData03", &mut i).build() {
            self.face_tex_data03 = i;
        }

        let mut i: f32 = self.face_tex_data04;
        if ui.input_float("FaceTexData04", &mut i).build() {
            self.face_tex_data04 = i;
        }

        let mut i: f32 = self.face_tex_data05;
        if ui.input_float("FaceTexData05", &mut i).build() {
            self.face_tex_data05 = i;
        }

        let mut i: f32 = self.face_tex_data06;
        if ui.input_float("FaceTexData06", &mut i).build() {
            self.face_tex_data06 = i;
        }

        let mut i: f32 = self.face_tex_data07;
        if ui.input_float("FaceTexData07", &mut i).build() {
            self.face_tex_data07 = i;
        }

        let mut i: f32 = self.face_tex_data08;
        if ui.input_float("FaceTexData08", &mut i).build() {
            self.face_tex_data08 = i;
        }

        let mut i: f32 = self.face_tex_data09;
        if ui.input_float("FaceTexData09", &mut i).build() {
            self.face_tex_data09 = i;
        }

        let mut i: f32 = self.face_tex_data10;
        if ui.input_float("FaceTexData10", &mut i).build() {
            self.face_tex_data10 = i;
        }

        let mut i: f32 = self.face_tex_data11;
        if ui.input_float("FaceTexData11", &mut i).build() {
            self.face_tex_data11 = i;
        }

        let mut i: f32 = self.face_tex_data12;
        if ui.input_float("FaceTexData12", &mut i).build() {
            self.face_tex_data12 = i;
        }

        let mut i: f32 = self.face_tex_data13;
        if ui.input_float("FaceTexData13", &mut i).build() {
            self.face_tex_data13 = i;
        }

        let mut i: f32 = self.face_tex_data14;
        if ui.input_float("FaceTexData14", &mut i).build() {
            self.face_tex_data14 = i;
        }

        let mut i: f32 = self.face_tex_data15;
        if ui.input_float("FaceTexData15", &mut i).build() {
            self.face_tex_data15 = i;
        }

        let mut i: f32 = self.face_tex_data16;
        if ui.input_float("FaceTexData16", &mut i).build() {
            self.face_tex_data16 = i;
        }

        let mut i: f32 = self.face_tex_data17;
        if ui.input_float("FaceTexData17", &mut i).build() {
            self.face_tex_data17 = i;
        }

        let mut i: f32 = self.face_tex_data18;
        if ui.input_float("FaceTexData18", &mut i).build() {
            self.face_tex_data18 = i;
        }

        let mut i: f32 = self.face_tex_data19;
        if ui.input_float("FaceTexData19", &mut i).build() {
            self.face_tex_data19 = i;
        }

        let mut i: f32 = self.face_tex_data20;
        if ui.input_float("FaceTexData20", &mut i).build() {
            self.face_tex_data20 = i;
        }

        let mut i: f32 = self.face_tex_data21;
        if ui.input_float("FaceTexData21", &mut i).build() {
            self.face_tex_data21 = i;
        }

        let mut i: f32 = self.face_tex_data22;
        if ui.input_float("FaceTexData22", &mut i).build() {
            self.face_tex_data22 = i;
        }

        let mut i: f32 = self.face_tex_data23;
        if ui.input_float("FaceTexData23", &mut i).build() {
            self.face_tex_data23 = i;
        }

        let mut i: f32 = self.face_tex_data24;
        if ui.input_float("FaceTexData24", &mut i).build() {
            self.face_tex_data24 = i;
        }

        let mut i: f32 = self.face_tex_data25;
        if ui.input_float("FaceTexData25", &mut i).build() {
            self.face_tex_data25 = i;
        }

        let mut i: f32 = self.face_tex_data26;
        if ui.input_float("FaceTexData26", &mut i).build() {
            self.face_tex_data26 = i;
        }

        let mut i: f32 = self.face_tex_data27;
        if ui.input_float("FaceTexData27", &mut i).build() {
            self.face_tex_data27 = i;
        }

        let mut i: f32 = self.face_tex_data28;
        if ui.input_float("FaceTexData28", &mut i).build() {
            self.face_tex_data28 = i;
        }

        let mut i: f32 = self.face_tex_data29;
        if ui.input_float("FaceTexData29", &mut i).build() {
            self.face_tex_data29 = i;
        }

        let mut i: f32 = self.face_tex_data30;
        if ui.input_float("FaceTexData30", &mut i).build() {
            self.face_tex_data30 = i;
        }

        let mut i: f32 = self.face_tex_data31;
        if ui.input_float("FaceTexData31", &mut i).build() {
            self.face_tex_data31 = i;
        }

        let mut i: f32 = self.face_tex_data32;
        if ui.input_float("FaceTexData32", &mut i).build() {
            self.face_tex_data32 = i;
        }

        let mut i: f32 = self.face_tex_data33;
        if ui.input_float("FaceTexData33", &mut i).build() {
            self.face_tex_data33 = i;
        }

        let mut i: f32 = self.face_tex_data34;
        if ui.input_float("FaceTexData34", &mut i).build() {
            self.face_tex_data34 = i;
        }

        let mut i: f32 = self.face_tex_data35;
        if ui.input_float("FaceTexData35", &mut i).build() {
            self.face_tex_data35 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct FootSfxParam {
    pub foot_sfx_id000: i32,
    pub foot_sfx_id001: i32,
    pub foot_sfx_id002: i32,
    pub foot_sfx_id003: i32,
    pub foot_sfx_id004: i32,
    pub foot_sfx_id005: i32,
    pub foot_sfx_id006: i32,
    pub foot_sfx_id007: i32,
    pub foot_sfx_id008: i32,
    pub foot_sfx_id009: i32,
    pub foot_sfx_id010: i32,
    pub foot_sfx_id011: i32,
    pub foot_sfx_id012: i32,
    pub foot_sfx_id013: i32,
    pub foot_sfx_id014: i32,
    pub foot_sfx_id015: i32,
    pub foot_sfx_id016: i32,
    pub foot_sfx_id017: i32,
    pub foot_sfx_id018: i32,
    pub foot_sfx_id019: i32,
    pub foot_sfx_id020: i32,
    pub foot_sfx_id021: i32,
    pub foot_sfx_id022: i32,
    pub foot_sfx_id023: i32,
    pub foot_sfx_id024: i32,
    pub foot_sfx_id025: i32,
    pub foot_sfx_id026: i32,
    pub foot_sfx_id027: i32,
    pub foot_sfx_id028: i32,
    pub foot_sfx_id029: i32,
    pub foot_sfx_id030: i32,
    pub foot_sfx_id031: i32,
    pub foot_sfx_id032: i32,
    pub foot_sfx_id033: i32,
    pub foot_sfx_id034: i32,
    pub foot_sfx_id035: i32,
    pub foot_sfx_id036: i32,
    pub foot_sfx_id037: i32,
    pub foot_sfx_id038: i32,
    pub foot_sfx_id039: i32,
    pub foot_sfx_id040: i32,
    pub foot_sfx_id041: i32,
    pub foot_sfx_id042: i32,
    pub foot_sfx_id043: i32,
    pub foot_sfx_id044: i32,
    pub foot_sfx_id045: i32,
    pub foot_sfx_id046: i32,
    pub foot_sfx_id047: i32,
    pub foot_sfx_id048: i32,
    pub foot_sfx_id049: i32,
    pub foot_sfx_id050: i32,
    pub foot_sfx_id051: i32,
    pub foot_sfx_id052: i32,
    pub foot_sfx_id053: i32,
    pub foot_sfx_id054: i32,
    pub foot_sfx_id055: i32,
    pub foot_sfx_id056: i32,
    pub foot_sfx_id057: i32,
    pub foot_sfx_id058: i32,
    pub foot_sfx_id059: i32,
    pub foot_sfx_id060: i32,
    pub foot_sfx_id061: i32,
    pub foot_sfx_id062: i32,
    pub foot_sfx_id063: i32,
    pub foot_sfx_id064: i32,
    pub foot_sfx_id065: i32,
    pub foot_sfx_id066: i32,
    pub foot_sfx_id067: i32,
    pub foot_sfx_id068: i32,
    pub foot_sfx_id069: i32,
    pub foot_sfx_id070: i32,
    pub foot_sfx_id071: i32,
    pub foot_sfx_id072: i32,
    pub foot_sfx_id073: i32,
    pub foot_sfx_id074: i32,
    pub foot_sfx_id075: i32,
    pub foot_sfx_id076: i32,
    pub foot_sfx_id077: i32,
    pub foot_sfx_id078: i32,
    pub foot_sfx_id079: i32,
    pub foot_sfx_id080: i32,
    pub foot_sfx_id081: i32,
    pub foot_sfx_id082: i32,
    pub foot_sfx_id083: i32,
    pub foot_sfx_id084: i32,
    pub foot_sfx_id085: i32,
    pub foot_sfx_id086: i32,
    pub foot_sfx_id087: i32,
    pub foot_sfx_id088: i32,
    pub foot_sfx_id089: i32,
    pub foot_sfx_id090: i32,
    pub foot_sfx_id091: i32,
    pub foot_sfx_id092: i32,
    pub foot_sfx_id093: i32,
    pub foot_sfx_id094: i32,
    pub foot_sfx_id095: i32,
    pub foot_sfx_id096: i32,
    pub foot_sfx_id097: i32,
    pub foot_sfx_id098: i32,
    pub foot_sfx_id099: i32,
    pub foot_sfx_id100: i32,
    pub foot_sfx_id101: i32,
    pub foot_sfx_id102: i32,
    pub foot_sfx_id103: i32,
    pub foot_sfx_id104: i32,
    pub foot_sfx_id105: i32,
    pub foot_sfx_id106: i32,
    pub foot_sfx_id107: i32,
    pub foot_sfx_id108: i32,
    pub foot_sfx_id109: i32,
    pub foot_sfx_id110: i32,
    pub foot_sfx_id111: i32,
    pub foot_sfx_id112: i32,
    pub foot_sfx_id113: i32,
    pub foot_sfx_id114: i32,
    pub foot_sfx_id115: i32,
    pub foot_sfx_id116: i32,
    pub foot_sfx_id117: i32,
    pub foot_sfx_id118: i32,
    pub foot_sfx_id119: i32,
    pub foot_sfx_id120: i32,
    pub foot_sfx_id121: i32,
    pub foot_sfx_id122: i32,
    pub foot_sfx_id123: i32,
    pub foot_sfx_id124: i32,
    pub foot_sfx_id125: i32,
    pub foot_sfx_id126: i32,
    pub foot_sfx_id127: i32,
    pub foot_sfx_id128: i32,
    pub foot_sfx_id129: i32,
    pub foot_sfx_id130: i32,
    pub foot_sfx_id131: i32,
    pub foot_sfx_id132: i32,
    pub foot_sfx_id133: i32,
    pub foot_sfx_id134: i32,
    pub foot_sfx_id135: i32,
    pub foot_sfx_id136: i32,
    pub foot_sfx_id137: i32,
    pub foot_sfx_id138: i32,
    pub foot_sfx_id139: i32,
    pub foot_sfx_id140: i32,
    pub foot_sfx_id141: i32,
    pub foot_sfx_id142: i32,
    pub foot_sfx_id143: i32,
    pub foot_sfx_id144: i32,
    pub foot_sfx_id145: i32,
    pub foot_sfx_id146: i32,
    pub foot_sfx_id147: i32,
    pub foot_sfx_id148: i32,
    pub foot_sfx_id149: i32,
    pub foot_sfx_id150: i32,
    pub foot_sfx_id151: i32,
    pub foot_sfx_id152: i32,
    pub foot_sfx_id153: i32,
    pub foot_sfx_id154: i32,
    pub foot_sfx_id155: i32,
    pub foot_sfx_id156: i32,
    pub foot_sfx_id157: i32,
    pub foot_sfx_id158: i32,
    pub foot_sfx_id159: i32,
    pub foot_sfx_id160: i32,
    pub foot_sfx_id161: i32,
    pub foot_sfx_id162: i32,
    pub foot_sfx_id163: i32,
    pub foot_sfx_id164: i32,
    pub foot_sfx_id165: i32,
    pub foot_sfx_id166: i32,
    pub foot_sfx_id167: i32,
    pub foot_sfx_id168: i32,
    pub foot_sfx_id169: i32,
    pub foot_sfx_id170: i32,
    pub foot_sfx_id171: i32,
    pub foot_sfx_id172: i32,
    pub foot_sfx_id173: i32,
    pub foot_sfx_id174: i32,
    pub foot_sfx_id175: i32,
    pub foot_sfx_id176: i32,
    pub foot_sfx_id177: i32,
    pub foot_sfx_id178: i32,
    pub foot_sfx_id179: i32,
    pub foot_sfx_id180: i32,
    pub foot_sfx_id181: i32,
    pub foot_sfx_id182: i32,
    pub foot_sfx_id183: i32,
    pub foot_sfx_id184: i32,
    pub foot_sfx_id185: i32,
    pub foot_sfx_id186: i32,
    pub foot_sfx_id187: i32,
    pub foot_sfx_id188: i32,
    pub foot_sfx_id189: i32,
    pub foot_sfx_id190: i32,
    pub foot_sfx_id191: i32,
    pub foot_sfx_id192: i32,
    pub foot_sfx_id193: i32,
    pub foot_sfx_id194: i32,
    pub foot_sfx_id195: i32,
    pub foot_sfx_id196: i32,
    pub foot_sfx_id197: i32,
    pub foot_sfx_id198: i32,
    pub foot_sfx_id199: i32,
}

impl RenderableParam for FootSfxParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.foot_sfx_id000 as _;
        if ui.input_int("FootSfxId000", &mut i).build() {
            self.foot_sfx_id000 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id001 as _;
        if ui.input_int("FootSfxId001", &mut i).build() {
            self.foot_sfx_id001 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id002 as _;
        if ui.input_int("FootSfxId002", &mut i).build() {
            self.foot_sfx_id002 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id003 as _;
        if ui.input_int("FootSfxId003", &mut i).build() {
            self.foot_sfx_id003 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id004 as _;
        if ui.input_int("FootSfxId004", &mut i).build() {
            self.foot_sfx_id004 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id005 as _;
        if ui.input_int("FootSfxId005", &mut i).build() {
            self.foot_sfx_id005 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id006 as _;
        if ui.input_int("FootSfxId006", &mut i).build() {
            self.foot_sfx_id006 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id007 as _;
        if ui.input_int("FootSfxId007", &mut i).build() {
            self.foot_sfx_id007 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id008 as _;
        if ui.input_int("FootSfxId008", &mut i).build() {
            self.foot_sfx_id008 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id009 as _;
        if ui.input_int("FootSfxId009", &mut i).build() {
            self.foot_sfx_id009 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id010 as _;
        if ui.input_int("FootSfxId010", &mut i).build() {
            self.foot_sfx_id010 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id011 as _;
        if ui.input_int("FootSfxId011", &mut i).build() {
            self.foot_sfx_id011 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id012 as _;
        if ui.input_int("FootSfxId012", &mut i).build() {
            self.foot_sfx_id012 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id013 as _;
        if ui.input_int("FootSfxId013", &mut i).build() {
            self.foot_sfx_id013 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id014 as _;
        if ui.input_int("FootSfxId014", &mut i).build() {
            self.foot_sfx_id014 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id015 as _;
        if ui.input_int("FootSfxId015", &mut i).build() {
            self.foot_sfx_id015 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id016 as _;
        if ui.input_int("FootSfxId016", &mut i).build() {
            self.foot_sfx_id016 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id017 as _;
        if ui.input_int("FootSfxId017", &mut i).build() {
            self.foot_sfx_id017 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id018 as _;
        if ui.input_int("FootSfxId018", &mut i).build() {
            self.foot_sfx_id018 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id019 as _;
        if ui.input_int("FootSfxId019", &mut i).build() {
            self.foot_sfx_id019 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id020 as _;
        if ui.input_int("FootSfxId020", &mut i).build() {
            self.foot_sfx_id020 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id021 as _;
        if ui.input_int("FootSfxId021", &mut i).build() {
            self.foot_sfx_id021 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id022 as _;
        if ui.input_int("FootSfxId022", &mut i).build() {
            self.foot_sfx_id022 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id023 as _;
        if ui.input_int("FootSfxId023", &mut i).build() {
            self.foot_sfx_id023 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id024 as _;
        if ui.input_int("FootSfxId024", &mut i).build() {
            self.foot_sfx_id024 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id025 as _;
        if ui.input_int("FootSfxId025", &mut i).build() {
            self.foot_sfx_id025 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id026 as _;
        if ui.input_int("FootSfxId026", &mut i).build() {
            self.foot_sfx_id026 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id027 as _;
        if ui.input_int("FootSfxId027", &mut i).build() {
            self.foot_sfx_id027 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id028 as _;
        if ui.input_int("FootSfxId028", &mut i).build() {
            self.foot_sfx_id028 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id029 as _;
        if ui.input_int("FootSfxId029", &mut i).build() {
            self.foot_sfx_id029 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id030 as _;
        if ui.input_int("FootSfxId030", &mut i).build() {
            self.foot_sfx_id030 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id031 as _;
        if ui.input_int("FootSfxId031", &mut i).build() {
            self.foot_sfx_id031 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id032 as _;
        if ui.input_int("FootSfxId032", &mut i).build() {
            self.foot_sfx_id032 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id033 as _;
        if ui.input_int("FootSfxId033", &mut i).build() {
            self.foot_sfx_id033 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id034 as _;
        if ui.input_int("FootSfxId034", &mut i).build() {
            self.foot_sfx_id034 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id035 as _;
        if ui.input_int("FootSfxId035", &mut i).build() {
            self.foot_sfx_id035 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id036 as _;
        if ui.input_int("FootSfxId036", &mut i).build() {
            self.foot_sfx_id036 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id037 as _;
        if ui.input_int("FootSfxId037", &mut i).build() {
            self.foot_sfx_id037 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id038 as _;
        if ui.input_int("FootSfxId038", &mut i).build() {
            self.foot_sfx_id038 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id039 as _;
        if ui.input_int("FootSfxId039", &mut i).build() {
            self.foot_sfx_id039 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id040 as _;
        if ui.input_int("FootSfxId040", &mut i).build() {
            self.foot_sfx_id040 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id041 as _;
        if ui.input_int("FootSfxId041", &mut i).build() {
            self.foot_sfx_id041 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id042 as _;
        if ui.input_int("FootSfxId042", &mut i).build() {
            self.foot_sfx_id042 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id043 as _;
        if ui.input_int("FootSfxId043", &mut i).build() {
            self.foot_sfx_id043 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id044 as _;
        if ui.input_int("FootSfxId044", &mut i).build() {
            self.foot_sfx_id044 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id045 as _;
        if ui.input_int("FootSfxId045", &mut i).build() {
            self.foot_sfx_id045 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id046 as _;
        if ui.input_int("FootSfxId046", &mut i).build() {
            self.foot_sfx_id046 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id047 as _;
        if ui.input_int("FootSfxId047", &mut i).build() {
            self.foot_sfx_id047 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id048 as _;
        if ui.input_int("FootSfxId048", &mut i).build() {
            self.foot_sfx_id048 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id049 as _;
        if ui.input_int("FootSfxId049", &mut i).build() {
            self.foot_sfx_id049 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id050 as _;
        if ui.input_int("FootSfxId050", &mut i).build() {
            self.foot_sfx_id050 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id051 as _;
        if ui.input_int("FootSfxId051", &mut i).build() {
            self.foot_sfx_id051 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id052 as _;
        if ui.input_int("FootSfxId052", &mut i).build() {
            self.foot_sfx_id052 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id053 as _;
        if ui.input_int("FootSfxId053", &mut i).build() {
            self.foot_sfx_id053 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id054 as _;
        if ui.input_int("FootSfxId054", &mut i).build() {
            self.foot_sfx_id054 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id055 as _;
        if ui.input_int("FootSfxId055", &mut i).build() {
            self.foot_sfx_id055 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id056 as _;
        if ui.input_int("FootSfxId056", &mut i).build() {
            self.foot_sfx_id056 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id057 as _;
        if ui.input_int("FootSfxId057", &mut i).build() {
            self.foot_sfx_id057 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id058 as _;
        if ui.input_int("FootSfxId058", &mut i).build() {
            self.foot_sfx_id058 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id059 as _;
        if ui.input_int("FootSfxId059", &mut i).build() {
            self.foot_sfx_id059 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id060 as _;
        if ui.input_int("FootSfxId060", &mut i).build() {
            self.foot_sfx_id060 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id061 as _;
        if ui.input_int("FootSfxId061", &mut i).build() {
            self.foot_sfx_id061 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id062 as _;
        if ui.input_int("FootSfxId062", &mut i).build() {
            self.foot_sfx_id062 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id063 as _;
        if ui.input_int("FootSfxId063", &mut i).build() {
            self.foot_sfx_id063 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id064 as _;
        if ui.input_int("FootSfxId064", &mut i).build() {
            self.foot_sfx_id064 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id065 as _;
        if ui.input_int("FootSfxId065", &mut i).build() {
            self.foot_sfx_id065 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id066 as _;
        if ui.input_int("FootSfxId066", &mut i).build() {
            self.foot_sfx_id066 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id067 as _;
        if ui.input_int("FootSfxId067", &mut i).build() {
            self.foot_sfx_id067 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id068 as _;
        if ui.input_int("FootSfxId068", &mut i).build() {
            self.foot_sfx_id068 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id069 as _;
        if ui.input_int("FootSfxId069", &mut i).build() {
            self.foot_sfx_id069 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id070 as _;
        if ui.input_int("FootSfxId070", &mut i).build() {
            self.foot_sfx_id070 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id071 as _;
        if ui.input_int("FootSfxId071", &mut i).build() {
            self.foot_sfx_id071 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id072 as _;
        if ui.input_int("FootSfxId072", &mut i).build() {
            self.foot_sfx_id072 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id073 as _;
        if ui.input_int("FootSfxId073", &mut i).build() {
            self.foot_sfx_id073 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id074 as _;
        if ui.input_int("FootSfxId074", &mut i).build() {
            self.foot_sfx_id074 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id075 as _;
        if ui.input_int("FootSfxId075", &mut i).build() {
            self.foot_sfx_id075 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id076 as _;
        if ui.input_int("FootSfxId076", &mut i).build() {
            self.foot_sfx_id076 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id077 as _;
        if ui.input_int("FootSfxId077", &mut i).build() {
            self.foot_sfx_id077 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id078 as _;
        if ui.input_int("FootSfxId078", &mut i).build() {
            self.foot_sfx_id078 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id079 as _;
        if ui.input_int("FootSfxId079", &mut i).build() {
            self.foot_sfx_id079 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id080 as _;
        if ui.input_int("FootSfxId080", &mut i).build() {
            self.foot_sfx_id080 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id081 as _;
        if ui.input_int("FootSfxId081", &mut i).build() {
            self.foot_sfx_id081 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id082 as _;
        if ui.input_int("FootSfxId082", &mut i).build() {
            self.foot_sfx_id082 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id083 as _;
        if ui.input_int("FootSfxId083", &mut i).build() {
            self.foot_sfx_id083 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id084 as _;
        if ui.input_int("FootSfxId084", &mut i).build() {
            self.foot_sfx_id084 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id085 as _;
        if ui.input_int("FootSfxId085", &mut i).build() {
            self.foot_sfx_id085 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id086 as _;
        if ui.input_int("FootSfxId086", &mut i).build() {
            self.foot_sfx_id086 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id087 as _;
        if ui.input_int("FootSfxId087", &mut i).build() {
            self.foot_sfx_id087 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id088 as _;
        if ui.input_int("FootSfxId088", &mut i).build() {
            self.foot_sfx_id088 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id089 as _;
        if ui.input_int("FootSfxId089", &mut i).build() {
            self.foot_sfx_id089 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id090 as _;
        if ui.input_int("FootSfxId090", &mut i).build() {
            self.foot_sfx_id090 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id091 as _;
        if ui.input_int("FootSfxId091", &mut i).build() {
            self.foot_sfx_id091 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id092 as _;
        if ui.input_int("FootSfxId092", &mut i).build() {
            self.foot_sfx_id092 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id093 as _;
        if ui.input_int("FootSfxId093", &mut i).build() {
            self.foot_sfx_id093 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id094 as _;
        if ui.input_int("FootSfxId094", &mut i).build() {
            self.foot_sfx_id094 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id095 as _;
        if ui.input_int("FootSfxId095", &mut i).build() {
            self.foot_sfx_id095 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id096 as _;
        if ui.input_int("FootSfxId096", &mut i).build() {
            self.foot_sfx_id096 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id097 as _;
        if ui.input_int("FootSfxId097", &mut i).build() {
            self.foot_sfx_id097 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id098 as _;
        if ui.input_int("FootSfxId098", &mut i).build() {
            self.foot_sfx_id098 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id099 as _;
        if ui.input_int("FootSfxId099", &mut i).build() {
            self.foot_sfx_id099 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id100 as _;
        if ui.input_int("FootSfxId100", &mut i).build() {
            self.foot_sfx_id100 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id101 as _;
        if ui.input_int("FootSfxId101", &mut i).build() {
            self.foot_sfx_id101 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id102 as _;
        if ui.input_int("FootSfxId102", &mut i).build() {
            self.foot_sfx_id102 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id103 as _;
        if ui.input_int("FootSfxId103", &mut i).build() {
            self.foot_sfx_id103 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id104 as _;
        if ui.input_int("FootSfxId104", &mut i).build() {
            self.foot_sfx_id104 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id105 as _;
        if ui.input_int("FootSfxId105", &mut i).build() {
            self.foot_sfx_id105 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id106 as _;
        if ui.input_int("FootSfxId106", &mut i).build() {
            self.foot_sfx_id106 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id107 as _;
        if ui.input_int("FootSfxId107", &mut i).build() {
            self.foot_sfx_id107 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id108 as _;
        if ui.input_int("FootSfxId108", &mut i).build() {
            self.foot_sfx_id108 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id109 as _;
        if ui.input_int("FootSfxId109", &mut i).build() {
            self.foot_sfx_id109 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id110 as _;
        if ui.input_int("FootSfxId110", &mut i).build() {
            self.foot_sfx_id110 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id111 as _;
        if ui.input_int("FootSfxId111", &mut i).build() {
            self.foot_sfx_id111 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id112 as _;
        if ui.input_int("FootSfxId112", &mut i).build() {
            self.foot_sfx_id112 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id113 as _;
        if ui.input_int("FootSfxId113", &mut i).build() {
            self.foot_sfx_id113 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id114 as _;
        if ui.input_int("FootSfxId114", &mut i).build() {
            self.foot_sfx_id114 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id115 as _;
        if ui.input_int("FootSfxId115", &mut i).build() {
            self.foot_sfx_id115 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id116 as _;
        if ui.input_int("FootSfxId116", &mut i).build() {
            self.foot_sfx_id116 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id117 as _;
        if ui.input_int("FootSfxId117", &mut i).build() {
            self.foot_sfx_id117 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id118 as _;
        if ui.input_int("FootSfxId118", &mut i).build() {
            self.foot_sfx_id118 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id119 as _;
        if ui.input_int("FootSfxId119", &mut i).build() {
            self.foot_sfx_id119 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id120 as _;
        if ui.input_int("FootSfxId120", &mut i).build() {
            self.foot_sfx_id120 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id121 as _;
        if ui.input_int("FootSfxId121", &mut i).build() {
            self.foot_sfx_id121 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id122 as _;
        if ui.input_int("FootSfxId122", &mut i).build() {
            self.foot_sfx_id122 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id123 as _;
        if ui.input_int("FootSfxId123", &mut i).build() {
            self.foot_sfx_id123 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id124 as _;
        if ui.input_int("FootSfxId124", &mut i).build() {
            self.foot_sfx_id124 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id125 as _;
        if ui.input_int("FootSfxId125", &mut i).build() {
            self.foot_sfx_id125 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id126 as _;
        if ui.input_int("FootSfxId126", &mut i).build() {
            self.foot_sfx_id126 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id127 as _;
        if ui.input_int("FootSfxId127", &mut i).build() {
            self.foot_sfx_id127 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id128 as _;
        if ui.input_int("FootSfxId128", &mut i).build() {
            self.foot_sfx_id128 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id129 as _;
        if ui.input_int("FootSfxId129", &mut i).build() {
            self.foot_sfx_id129 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id130 as _;
        if ui.input_int("FootSfxId130", &mut i).build() {
            self.foot_sfx_id130 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id131 as _;
        if ui.input_int("FootSfxId131", &mut i).build() {
            self.foot_sfx_id131 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id132 as _;
        if ui.input_int("FootSfxId132", &mut i).build() {
            self.foot_sfx_id132 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id133 as _;
        if ui.input_int("FootSfxId133", &mut i).build() {
            self.foot_sfx_id133 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id134 as _;
        if ui.input_int("FootSfxId134", &mut i).build() {
            self.foot_sfx_id134 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id135 as _;
        if ui.input_int("FootSfxId135", &mut i).build() {
            self.foot_sfx_id135 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id136 as _;
        if ui.input_int("FootSfxId136", &mut i).build() {
            self.foot_sfx_id136 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id137 as _;
        if ui.input_int("FootSfxId137", &mut i).build() {
            self.foot_sfx_id137 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id138 as _;
        if ui.input_int("FootSfxId138", &mut i).build() {
            self.foot_sfx_id138 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id139 as _;
        if ui.input_int("FootSfxId139", &mut i).build() {
            self.foot_sfx_id139 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id140 as _;
        if ui.input_int("FootSfxId140", &mut i).build() {
            self.foot_sfx_id140 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id141 as _;
        if ui.input_int("FootSfxId141", &mut i).build() {
            self.foot_sfx_id141 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id142 as _;
        if ui.input_int("FootSfxId142", &mut i).build() {
            self.foot_sfx_id142 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id143 as _;
        if ui.input_int("FootSfxId143", &mut i).build() {
            self.foot_sfx_id143 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id144 as _;
        if ui.input_int("FootSfxId144", &mut i).build() {
            self.foot_sfx_id144 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id145 as _;
        if ui.input_int("FootSfxId145", &mut i).build() {
            self.foot_sfx_id145 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id146 as _;
        if ui.input_int("FootSfxId146", &mut i).build() {
            self.foot_sfx_id146 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id147 as _;
        if ui.input_int("FootSfxId147", &mut i).build() {
            self.foot_sfx_id147 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id148 as _;
        if ui.input_int("FootSfxId148", &mut i).build() {
            self.foot_sfx_id148 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id149 as _;
        if ui.input_int("FootSfxId149", &mut i).build() {
            self.foot_sfx_id149 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id150 as _;
        if ui.input_int("FootSfxId150", &mut i).build() {
            self.foot_sfx_id150 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id151 as _;
        if ui.input_int("FootSfxId151", &mut i).build() {
            self.foot_sfx_id151 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id152 as _;
        if ui.input_int("FootSfxId152", &mut i).build() {
            self.foot_sfx_id152 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id153 as _;
        if ui.input_int("FootSfxId153", &mut i).build() {
            self.foot_sfx_id153 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id154 as _;
        if ui.input_int("FootSfxId154", &mut i).build() {
            self.foot_sfx_id154 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id155 as _;
        if ui.input_int("FootSfxId155", &mut i).build() {
            self.foot_sfx_id155 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id156 as _;
        if ui.input_int("FootSfxId156", &mut i).build() {
            self.foot_sfx_id156 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id157 as _;
        if ui.input_int("FootSfxId157", &mut i).build() {
            self.foot_sfx_id157 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id158 as _;
        if ui.input_int("FootSfxId158", &mut i).build() {
            self.foot_sfx_id158 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id159 as _;
        if ui.input_int("FootSfxId159", &mut i).build() {
            self.foot_sfx_id159 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id160 as _;
        if ui.input_int("FootSfxId160", &mut i).build() {
            self.foot_sfx_id160 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id161 as _;
        if ui.input_int("FootSfxId161", &mut i).build() {
            self.foot_sfx_id161 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id162 as _;
        if ui.input_int("FootSfxId162", &mut i).build() {
            self.foot_sfx_id162 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id163 as _;
        if ui.input_int("FootSfxId163", &mut i).build() {
            self.foot_sfx_id163 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id164 as _;
        if ui.input_int("FootSfxId164", &mut i).build() {
            self.foot_sfx_id164 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id165 as _;
        if ui.input_int("FootSfxId165", &mut i).build() {
            self.foot_sfx_id165 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id166 as _;
        if ui.input_int("FootSfxId166", &mut i).build() {
            self.foot_sfx_id166 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id167 as _;
        if ui.input_int("FootSfxId167", &mut i).build() {
            self.foot_sfx_id167 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id168 as _;
        if ui.input_int("FootSfxId168", &mut i).build() {
            self.foot_sfx_id168 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id169 as _;
        if ui.input_int("FootSfxId169", &mut i).build() {
            self.foot_sfx_id169 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id170 as _;
        if ui.input_int("FootSfxId170", &mut i).build() {
            self.foot_sfx_id170 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id171 as _;
        if ui.input_int("FootSfxId171", &mut i).build() {
            self.foot_sfx_id171 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id172 as _;
        if ui.input_int("FootSfxId172", &mut i).build() {
            self.foot_sfx_id172 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id173 as _;
        if ui.input_int("FootSfxId173", &mut i).build() {
            self.foot_sfx_id173 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id174 as _;
        if ui.input_int("FootSfxId174", &mut i).build() {
            self.foot_sfx_id174 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id175 as _;
        if ui.input_int("FootSfxId175", &mut i).build() {
            self.foot_sfx_id175 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id176 as _;
        if ui.input_int("FootSfxId176", &mut i).build() {
            self.foot_sfx_id176 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id177 as _;
        if ui.input_int("FootSfxId177", &mut i).build() {
            self.foot_sfx_id177 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id178 as _;
        if ui.input_int("FootSfxId178", &mut i).build() {
            self.foot_sfx_id178 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id179 as _;
        if ui.input_int("FootSfxId179", &mut i).build() {
            self.foot_sfx_id179 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id180 as _;
        if ui.input_int("FootSfxId180", &mut i).build() {
            self.foot_sfx_id180 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id181 as _;
        if ui.input_int("FootSfxId181", &mut i).build() {
            self.foot_sfx_id181 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id182 as _;
        if ui.input_int("FootSfxId182", &mut i).build() {
            self.foot_sfx_id182 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id183 as _;
        if ui.input_int("FootSfxId183", &mut i).build() {
            self.foot_sfx_id183 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id184 as _;
        if ui.input_int("FootSfxId184", &mut i).build() {
            self.foot_sfx_id184 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id185 as _;
        if ui.input_int("FootSfxId185", &mut i).build() {
            self.foot_sfx_id185 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id186 as _;
        if ui.input_int("FootSfxId186", &mut i).build() {
            self.foot_sfx_id186 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id187 as _;
        if ui.input_int("FootSfxId187", &mut i).build() {
            self.foot_sfx_id187 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id188 as _;
        if ui.input_int("FootSfxId188", &mut i).build() {
            self.foot_sfx_id188 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id189 as _;
        if ui.input_int("FootSfxId189", &mut i).build() {
            self.foot_sfx_id189 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id190 as _;
        if ui.input_int("FootSfxId190", &mut i).build() {
            self.foot_sfx_id190 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id191 as _;
        if ui.input_int("FootSfxId191", &mut i).build() {
            self.foot_sfx_id191 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id192 as _;
        if ui.input_int("FootSfxId192", &mut i).build() {
            self.foot_sfx_id192 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id193 as _;
        if ui.input_int("FootSfxId193", &mut i).build() {
            self.foot_sfx_id193 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id194 as _;
        if ui.input_int("FootSfxId194", &mut i).build() {
            self.foot_sfx_id194 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id195 as _;
        if ui.input_int("FootSfxId195", &mut i).build() {
            self.foot_sfx_id195 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id196 as _;
        if ui.input_int("FootSfxId196", &mut i).build() {
            self.foot_sfx_id196 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id197 as _;
        if ui.input_int("FootSfxId197", &mut i).build() {
            self.foot_sfx_id197 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id198 as _;
        if ui.input_int("FootSfxId198", &mut i).build() {
            self.foot_sfx_id198 = i as _;
        }

        let mut i: i32 = self.foot_sfx_id199 as _;
        if ui.input_int("FootSfxId199", &mut i).build() {
            self.foot_sfx_id199 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GameAreaParam {
    pub bonus_soul_single: i32,
    pub bonus_soul_multi: i32,
    pub humanity_point_count_flag_id_top: i32,
    pub humanity_drop_point1: i16,
    pub humanity_drop_point2: i16,
    pub humanity_drop_point3: i16,
    pub humanity_drop_point4: i16,
    pub humanity_drop_point5: i16,
    pub humanity_drop_point6: i16,
    pub humanity_drop_point7: i16,
    pub humanity_drop_point8: i16,
    pub humanity_drop_point9: i16,
    pub humanity_drop_point10: i16,
    pub sub_bonus_soul_single: i32,
    pub subbonus_soul_multi: i32,
    pub pad1: [u8; 8],
}

impl RenderableParam for GameAreaParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.bonus_soul_single as _;
        if ui.input_int("BonusSoul_single", &mut i).build() {
            self.bonus_soul_single = i as _;
        }

        let mut i: i32 = self.bonus_soul_multi as _;
        if ui.input_int("BonusSoul_multi", &mut i).build() {
            self.bonus_soul_multi = i as _;
        }

        let mut i: i32 = self.humanity_point_count_flag_id_top as _;
        if ui.input_int("humanityPointCountFlagIdTop", &mut i).build() {
            self.humanity_point_count_flag_id_top = i as _;
        }

        let mut i: i32 = self.humanity_drop_point1 as _;
        if ui.input_int("humanityDropPoint1", &mut i).build() {
            self.humanity_drop_point1 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point2 as _;
        if ui.input_int("humanityDropPoint2", &mut i).build() {
            self.humanity_drop_point2 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point3 as _;
        if ui.input_int("humanityDropPoint3", &mut i).build() {
            self.humanity_drop_point3 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point4 as _;
        if ui.input_int("humanityDropPoint4", &mut i).build() {
            self.humanity_drop_point4 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point5 as _;
        if ui.input_int("humanityDropPoint5", &mut i).build() {
            self.humanity_drop_point5 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point6 as _;
        if ui.input_int("humanityDropPoint6", &mut i).build() {
            self.humanity_drop_point6 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point7 as _;
        if ui.input_int("humanityDropPoint7", &mut i).build() {
            self.humanity_drop_point7 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point8 as _;
        if ui.input_int("humanityDropPoint8", &mut i).build() {
            self.humanity_drop_point8 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point9 as _;
        if ui.input_int("humanityDropPoint9", &mut i).build() {
            self.humanity_drop_point9 = i as _;
        }

        let mut i: i32 = self.humanity_drop_point10 as _;
        if ui.input_int("humanityDropPoint10", &mut i).build() {
            self.humanity_drop_point10 = i as _;
        }

        let mut i: i32 = self.sub_bonus_soul_single as _;
        if ui.input_int("subBonusSoul_single", &mut i).build() {
            self.sub_bonus_soul_single = i as _;
        }

        let mut i: i32 = self.subbonus_soul_multi as _;
        if ui.input_int("subbonusSoul_multi", &mut i).build() {
            self.subbonus_soul_multi = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GameProgressParam {
    pub event_flag_id: i32,
    pub progress_id: u8,
    pub pad1: [u8; 11],
}

impl RenderableParam for GameProgressParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.event_flag_id as _;
        if ui.input_int("EventFlagId", &mut i).build() {
            self.event_flag_id = i as _;
        }

        let mut i: i32 = self.progress_id as _;
        if ui.input_int("ProgressId", &mut i).build() {
            self.progress_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GemCategoryParam {
    pub sort_no: i32,
    pub manifest_rate: f32,
    pub directional_id: i32,
    pub cate_group_id: i32,
    pub exclude_group_id: i32,
    pub bitfield0: u8,
    pub pad1: [u8; 3],
    pub affinity_cate_id_0: i32,
    pub affinity_modify_rate_0: f32,
    pub affinity_cate_id_1: i32,
    pub affinity_modify_rate_1: f32,
    pub affinity_cate_id_2: i32,
    pub affinity_modify_rate_2: f32,
    pub affinity_cate_id_3: i32,
    pub affinity_modify_rate_3: f32,
}

impl GemCategoryParam {
    #[allow(unused)]
    pub fn set_is_negative(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_negative(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_slot_type_a(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_slot_type_a(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_slot_type_b(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_slot_type_b(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_slot_type_c(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_slot_type_c(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_slot_type_d(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_slot_type_d(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_slot_type_e(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_slot_type_e(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_slot_type_f(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_slot_type_f(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_holygrail_type_group(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn holygrail_type_group(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for GemCategoryParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.sort_no as _;
        if ui.input_int("SortNo", &mut i).build() {
            self.sort_no = i as _;
        }

        let mut i: f32 = self.manifest_rate;
        if ui.input_float("manifestRate", &mut i).build() {
            self.manifest_rate = i;
        }

        let mut i: i32 = self.directional_id as _;
        if ui.input_int("directionalId", &mut i).build() {
            self.directional_id = i as _;
        }

        let mut i: i32 = self.cate_group_id as _;
        if ui.input_int("cateGroupId", &mut i).build() {
            self.cate_group_id = i as _;
        }

        let mut i: i32 = self.exclude_group_id as _;
        if ui.input_int("excludeGroupId", &mut i).build() {
            self.exclude_group_id = i as _;
        }

        let mut b: bool = self.is_negative();
        if ui.checkbox("isNegative", &mut b) {
            self.set_is_negative(b);
        }

        let mut b: bool = self.enable_slot_type_a();
        if ui.checkbox("enableSlotTypeA", &mut b) {
            self.set_enable_slot_type_a(b);
        }

        let mut b: bool = self.enable_slot_type_b();
        if ui.checkbox("enableSlotTypeB", &mut b) {
            self.set_enable_slot_type_b(b);
        }

        let mut b: bool = self.enable_slot_type_c();
        if ui.checkbox("enableSlotTypeC", &mut b) {
            self.set_enable_slot_type_c(b);
        }

        let mut b: bool = self.enable_slot_type_d();
        if ui.checkbox("enableSlotTypeD", &mut b) {
            self.set_enable_slot_type_d(b);
        }

        let mut b: bool = self.enable_slot_type_e();
        if ui.checkbox("enableSlotTypeE", &mut b) {
            self.set_enable_slot_type_e(b);
        }

        let mut b: bool = self.enable_slot_type_f();
        if ui.checkbox("enableSlotTypeF", &mut b) {
            self.set_enable_slot_type_f(b);
        }

        let mut b: bool = self.holygrail_type_group();
        if ui.checkbox("holygrailTypeGroup", &mut b) {
            self.set_holygrail_type_group(b);
        }

        let mut i: i32 = self.affinity_cate_id_0 as _;
        if ui.input_int("affinityCateId_0", &mut i).build() {
            self.affinity_cate_id_0 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_0;
        if ui.input_float("affinityModifyRate_0", &mut i).build() {
            self.affinity_modify_rate_0 = i;
        }

        let mut i: i32 = self.affinity_cate_id_1 as _;
        if ui.input_int("affinityCateId_1", &mut i).build() {
            self.affinity_cate_id_1 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_1;
        if ui.input_float("affinityModifyRate_1", &mut i).build() {
            self.affinity_modify_rate_1 = i;
        }

        let mut i: i32 = self.affinity_cate_id_2 as _;
        if ui.input_int("affinityCateId_2", &mut i).build() {
            self.affinity_cate_id_2 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_2;
        if ui.input_float("affinityModifyRate_2", &mut i).build() {
            self.affinity_modify_rate_2 = i;
        }

        let mut i: i32 = self.affinity_cate_id_3 as _;
        if ui.input_int("affinityCateId_3", &mut i).build() {
            self.affinity_cate_id_3 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_3;
        if ui.input_float("affinityModifyRate_3", &mut i).build() {
            self.affinity_modify_rate_3 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GemDropDopingParam {
    pub rank_min: i32,
    pub rank_max: i32,
    pub normal_distribution_ave: i32,
    pub normal_distribution_sigma: i32,
    pub slot_type_a: f32,
    pub slot_type_b: f32,
    pub slot_type_c: f32,
    pub slot_type_d: f32,
    pub slot_type_e: f32,
    pub slot_type_f: f32,
    pub directional_id_rate_0: f32,
    pub directional_id_rate_1: f32,
    pub directional_id_rate_2: f32,
    pub directional_id_rate_3: f32,
    pub directional_id_rate_4: f32,
    pub directional_id_rate_5: f32,
    pub directional_id_rate_6: f32,
    pub directional_id_rate_7: f32,
}

impl RenderableParam for GemDropDopingParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.rank_min as _;
        if ui.input_int("rankMin", &mut i).build() {
            self.rank_min = i as _;
        }

        let mut i: i32 = self.rank_max as _;
        if ui.input_int("rankMax", &mut i).build() {
            self.rank_max = i as _;
        }

        let mut i: i32 = self.normal_distribution_ave as _;
        if ui.input_int("normalDistributionAve", &mut i).build() {
            self.normal_distribution_ave = i as _;
        }

        let mut i: i32 = self.normal_distribution_sigma as _;
        if ui.input_int("normalDistributionSigma", &mut i).build() {
            self.normal_distribution_sigma = i as _;
        }

        let mut i: f32 = self.slot_type_a;
        if ui.input_float("SlotTypeA", &mut i).build() {
            self.slot_type_a = i;
        }

        let mut i: f32 = self.slot_type_b;
        if ui.input_float("SlotTypeB", &mut i).build() {
            self.slot_type_b = i;
        }

        let mut i: f32 = self.slot_type_c;
        if ui.input_float("SlotTypeC", &mut i).build() {
            self.slot_type_c = i;
        }

        let mut i: f32 = self.slot_type_d;
        if ui.input_float("SlotTypeD", &mut i).build() {
            self.slot_type_d = i;
        }

        let mut i: f32 = self.slot_type_e;
        if ui.input_float("SlotTypeE", &mut i).build() {
            self.slot_type_e = i;
        }

        let mut i: f32 = self.slot_type_f;
        if ui.input_float("SlotTypeF", &mut i).build() {
            self.slot_type_f = i;
        }

        let mut i: f32 = self.directional_id_rate_0;
        if ui.input_float("directionalIdRate_0", &mut i).build() {
            self.directional_id_rate_0 = i;
        }

        let mut i: f32 = self.directional_id_rate_1;
        if ui.input_float("directionalIdRate_1", &mut i).build() {
            self.directional_id_rate_1 = i;
        }

        let mut i: f32 = self.directional_id_rate_2;
        if ui.input_float("directionalIdRate_2", &mut i).build() {
            self.directional_id_rate_2 = i;
        }

        let mut i: f32 = self.directional_id_rate_3;
        if ui.input_float("directionalIdRate_3", &mut i).build() {
            self.directional_id_rate_3 = i;
        }

        let mut i: f32 = self.directional_id_rate_4;
        if ui.input_float("directionalIdRate_4", &mut i).build() {
            self.directional_id_rate_4 = i;
        }

        let mut i: f32 = self.directional_id_rate_5;
        if ui.input_float("directionalIdRate_5", &mut i).build() {
            self.directional_id_rate_5 = i;
        }

        let mut i: f32 = self.directional_id_rate_6;
        if ui.input_float("directionalIdRate_6", &mut i).build() {
            self.directional_id_rate_6 = i;
        }

        let mut i: f32 = self.directional_id_rate_7;
        if ui.input_float("directionalIdRate_7", &mut i).build() {
            self.directional_id_rate_7 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GemDropModifyParam {
    pub slot_type_rate_a: f32,
    pub slot_type_rate_b: f32,
    pub slot_type_rate_c: f32,
    pub slot_type_rate_d: f32,
    pub slot_type_rate_e: f32,
    pub slot_type_rate_f: f32,
    pub directional_id_rate_0: f32,
    pub directional_id_rate_1: f32,
    pub directional_id_rate_2: f32,
    pub directional_id_rate_3: f32,
    pub directional_id_rate_4: f32,
    pub directional_id_rate_5: f32,
    pub directional_id_rate_6: f32,
    pub directional_id_rate_7: f32,
    pub affinity_cate_id_0: i32,
    pub affinity_modify_rate_0: f32,
    pub affinity_cate_id_1: i32,
    pub affinity_modify_rate_1: f32,
    pub affinity_cate_id_2: i32,
    pub affinity_modify_rate_2: f32,
    pub affinity_cate_id_3: i32,
    pub affinity_modify_rate_3: f32,
    pub manifest_rate_0: f32,
    pub manifest_rate_1: f32,
    pub manifest_rate_2: f32,
    pub manifest_rate_3: f32,
    pub manifest_rate_4: f32,
    pub manifest_rate_5: f32,
    pub negativize_rate_0: f32,
    pub normal_distribution_ave: i32,
    pub normal_distribution_sigma: i32,
}

impl RenderableParam for GemDropModifyParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.slot_type_rate_a;
        if ui.input_float("slotTypeRateA", &mut i).build() {
            self.slot_type_rate_a = i;
        }

        let mut i: f32 = self.slot_type_rate_b;
        if ui.input_float("slotTypeRateB", &mut i).build() {
            self.slot_type_rate_b = i;
        }

        let mut i: f32 = self.slot_type_rate_c;
        if ui.input_float("slotTypeRateC", &mut i).build() {
            self.slot_type_rate_c = i;
        }

        let mut i: f32 = self.slot_type_rate_d;
        if ui.input_float("slotTypeRateD", &mut i).build() {
            self.slot_type_rate_d = i;
        }

        let mut i: f32 = self.slot_type_rate_e;
        if ui.input_float("slotTypeRateE", &mut i).build() {
            self.slot_type_rate_e = i;
        }

        let mut i: f32 = self.slot_type_rate_f;
        if ui.input_float("slotTypeRateF", &mut i).build() {
            self.slot_type_rate_f = i;
        }

        let mut i: f32 = self.directional_id_rate_0;
        if ui.input_float("directionalIdRate_0", &mut i).build() {
            self.directional_id_rate_0 = i;
        }

        let mut i: f32 = self.directional_id_rate_1;
        if ui.input_float("directionalIdRate_1", &mut i).build() {
            self.directional_id_rate_1 = i;
        }

        let mut i: f32 = self.directional_id_rate_2;
        if ui.input_float("directionalIdRate_2", &mut i).build() {
            self.directional_id_rate_2 = i;
        }

        let mut i: f32 = self.directional_id_rate_3;
        if ui.input_float("directionalIdRate_3", &mut i).build() {
            self.directional_id_rate_3 = i;
        }

        let mut i: f32 = self.directional_id_rate_4;
        if ui.input_float("directionalIdRate_4", &mut i).build() {
            self.directional_id_rate_4 = i;
        }

        let mut i: f32 = self.directional_id_rate_5;
        if ui.input_float("directionalIdRate_5", &mut i).build() {
            self.directional_id_rate_5 = i;
        }

        let mut i: f32 = self.directional_id_rate_6;
        if ui.input_float("directionalIdRate_6", &mut i).build() {
            self.directional_id_rate_6 = i;
        }

        let mut i: f32 = self.directional_id_rate_7;
        if ui.input_float("directionalIdRate_7", &mut i).build() {
            self.directional_id_rate_7 = i;
        }

        let mut i: i32 = self.affinity_cate_id_0 as _;
        if ui.input_int("affinityCateId_0", &mut i).build() {
            self.affinity_cate_id_0 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_0;
        if ui.input_float("affinityModifyRate_0", &mut i).build() {
            self.affinity_modify_rate_0 = i;
        }

        let mut i: i32 = self.affinity_cate_id_1 as _;
        if ui.input_int("affinityCateId_1", &mut i).build() {
            self.affinity_cate_id_1 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_1;
        if ui.input_float("affinityModifyRate_1", &mut i).build() {
            self.affinity_modify_rate_1 = i;
        }

        let mut i: i32 = self.affinity_cate_id_2 as _;
        if ui.input_int("affinityCateId_2", &mut i).build() {
            self.affinity_cate_id_2 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_2;
        if ui.input_float("affinityModifyRate_2", &mut i).build() {
            self.affinity_modify_rate_2 = i;
        }

        let mut i: i32 = self.affinity_cate_id_3 as _;
        if ui.input_int("affinityCateId_3", &mut i).build() {
            self.affinity_cate_id_3 = i as _;
        }

        let mut i: f32 = self.affinity_modify_rate_3;
        if ui.input_float("affinityModifyRate_3", &mut i).build() {
            self.affinity_modify_rate_3 = i;
        }

        let mut i: f32 = self.manifest_rate_0;
        if ui.input_float("manifestRate_0", &mut i).build() {
            self.manifest_rate_0 = i;
        }

        let mut i: f32 = self.manifest_rate_1;
        if ui.input_float("manifestRate_1", &mut i).build() {
            self.manifest_rate_1 = i;
        }

        let mut i: f32 = self.manifest_rate_2;
        if ui.input_float("manifestRate_2", &mut i).build() {
            self.manifest_rate_2 = i;
        }

        let mut i: f32 = self.manifest_rate_3;
        if ui.input_float("manifestRate_3", &mut i).build() {
            self.manifest_rate_3 = i;
        }

        let mut i: f32 = self.manifest_rate_4;
        if ui.input_float("manifestRate_4", &mut i).build() {
            self.manifest_rate_4 = i;
        }

        let mut i: f32 = self.manifest_rate_5;
        if ui.input_float("manifestRate_5", &mut i).build() {
            self.manifest_rate_5 = i;
        }

        let mut i: f32 = self.negativize_rate_0;
        if ui.input_float("negativizeRate_0", &mut i).build() {
            self.negativize_rate_0 = i;
        }

        let mut i: i32 = self.normal_distribution_ave as _;
        if ui.input_int("normalDistributionAve", &mut i).build() {
            self.normal_distribution_ave = i as _;
        }

        let mut i: i32 = self.normal_distribution_sigma as _;
        if ui.input_int("normalDistributionSigma", &mut i).build() {
            self.normal_distribution_sigma = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GemeffectParam {
    pub sp_effect_id: i32,
    pub category_id: i32,
    pub effect_rank: i32,
    pub rank_min: i32,
    pub rank_max: i32,
    pub disposal_price: i32,
    pub gem_icon_id_offset: i16,
    pub pad1: [u8; 2],
    pub sp_effect_id_for_atk: i32,
}

impl RenderableParam for GemeffectParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.sp_effect_id as _;
        if ui.input_int("spEffectId", &mut i).build() {
            self.sp_effect_id = i as _;
        }

        let mut i: i32 = self.category_id as _;
        if ui.input_int("categoryId", &mut i).build() {
            self.category_id = i as _;
        }

        let mut i: i32 = self.effect_rank as _;
        if ui.input_int("effectRank", &mut i).build() {
            self.effect_rank = i as _;
        }

        let mut i: i32 = self.rank_min as _;
        if ui.input_int("rankMin", &mut i).build() {
            self.rank_min = i as _;
        }

        let mut i: i32 = self.rank_max as _;
        if ui.input_int("rankMax", &mut i).build() {
            self.rank_max = i as _;
        }

        let mut i: i32 = self.disposal_price as _;
        if ui.input_int("disposalPrice", &mut i).build() {
            self.disposal_price = i as _;
        }

        let mut i: i32 = self.gem_icon_id_offset as _;
        if ui.input_int("gemIconIdOffset", &mut i).build() {
            self.gem_icon_id_offset = i as _;
        }

        let mut i: i32 = self.sp_effect_id_for_atk as _;
        if ui.input_int("spEffectId_forAtk", &mut i).build() {
            self.sp_effect_id_for_atk = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct GemGenParam {
    pub pad: [u8; 3],
    pub field0x04: i32,
    pub gem_name_id_offset: i32,
    pub disable_slot_rate_modify: i32,
    pub slot_type_rate_a: f32,
    pub slot_type_rate_b: f32,
    pub slot_type_rate_c: f32,
    pub slot_type_rate_d: f32,
    pub slot_type_rate_e: f32,
    pub slot_type_rate_f: f32,
    pub gem_rank_doping: u8,
    pub pad1: [u8; 3],
    pub gemeffect_gen_param_type_0: i32,
    pub gemeffect_gen_param_0: i32,
    pub manifest_rate_0: f32,
    pub negativize_rate_0: f32,
    pub gemeffect_gen_param_type_1: i32,
    pub gemeffect_gen_param_1: i32,
    pub manifest_rate_1: f32,
    pub negativize_rate_1: f32,
    pub gemeffect_gen_param_type_2: i32,
    pub gemeffect_gen_param_2: i32,
    pub manifest_rate_2: f32,
    pub negativize_rate_2: f32,
    pub gemeffect_gen_param_type_3: i32,
    pub gemeffect_gen_param_3: i32,
    pub manifest_rate_3: f32,
    pub negativize_rate_3: f32,
    pub gemeffect_gen_param_type_4: i32,
    pub gemeffect_gen_param_4: i32,
    pub manifest_rate_4: f32,
    pub negativize_rate_4: f32,
    pub gemeffect_gen_param_type_5: i32,
    pub gemeffect_gen_param_5: i32,
    pub manifest_rate_5: f32,
    pub negativize_rate_5: f32,
}

impl RenderableParam for GemGenParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.field0x04 as _;
        if ui.input_int("0x04", &mut i).build() {
            self.field0x04 = i as _;
        }

        let mut i: i32 = self.gem_name_id_offset as _;
        if ui.input_int("gemNameIdOffset", &mut i).build() {
            self.gem_name_id_offset = i as _;
        }

        let mut i: i32 = self.disable_slot_rate_modify as _;
        if ui.input_int("disableSlotRateModify", &mut i).build() {
            self.disable_slot_rate_modify = i as _;
        }

        let mut i: f32 = self.slot_type_rate_a;
        if ui.input_float("slotTypeRateA", &mut i).build() {
            self.slot_type_rate_a = i;
        }

        let mut i: f32 = self.slot_type_rate_b;
        if ui.input_float("slotTypeRateB", &mut i).build() {
            self.slot_type_rate_b = i;
        }

        let mut i: f32 = self.slot_type_rate_c;
        if ui.input_float("slotTypeRateC", &mut i).build() {
            self.slot_type_rate_c = i;
        }

        let mut i: f32 = self.slot_type_rate_d;
        if ui.input_float("slotTypeRateD", &mut i).build() {
            self.slot_type_rate_d = i;
        }

        let mut i: f32 = self.slot_type_rate_e;
        if ui.input_float("slotTypeRateE", &mut i).build() {
            self.slot_type_rate_e = i;
        }

        let mut i: f32 = self.slot_type_rate_f;
        if ui.input_float("slotTypeRateF", &mut i).build() {
            self.slot_type_rate_f = i;
        }

        let mut i: i32 = self.gem_rank_doping as _;
        if ui.input_int("gemRankDoping", &mut i).build() {
            self.gem_rank_doping = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_type_0 as _;
        if ui.input_int("gemeffectGenParamType_0", &mut i).build() {
            self.gemeffect_gen_param_type_0 = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_0 as _;
        if ui.input_int("gemeffectGenParam_0", &mut i).build() {
            self.gemeffect_gen_param_0 = i as _;
        }

        let mut i: f32 = self.manifest_rate_0;
        if ui.input_float("manifestRate_0", &mut i).build() {
            self.manifest_rate_0 = i;
        }

        let mut i: f32 = self.negativize_rate_0;
        if ui.input_float("negativizeRate_0", &mut i).build() {
            self.negativize_rate_0 = i;
        }

        let mut i: i32 = self.gemeffect_gen_param_type_1 as _;
        if ui.input_int("gemeffectGenParamType_1", &mut i).build() {
            self.gemeffect_gen_param_type_1 = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_1 as _;
        if ui.input_int("gemeffectGenParam_1", &mut i).build() {
            self.gemeffect_gen_param_1 = i as _;
        }

        let mut i: f32 = self.manifest_rate_1;
        if ui.input_float("manifestRate_1", &mut i).build() {
            self.manifest_rate_1 = i;
        }

        let mut i: f32 = self.negativize_rate_1;
        if ui.input_float("negativizeRate_1", &mut i).build() {
            self.negativize_rate_1 = i;
        }

        let mut i: i32 = self.gemeffect_gen_param_type_2 as _;
        if ui.input_int("gemeffectGenParamType_2", &mut i).build() {
            self.gemeffect_gen_param_type_2 = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_2 as _;
        if ui.input_int("gemeffectGenParam_2", &mut i).build() {
            self.gemeffect_gen_param_2 = i as _;
        }

        let mut i: f32 = self.manifest_rate_2;
        if ui.input_float("manifestRate_2", &mut i).build() {
            self.manifest_rate_2 = i;
        }

        let mut i: f32 = self.negativize_rate_2;
        if ui.input_float("negativizeRate_2", &mut i).build() {
            self.negativize_rate_2 = i;
        }

        let mut i: i32 = self.gemeffect_gen_param_type_3 as _;
        if ui.input_int("gemeffectGenParamType_3", &mut i).build() {
            self.gemeffect_gen_param_type_3 = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_3 as _;
        if ui.input_int("gemeffectGenParam_3", &mut i).build() {
            self.gemeffect_gen_param_3 = i as _;
        }

        let mut i: f32 = self.manifest_rate_3;
        if ui.input_float("manifestRate_3", &mut i).build() {
            self.manifest_rate_3 = i;
        }

        let mut i: f32 = self.negativize_rate_3;
        if ui.input_float("negativizeRate_3", &mut i).build() {
            self.negativize_rate_3 = i;
        }

        let mut i: i32 = self.gemeffect_gen_param_type_4 as _;
        if ui.input_int("gemeffectGenParamType_4", &mut i).build() {
            self.gemeffect_gen_param_type_4 = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_4 as _;
        if ui.input_int("gemeffectGenParam_4", &mut i).build() {
            self.gemeffect_gen_param_4 = i as _;
        }

        let mut i: f32 = self.manifest_rate_4;
        if ui.input_float("manifestRate_4", &mut i).build() {
            self.manifest_rate_4 = i;
        }

        let mut i: f32 = self.negativize_rate_4;
        if ui.input_float("negativizeRate_4", &mut i).build() {
            self.negativize_rate_4 = i;
        }

        let mut i: i32 = self.gemeffect_gen_param_type_5 as _;
        if ui.input_int("gemeffectGenParamType_5", &mut i).build() {
            self.gemeffect_gen_param_type_5 = i as _;
        }

        let mut i: i32 = self.gemeffect_gen_param_5 as _;
        if ui.input_int("gemeffectGenParam_5", &mut i).build() {
            self.gemeffect_gen_param_5 = i as _;
        }

        let mut i: f32 = self.manifest_rate_5;
        if ui.input_float("manifestRate_5", &mut i).build() {
            self.manifest_rate_5 = i;
        }

        let mut i: f32 = self.negativize_rate_5;
        if ui.input_float("negativizeRate_5", &mut i).build() {
            self.negativize_rate_5 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct HitEffectSeParam {
    pub h00_hit_effect_se_id0: i32,
    pub h00_hit_effect_se_id1: i32,
    pub h00_hit_effect_se_id2: i32,
    pub h00_hit_effect_se_id3: i32,
    pub h00_hit_effect_se_id4: i32,
    pub h00_hit_effect_se_id5: i32,
    pub h00_hit_effect_se_id6: i32,
    pub h00_hit_effect_se_id7: i32,
    pub h01_hit_effect_se_id0: i32,
    pub h01_hit_effect_se_id1: i32,
    pub h01_hit_effect_se_id2: i32,
    pub h01_hit_effect_se_id3: i32,
    pub h01_hit_effect_se_id4: i32,
    pub h01_hit_effect_se_id5: i32,
    pub h01_hit_effect_se_id6: i32,
    pub h01_hit_effect_se_id7: i32,
    pub h02_hit_effect_se_id0: i32,
    pub h02_hit_effect_se_id1: i32,
    pub h02_hit_effect_se_id2: i32,
    pub h02_hit_effect_se_id3: i32,
    pub h02_hit_effect_se_id4: i32,
    pub h02_hit_effect_se_id5: i32,
    pub h02_hit_effect_se_id6: i32,
    pub h02_hit_effect_se_id7: i32,
    pub h03_hit_effect_se_id0: i32,
    pub h03_hit_effect_se_id1: i32,
    pub h03_hit_effect_se_id2: i32,
    pub h03_hit_effect_se_id3: i32,
    pub h03_hit_effect_se_id4: i32,
    pub h03_hit_effect_se_id5: i32,
    pub h03_hit_effect_se_id6: i32,
    pub h03_hit_effect_se_id7: i32,
    pub h04_hit_effect_se_id0: i32,
    pub h04_hit_effect_se_id1: i32,
    pub h04_hit_effect_se_id2: i32,
    pub h04_hit_effect_se_id3: i32,
    pub h04_hit_effect_se_id4: i32,
    pub h04_hit_effect_se_id5: i32,
    pub h04_hit_effect_se_id6: i32,
    pub h04_hit_effect_se_id7: i32,
    pub h05_hit_effect_se_id0: i32,
    pub h05_hit_effect_se_id1: i32,
    pub h05_hit_effect_se_id2: i32,
    pub h05_hit_effect_se_id3: i32,
    pub h05_hit_effect_se_id4: i32,
    pub h05_hit_effect_se_id5: i32,
    pub h05_hit_effect_se_id6: i32,
    pub h05_hit_effect_se_id7: i32,
    pub h06_hit_effect_se_id0: i32,
    pub h06_hit_effect_se_id1: i32,
    pub h06_hit_effect_se_id2: i32,
    pub h06_hit_effect_se_id3: i32,
    pub h06_hit_effect_se_id4: i32,
    pub h06_hit_effect_se_id5: i32,
    pub h06_hit_effect_se_id6: i32,
    pub h06_hit_effect_se_id7: i32,
    pub h07_hit_effect_se_id0: i32,
    pub h07_hit_effect_se_id1: i32,
    pub h07_hit_effect_se_id2: i32,
    pub h07_hit_effect_se_id3: i32,
    pub h07_hit_effect_se_id4: i32,
    pub h07_hit_effect_se_id5: i32,
    pub h07_hit_effect_se_id6: i32,
    pub h07_hit_effect_se_id7: i32,
    pub h08_hit_effect_se_id0: i32,
    pub h08_hit_effect_se_id1: i32,
    pub h08_hit_effect_se_id2: i32,
    pub h08_hit_effect_se_id3: i32,
    pub h08_hit_effect_se_id4: i32,
    pub h08_hit_effect_se_id5: i32,
    pub h08_hit_effect_se_id6: i32,
    pub h08_hit_effect_se_id7: i32,
    pub h09_hit_effect_se_id0: i32,
    pub h09_hit_effect_se_id1: i32,
    pub h09_hit_effect_se_id2: i32,
    pub h09_hit_effect_se_id3: i32,
    pub h09_hit_effect_se_id4: i32,
    pub h09_hit_effect_se_id5: i32,
    pub h09_hit_effect_se_id6: i32,
    pub h09_hit_effect_se_id7: i32,
    pub h10_hit_effect_se_id0: i32,
    pub h10_hit_effect_se_id1: i32,
    pub h10_hit_effect_se_id2: i32,
    pub h10_hit_effect_se_id3: i32,
    pub h10_hit_effect_se_id4: i32,
    pub h10_hit_effect_se_id5: i32,
    pub h10_hit_effect_se_id6: i32,
    pub h10_hit_effect_se_id7: i32,
    pub h11_hit_effect_se_id0: i32,
    pub h11_hit_effect_se_id1: i32,
    pub h11_hit_effect_se_id2: i32,
    pub h11_hit_effect_se_id3: i32,
    pub h11_hit_effect_se_id4: i32,
    pub h11_hit_effect_se_id5: i32,
    pub h11_hit_effect_se_id6: i32,
    pub h11_hit_effect_se_id7: i32,
    pub h12_hit_effect_se_id0: i32,
    pub h12_hit_effect_se_id1: i32,
    pub h12_hit_effect_se_id2: i32,
    pub h12_hit_effect_se_id3: i32,
    pub h12_hit_effect_se_id4: i32,
    pub h12_hit_effect_se_id5: i32,
    pub h12_hit_effect_se_id6: i32,
    pub h12_hit_effect_se_id7: i32,
    pub h13_hit_effect_se_id0: i32,
    pub h13_hit_effect_se_id1: i32,
    pub h13_hit_effect_se_id2: i32,
    pub h13_hit_effect_se_id3: i32,
    pub h13_hit_effect_se_id4: i32,
    pub h13_hit_effect_se_id5: i32,
    pub h13_hit_effect_se_id6: i32,
    pub h13_hit_effect_se_id7: i32,
    pub h14_hit_effect_se_id0: i32,
    pub h14_hit_effect_se_id1: i32,
    pub h14_hit_effect_se_id2: i32,
    pub h14_hit_effect_se_id3: i32,
    pub h14_hit_effect_se_id4: i32,
    pub h14_hit_effect_se_id5: i32,
    pub h14_hit_effect_se_id6: i32,
    pub h14_hit_effect_se_id7: i32,
    pub h15_hit_effect_se_id0: i32,
    pub h15_hit_effect_se_id1: i32,
    pub h15_hit_effect_se_id2: i32,
    pub h15_hit_effect_se_id3: i32,
    pub h15_hit_effect_se_id4: i32,
    pub h15_hit_effect_se_id5: i32,
    pub h15_hit_effect_se_id6: i32,
    pub h15_hit_effect_se_id7: i32,
    pub h16_hit_effect_se_id0: i32,
    pub h16_hit_effect_se_id1: i32,
    pub h16_hit_effect_se_id2: i32,
    pub h16_hit_effect_se_id3: i32,
    pub h16_hit_effect_se_id4: i32,
    pub h16_hit_effect_se_id5: i32,
    pub h16_hit_effect_se_id6: i32,
    pub h16_hit_effect_se_id7: i32,
    pub h17_hit_effect_se_id0: i32,
    pub h17_hit_effect_se_id1: i32,
    pub h17_hit_effect_se_id2: i32,
    pub h17_hit_effect_se_id3: i32,
    pub h17_hit_effect_se_id4: i32,
    pub h17_hit_effect_se_id5: i32,
    pub h17_hit_effect_se_id6: i32,
    pub h17_hit_effect_se_id7: i32,
    pub h18_hit_effect_se_id0: i32,
    pub h18_hit_effect_se_id1: i32,
    pub h18_hit_effect_se_id2: i32,
    pub h18_hit_effect_se_id3: i32,
    pub h18_hit_effect_se_id4: i32,
    pub h18_hit_effect_se_id5: i32,
    pub h18_hit_effect_se_id6: i32,
    pub h18_hit_effect_se_id7: i32,
    pub h19_hit_effect_se_id0: i32,
    pub h19_hit_effect_se_id1: i32,
    pub h19_hit_effect_se_id2: i32,
    pub h19_hit_effect_se_id3: i32,
    pub h19_hit_effect_se_id4: i32,
    pub h19_hit_effect_se_id5: i32,
    pub h19_hit_effect_se_id6: i32,
    pub h19_hit_effect_se_id7: i32,
}

impl RenderableParam for HitEffectSeParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.h00_hit_effect_se_id0 as _;
        if ui.input_int("H00_HitEffectSeId0", &mut i).build() {
            self.h00_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id1 as _;
        if ui.input_int("H00_HitEffectSeId1", &mut i).build() {
            self.h00_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id2 as _;
        if ui.input_int("H00_HitEffectSeId2", &mut i).build() {
            self.h00_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id3 as _;
        if ui.input_int("H00_HitEffectSeId3", &mut i).build() {
            self.h00_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id4 as _;
        if ui.input_int("H00_HitEffectSeId4", &mut i).build() {
            self.h00_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id5 as _;
        if ui.input_int("H00_HitEffectSeId5", &mut i).build() {
            self.h00_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id6 as _;
        if ui.input_int("H00_HitEffectSeId6", &mut i).build() {
            self.h00_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h00_hit_effect_se_id7 as _;
        if ui.input_int("H00_HitEffectSeId7", &mut i).build() {
            self.h00_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id0 as _;
        if ui.input_int("H01_HitEffectSeId0", &mut i).build() {
            self.h01_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id1 as _;
        if ui.input_int("H01_HitEffectSeId1", &mut i).build() {
            self.h01_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id2 as _;
        if ui.input_int("H01_HitEffectSeId2", &mut i).build() {
            self.h01_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id3 as _;
        if ui.input_int("H01_HitEffectSeId3", &mut i).build() {
            self.h01_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id4 as _;
        if ui.input_int("H01_HitEffectSeId4", &mut i).build() {
            self.h01_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id5 as _;
        if ui.input_int("H01_HitEffectSeId5", &mut i).build() {
            self.h01_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id6 as _;
        if ui.input_int("H01_HitEffectSeId6", &mut i).build() {
            self.h01_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h01_hit_effect_se_id7 as _;
        if ui.input_int("H01_HitEffectSeId7", &mut i).build() {
            self.h01_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id0 as _;
        if ui.input_int("H02_HitEffectSeId0", &mut i).build() {
            self.h02_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id1 as _;
        if ui.input_int("H02_HitEffectSeId1", &mut i).build() {
            self.h02_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id2 as _;
        if ui.input_int("H02_HitEffectSeId2", &mut i).build() {
            self.h02_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id3 as _;
        if ui.input_int("H02_HitEffectSeId3", &mut i).build() {
            self.h02_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id4 as _;
        if ui.input_int("H02_HitEffectSeId4", &mut i).build() {
            self.h02_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id5 as _;
        if ui.input_int("H02_HitEffectSeId5", &mut i).build() {
            self.h02_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id6 as _;
        if ui.input_int("H02_HitEffectSeId6", &mut i).build() {
            self.h02_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h02_hit_effect_se_id7 as _;
        if ui.input_int("H02_HitEffectSeId7", &mut i).build() {
            self.h02_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id0 as _;
        if ui.input_int("H03_HitEffectSeId0", &mut i).build() {
            self.h03_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id1 as _;
        if ui.input_int("H03_HitEffectSeId1", &mut i).build() {
            self.h03_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id2 as _;
        if ui.input_int("H03_HitEffectSeId2", &mut i).build() {
            self.h03_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id3 as _;
        if ui.input_int("H03_HitEffectSeId3", &mut i).build() {
            self.h03_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id4 as _;
        if ui.input_int("H03_HitEffectSeId4", &mut i).build() {
            self.h03_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id5 as _;
        if ui.input_int("H03_HitEffectSeId5", &mut i).build() {
            self.h03_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id6 as _;
        if ui.input_int("H03_HitEffectSeId6", &mut i).build() {
            self.h03_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h03_hit_effect_se_id7 as _;
        if ui.input_int("H03_HitEffectSeId7", &mut i).build() {
            self.h03_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id0 as _;
        if ui.input_int("H04_HitEffectSeId0", &mut i).build() {
            self.h04_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id1 as _;
        if ui.input_int("H04_HitEffectSeId1", &mut i).build() {
            self.h04_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id2 as _;
        if ui.input_int("H04_HitEffectSeId2", &mut i).build() {
            self.h04_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id3 as _;
        if ui.input_int("H04_HitEffectSeId3", &mut i).build() {
            self.h04_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id4 as _;
        if ui.input_int("H04_HitEffectSeId4", &mut i).build() {
            self.h04_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id5 as _;
        if ui.input_int("H04_HitEffectSeId5", &mut i).build() {
            self.h04_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id6 as _;
        if ui.input_int("H04_HitEffectSeId6", &mut i).build() {
            self.h04_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h04_hit_effect_se_id7 as _;
        if ui.input_int("H04_HitEffectSeId7", &mut i).build() {
            self.h04_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id0 as _;
        if ui.input_int("H05_HitEffectSeId0", &mut i).build() {
            self.h05_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id1 as _;
        if ui.input_int("H05_HitEffectSeId1", &mut i).build() {
            self.h05_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id2 as _;
        if ui.input_int("H05_HitEffectSeId2", &mut i).build() {
            self.h05_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id3 as _;
        if ui.input_int("H05_HitEffectSeId3", &mut i).build() {
            self.h05_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id4 as _;
        if ui.input_int("H05_HitEffectSeId4", &mut i).build() {
            self.h05_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id5 as _;
        if ui.input_int("H05_HitEffectSeId5", &mut i).build() {
            self.h05_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id6 as _;
        if ui.input_int("H05_HitEffectSeId6", &mut i).build() {
            self.h05_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h05_hit_effect_se_id7 as _;
        if ui.input_int("H05_HitEffectSeId7", &mut i).build() {
            self.h05_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id0 as _;
        if ui.input_int("H06_HitEffectSeId0", &mut i).build() {
            self.h06_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id1 as _;
        if ui.input_int("H06_HitEffectSeId1", &mut i).build() {
            self.h06_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id2 as _;
        if ui.input_int("H06_HitEffectSeId2", &mut i).build() {
            self.h06_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id3 as _;
        if ui.input_int("H06_HitEffectSeId3", &mut i).build() {
            self.h06_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id4 as _;
        if ui.input_int("H06_HitEffectSeId4", &mut i).build() {
            self.h06_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id5 as _;
        if ui.input_int("H06_HitEffectSeId5", &mut i).build() {
            self.h06_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id6 as _;
        if ui.input_int("H06_HitEffectSeId6", &mut i).build() {
            self.h06_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h06_hit_effect_se_id7 as _;
        if ui.input_int("H06_HitEffectSeId7", &mut i).build() {
            self.h06_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id0 as _;
        if ui.input_int("H07_HitEffectSeId0", &mut i).build() {
            self.h07_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id1 as _;
        if ui.input_int("H07_HitEffectSeId1", &mut i).build() {
            self.h07_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id2 as _;
        if ui.input_int("H07_HitEffectSeId2", &mut i).build() {
            self.h07_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id3 as _;
        if ui.input_int("H07_HitEffectSeId3", &mut i).build() {
            self.h07_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id4 as _;
        if ui.input_int("H07_HitEffectSeId4", &mut i).build() {
            self.h07_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id5 as _;
        if ui.input_int("H07_HitEffectSeId5", &mut i).build() {
            self.h07_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id6 as _;
        if ui.input_int("H07_HitEffectSeId6", &mut i).build() {
            self.h07_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h07_hit_effect_se_id7 as _;
        if ui.input_int("H07_HitEffectSeId7", &mut i).build() {
            self.h07_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id0 as _;
        if ui.input_int("H08_HitEffectSeId0", &mut i).build() {
            self.h08_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id1 as _;
        if ui.input_int("H08_HitEffectSeId1", &mut i).build() {
            self.h08_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id2 as _;
        if ui.input_int("H08_HitEffectSeId2", &mut i).build() {
            self.h08_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id3 as _;
        if ui.input_int("H08_HitEffectSeId3", &mut i).build() {
            self.h08_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id4 as _;
        if ui.input_int("H08_HitEffectSeId4", &mut i).build() {
            self.h08_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id5 as _;
        if ui.input_int("H08_HitEffectSeId5", &mut i).build() {
            self.h08_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id6 as _;
        if ui.input_int("H08_HitEffectSeId6", &mut i).build() {
            self.h08_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h08_hit_effect_se_id7 as _;
        if ui.input_int("H08_HitEffectSeId7", &mut i).build() {
            self.h08_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id0 as _;
        if ui.input_int("H09_HitEffectSeId0", &mut i).build() {
            self.h09_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id1 as _;
        if ui.input_int("H09_HitEffectSeId1", &mut i).build() {
            self.h09_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id2 as _;
        if ui.input_int("H09_HitEffectSeId2", &mut i).build() {
            self.h09_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id3 as _;
        if ui.input_int("H09_HitEffectSeId3", &mut i).build() {
            self.h09_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id4 as _;
        if ui.input_int("H09_HitEffectSeId4", &mut i).build() {
            self.h09_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id5 as _;
        if ui.input_int("H09_HitEffectSeId5", &mut i).build() {
            self.h09_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id6 as _;
        if ui.input_int("H09_HitEffectSeId6", &mut i).build() {
            self.h09_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h09_hit_effect_se_id7 as _;
        if ui.input_int("H09_HitEffectSeId7", &mut i).build() {
            self.h09_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id0 as _;
        if ui.input_int("H10_HitEffectSeId0", &mut i).build() {
            self.h10_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id1 as _;
        if ui.input_int("H10_HitEffectSeId1", &mut i).build() {
            self.h10_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id2 as _;
        if ui.input_int("H10_HitEffectSeId2", &mut i).build() {
            self.h10_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id3 as _;
        if ui.input_int("H10_HitEffectSeId3", &mut i).build() {
            self.h10_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id4 as _;
        if ui.input_int("H10_HitEffectSeId4", &mut i).build() {
            self.h10_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id5 as _;
        if ui.input_int("H10_HitEffectSeId5", &mut i).build() {
            self.h10_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id6 as _;
        if ui.input_int("H10_HitEffectSeId6", &mut i).build() {
            self.h10_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h10_hit_effect_se_id7 as _;
        if ui.input_int("H10_HitEffectSeId7", &mut i).build() {
            self.h10_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id0 as _;
        if ui.input_int("H11_HitEffectSeId0", &mut i).build() {
            self.h11_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id1 as _;
        if ui.input_int("H11_HitEffectSeId1", &mut i).build() {
            self.h11_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id2 as _;
        if ui.input_int("H11_HitEffectSeId2", &mut i).build() {
            self.h11_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id3 as _;
        if ui.input_int("H11_HitEffectSeId3", &mut i).build() {
            self.h11_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id4 as _;
        if ui.input_int("H11_HitEffectSeId4", &mut i).build() {
            self.h11_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id5 as _;
        if ui.input_int("H11_HitEffectSeId5", &mut i).build() {
            self.h11_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id6 as _;
        if ui.input_int("H11_HitEffectSeId6", &mut i).build() {
            self.h11_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h11_hit_effect_se_id7 as _;
        if ui.input_int("H11_HitEffectSeId7", &mut i).build() {
            self.h11_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id0 as _;
        if ui.input_int("H12_HitEffectSeId0", &mut i).build() {
            self.h12_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id1 as _;
        if ui.input_int("H12_HitEffectSeId1", &mut i).build() {
            self.h12_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id2 as _;
        if ui.input_int("H12_HitEffectSeId2", &mut i).build() {
            self.h12_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id3 as _;
        if ui.input_int("H12_HitEffectSeId3", &mut i).build() {
            self.h12_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id4 as _;
        if ui.input_int("H12_HitEffectSeId4", &mut i).build() {
            self.h12_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id5 as _;
        if ui.input_int("H12_HitEffectSeId5", &mut i).build() {
            self.h12_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id6 as _;
        if ui.input_int("H12_HitEffectSeId6", &mut i).build() {
            self.h12_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h12_hit_effect_se_id7 as _;
        if ui.input_int("H12_HitEffectSeId7", &mut i).build() {
            self.h12_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id0 as _;
        if ui.input_int("H13_HitEffectSeId0", &mut i).build() {
            self.h13_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id1 as _;
        if ui.input_int("H13_HitEffectSeId1", &mut i).build() {
            self.h13_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id2 as _;
        if ui.input_int("H13_HitEffectSeId2", &mut i).build() {
            self.h13_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id3 as _;
        if ui.input_int("H13_HitEffectSeId3", &mut i).build() {
            self.h13_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id4 as _;
        if ui.input_int("H13_HitEffectSeId4", &mut i).build() {
            self.h13_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id5 as _;
        if ui.input_int("H13_HitEffectSeId5", &mut i).build() {
            self.h13_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id6 as _;
        if ui.input_int("H13_HitEffectSeId6", &mut i).build() {
            self.h13_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h13_hit_effect_se_id7 as _;
        if ui.input_int("H13_HitEffectSeId7", &mut i).build() {
            self.h13_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id0 as _;
        if ui.input_int("H14_HitEffectSeId0", &mut i).build() {
            self.h14_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id1 as _;
        if ui.input_int("H14_HitEffectSeId1", &mut i).build() {
            self.h14_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id2 as _;
        if ui.input_int("H14_HitEffectSeId2", &mut i).build() {
            self.h14_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id3 as _;
        if ui.input_int("H14_HitEffectSeId3", &mut i).build() {
            self.h14_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id4 as _;
        if ui.input_int("H14_HitEffectSeId4", &mut i).build() {
            self.h14_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id5 as _;
        if ui.input_int("H14_HitEffectSeId5", &mut i).build() {
            self.h14_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id6 as _;
        if ui.input_int("H14_HitEffectSeId6", &mut i).build() {
            self.h14_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h14_hit_effect_se_id7 as _;
        if ui.input_int("H14_HitEffectSeId7", &mut i).build() {
            self.h14_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id0 as _;
        if ui.input_int("H15_HitEffectSeId0", &mut i).build() {
            self.h15_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id1 as _;
        if ui.input_int("H15_HitEffectSeId1", &mut i).build() {
            self.h15_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id2 as _;
        if ui.input_int("H15_HitEffectSeId2", &mut i).build() {
            self.h15_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id3 as _;
        if ui.input_int("H15_HitEffectSeId3", &mut i).build() {
            self.h15_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id4 as _;
        if ui.input_int("H15_HitEffectSeId4", &mut i).build() {
            self.h15_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id5 as _;
        if ui.input_int("H15_HitEffectSeId5", &mut i).build() {
            self.h15_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id6 as _;
        if ui.input_int("H15_HitEffectSeId6", &mut i).build() {
            self.h15_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h15_hit_effect_se_id7 as _;
        if ui.input_int("H15_HitEffectSeId7", &mut i).build() {
            self.h15_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id0 as _;
        if ui.input_int("H16_HitEffectSeId0", &mut i).build() {
            self.h16_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id1 as _;
        if ui.input_int("H16_HitEffectSeId1", &mut i).build() {
            self.h16_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id2 as _;
        if ui.input_int("H16_HitEffectSeId2", &mut i).build() {
            self.h16_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id3 as _;
        if ui.input_int("H16_HitEffectSeId3", &mut i).build() {
            self.h16_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id4 as _;
        if ui.input_int("H16_HitEffectSeId4", &mut i).build() {
            self.h16_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id5 as _;
        if ui.input_int("H16_HitEffectSeId5", &mut i).build() {
            self.h16_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id6 as _;
        if ui.input_int("H16_HitEffectSeId6", &mut i).build() {
            self.h16_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h16_hit_effect_se_id7 as _;
        if ui.input_int("H16_HitEffectSeId7", &mut i).build() {
            self.h16_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id0 as _;
        if ui.input_int("H17_HitEffectSeId0", &mut i).build() {
            self.h17_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id1 as _;
        if ui.input_int("H17_HitEffectSeId1", &mut i).build() {
            self.h17_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id2 as _;
        if ui.input_int("H17_HitEffectSeId2", &mut i).build() {
            self.h17_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id3 as _;
        if ui.input_int("H17_HitEffectSeId3", &mut i).build() {
            self.h17_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id4 as _;
        if ui.input_int("H17_HitEffectSeId4", &mut i).build() {
            self.h17_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id5 as _;
        if ui.input_int("H17_HitEffectSeId5", &mut i).build() {
            self.h17_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id6 as _;
        if ui.input_int("H17_HitEffectSeId6", &mut i).build() {
            self.h17_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h17_hit_effect_se_id7 as _;
        if ui.input_int("H17_HitEffectSeId7", &mut i).build() {
            self.h17_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id0 as _;
        if ui.input_int("H18_HitEffectSeId0", &mut i).build() {
            self.h18_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id1 as _;
        if ui.input_int("H18_HitEffectSeId1", &mut i).build() {
            self.h18_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id2 as _;
        if ui.input_int("H18_HitEffectSeId2", &mut i).build() {
            self.h18_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id3 as _;
        if ui.input_int("H18_HitEffectSeId3", &mut i).build() {
            self.h18_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id4 as _;
        if ui.input_int("H18_HitEffectSeId4", &mut i).build() {
            self.h18_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id5 as _;
        if ui.input_int("H18_HitEffectSeId5", &mut i).build() {
            self.h18_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id6 as _;
        if ui.input_int("H18_HitEffectSeId6", &mut i).build() {
            self.h18_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h18_hit_effect_se_id7 as _;
        if ui.input_int("H18_HitEffectSeId7", &mut i).build() {
            self.h18_hit_effect_se_id7 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id0 as _;
        if ui.input_int("H19_HitEffectSeId0", &mut i).build() {
            self.h19_hit_effect_se_id0 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id1 as _;
        if ui.input_int("H19_HitEffectSeId1", &mut i).build() {
            self.h19_hit_effect_se_id1 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id2 as _;
        if ui.input_int("H19_HitEffectSeId2", &mut i).build() {
            self.h19_hit_effect_se_id2 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id3 as _;
        if ui.input_int("H19_HitEffectSeId3", &mut i).build() {
            self.h19_hit_effect_se_id3 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id4 as _;
        if ui.input_int("H19_HitEffectSeId4", &mut i).build() {
            self.h19_hit_effect_se_id4 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id5 as _;
        if ui.input_int("H19_HitEffectSeId5", &mut i).build() {
            self.h19_hit_effect_se_id5 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id6 as _;
        if ui.input_int("H19_HitEffectSeId6", &mut i).build() {
            self.h19_hit_effect_se_id6 = i as _;
        }

        let mut i: i32 = self.h19_hit_effect_se_id7 as _;
        if ui.input_int("H19_HitEffectSeId7", &mut i).build() {
            self.h19_hit_effect_se_id7 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct HitEffectSfxConceptParam {
    pub sfx_concept_id0: i16,
    pub sfx_concept_id1: i16,
    pub sfx_concept_id2: i16,
    pub sfx_concept_id3: i16,
    pub sfx_concept_id4: i16,
    pub sfx_concept_id5: i16,
    pub sfx_concept_id6: i16,
    pub sfx_concept_id7: i16,
    pub sfx_concept_id8: i16,
    pub sfx_concept_id9: i16,
    pub sfx_concept_id10: i16,
    pub sfx_concept_id11: i16,
    pub sfx_concept_id12: i16,
    pub sfx_concept_id13: i16,
    pub sfx_concept_id14: i16,
    pub sfx_concept_id15: i16,
    pub sfx_concept_id16: i16,
    pub sfx_concept_id17: i16,
    pub sfx_concept_id18: i16,
    pub sfx_concept_id19: i16,
    pub sfx_concept_id20: i16,
    pub sfx_concept_id21: i16,
    pub sfx_concept_id22: i16,
    pub sfx_concept_id23: i16,
    pub sfx_concept_id24: i16,
    pub sfx_concept_id25: i16,
    pub sfx_concept_id26: i16,
    pub sfx_concept_id27: i16,
    pub sfx_concept_id28: i16,
    pub sfx_concept_id29: i16,
    pub pad1: [u8; 20],
}

impl RenderableParam for HitEffectSfxConceptParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.sfx_concept_id0 as _;
        if ui.input_int("SfxConceptId0", &mut i).build() {
            self.sfx_concept_id0 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id1 as _;
        if ui.input_int("SfxConceptId1", &mut i).build() {
            self.sfx_concept_id1 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id2 as _;
        if ui.input_int("SfxConceptId2", &mut i).build() {
            self.sfx_concept_id2 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id3 as _;
        if ui.input_int("SfxConceptId3", &mut i).build() {
            self.sfx_concept_id3 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id4 as _;
        if ui.input_int("SfxConceptId4", &mut i).build() {
            self.sfx_concept_id4 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id5 as _;
        if ui.input_int("SfxConceptId5", &mut i).build() {
            self.sfx_concept_id5 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id6 as _;
        if ui.input_int("SfxConceptId6", &mut i).build() {
            self.sfx_concept_id6 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id7 as _;
        if ui.input_int("SfxConceptId7", &mut i).build() {
            self.sfx_concept_id7 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id8 as _;
        if ui.input_int("SfxConceptId8", &mut i).build() {
            self.sfx_concept_id8 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id9 as _;
        if ui.input_int("SfxConceptId9", &mut i).build() {
            self.sfx_concept_id9 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id10 as _;
        if ui.input_int("SfxConceptId10", &mut i).build() {
            self.sfx_concept_id10 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id11 as _;
        if ui.input_int("SfxConceptId11", &mut i).build() {
            self.sfx_concept_id11 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id12 as _;
        if ui.input_int("SfxConceptId12", &mut i).build() {
            self.sfx_concept_id12 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id13 as _;
        if ui.input_int("SfxConceptId13", &mut i).build() {
            self.sfx_concept_id13 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id14 as _;
        if ui.input_int("SfxConceptId14", &mut i).build() {
            self.sfx_concept_id14 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id15 as _;
        if ui.input_int("SfxConceptId15", &mut i).build() {
            self.sfx_concept_id15 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id16 as _;
        if ui.input_int("SfxConceptId16", &mut i).build() {
            self.sfx_concept_id16 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id17 as _;
        if ui.input_int("SfxConceptId17", &mut i).build() {
            self.sfx_concept_id17 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id18 as _;
        if ui.input_int("SfxConceptId18", &mut i).build() {
            self.sfx_concept_id18 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id19 as _;
        if ui.input_int("SfxConceptId19", &mut i).build() {
            self.sfx_concept_id19 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id20 as _;
        if ui.input_int("SfxConceptId20", &mut i).build() {
            self.sfx_concept_id20 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id21 as _;
        if ui.input_int("SfxConceptId21", &mut i).build() {
            self.sfx_concept_id21 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id22 as _;
        if ui.input_int("SfxConceptId22", &mut i).build() {
            self.sfx_concept_id22 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id23 as _;
        if ui.input_int("SfxConceptId23", &mut i).build() {
            self.sfx_concept_id23 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id24 as _;
        if ui.input_int("SfxConceptId24", &mut i).build() {
            self.sfx_concept_id24 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id25 as _;
        if ui.input_int("SfxConceptId25", &mut i).build() {
            self.sfx_concept_id25 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id26 as _;
        if ui.input_int("SfxConceptId26", &mut i).build() {
            self.sfx_concept_id26 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id27 as _;
        if ui.input_int("SfxConceptId27", &mut i).build() {
            self.sfx_concept_id27 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id28 as _;
        if ui.input_int("SfxConceptId28", &mut i).build() {
            self.sfx_concept_id28 = i as _;
        }

        let mut i: i32 = self.sfx_concept_id29 as _;
        if ui.input_int("SfxConceptId29", &mut i).build() {
            self.sfx_concept_id29 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct HitEffectSfxParam {
    pub hit_sfx_id0: i32,
    pub hit_sfx_id1: i32,
    pub hit_sfx_id2: i32,
    pub hit_sfx_id3: i32,
    pub hit_sfx_id4: i32,
    pub hit_sfx_id5: i32,
    pub hit_sfx_id6: i32,
    pub hit_sfx_id7: i32,
    pub hit_sfx_id8: i32,
    pub hit_sfx_id9: i32,
    pub hit_sfx_id10: i32,
    pub hit_sfx_id11: i32,
    pub hit_sfx_id12: i32,
    pub hit_sfx_id13: i32,
    pub hit_sfx_id14: i32,
    pub hit_sfx_id15: i32,
    pub pad1: [u8; 16],
}

impl RenderableParam for HitEffectSfxParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.hit_sfx_id0 as _;
        if ui.input_int("HitSfxId0", &mut i).build() {
            self.hit_sfx_id0 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id1 as _;
        if ui.input_int("HitSfxId1", &mut i).build() {
            self.hit_sfx_id1 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id2 as _;
        if ui.input_int("HitSfxId2", &mut i).build() {
            self.hit_sfx_id2 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id3 as _;
        if ui.input_int("HitSfxId3", &mut i).build() {
            self.hit_sfx_id3 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id4 as _;
        if ui.input_int("HitSfxId4", &mut i).build() {
            self.hit_sfx_id4 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id5 as _;
        if ui.input_int("HitSfxId5", &mut i).build() {
            self.hit_sfx_id5 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id6 as _;
        if ui.input_int("HitSfxId6", &mut i).build() {
            self.hit_sfx_id6 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id7 as _;
        if ui.input_int("HitSfxId7", &mut i).build() {
            self.hit_sfx_id7 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id8 as _;
        if ui.input_int("HitSfxId8", &mut i).build() {
            self.hit_sfx_id8 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id9 as _;
        if ui.input_int("HitSfxId9", &mut i).build() {
            self.hit_sfx_id9 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id10 as _;
        if ui.input_int("HitSfxId10", &mut i).build() {
            self.hit_sfx_id10 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id11 as _;
        if ui.input_int("HitSfxId11", &mut i).build() {
            self.hit_sfx_id11 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id12 as _;
        if ui.input_int("HitSfxId12", &mut i).build() {
            self.hit_sfx_id12 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id13 as _;
        if ui.input_int("HitSfxId13", &mut i).build() {
            self.hit_sfx_id13 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id14 as _;
        if ui.input_int("HitSfxId14", &mut i).build() {
            self.hit_sfx_id14 = i as _;
        }

        let mut i: i32 = self.hit_sfx_id15 as _;
        if ui.input_int("HitSfxId15", &mut i).build() {
            self.hit_sfx_id15 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct HitMtrlParam {
    pub ai_volume_rate: f32,
    pub sp_effect_id0: i32,
    pub sp_effect_id1: i32,
    pub bitfield0: u8,
    pub hit_mtrl_type0: u8,
    pub hit_mtrl_type1: u8,
    pub hit_mtrl_type2: u8,
    pub sp_effect_id2: i32,
    pub sp_effect_id3: i32,
    pub sp_effect_id4: i32,
    pub sp_effect_id5: i32,
    pub sp_effect_id6: i32,
    pub sp_effect_id7: i32,
    pub sp_effect_id8: i32,
    pub sp_effect_id9: i32,
    pub sp_effect_id10: i32,
    pub sp_effect_id11: i32,
    pub sp_effect_id12: i32,
    pub sp_effect_id13: i32,
    pub sp_effect_id14: i32,
    pub sp_effect_id15: i32,
    pub sp_effect_id16: i32,
    pub pad1: [u8; 20],
}

impl HitMtrlParam {
    #[allow(unused)]
    pub fn set_foot_effect_height_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn foot_effect_height_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_foot_effect_height_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn foot_effect_height_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_foot_effect_dir_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn foot_effect_dir_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_foot_effect_dir_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn foot_effect_dir_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_new_sp_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn new_sp_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_new_sp_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn new_sp_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for HitMtrlParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.ai_volume_rate;
        if ui.input_float("aiVolumeRate", &mut i).build() {
            self.ai_volume_rate = i;
        }

        let mut i: i32 = self.sp_effect_id0 as _;
        if ui.input_int("spEffectId0", &mut i).build() {
            self.sp_effect_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_id1 as _;
        if ui.input_int("spEffectId1", &mut i).build() {
            self.sp_effect_id1 = i as _;
        }

        let mut b: bool = self.foot_effect_height_type0();
        if ui.checkbox("FootEffectHeightType0", &mut b) {
            self.set_foot_effect_height_type0(b);
        }

        let mut b: bool = self.foot_effect_height_type1();
        if ui.checkbox("FootEffectHeightType1", &mut b) {
            self.set_foot_effect_height_type1(b);
        }

        let mut b: bool = self.foot_effect_dir_type0();
        if ui.checkbox("footEffectDirType0", &mut b) {
            self.set_foot_effect_dir_type0(b);
        }

        let mut b: bool = self.foot_effect_dir_type1();
        if ui.checkbox("footEffectDirType1", &mut b) {
            self.set_foot_effect_dir_type1(b);
        }

        let mut b: bool = self.new_sp_type0();
        if ui.checkbox("newSpType0", &mut b) {
            self.set_new_sp_type0(b);
        }

        let mut b: bool = self.new_sp_type1();
        if ui.checkbox("newSpType1", &mut b) {
            self.set_new_sp_type1(b);
        }

        let mut b: bool = self.unkb1();
        if ui.checkbox("unkb1", &mut b) {
            self.set_unkb1(b);
        }

        let mut b: bool = self.unkb2();
        if ui.checkbox("unkb2", &mut b) {
            self.set_unkb2(b);
        }

        let mut i: i32 = self.hit_mtrl_type0 as _;
        if ui.input_int("HitMtrlType0", &mut i).build() {
            self.hit_mtrl_type0 = i as _;
        }

        let mut i: i32 = self.hit_mtrl_type1 as _;
        if ui.input_int("HitMtrlType1", &mut i).build() {
            self.hit_mtrl_type1 = i as _;
        }

        let mut i: i32 = self.hit_mtrl_type2 as _;
        if ui.input_int("HitMtrlType2", &mut i).build() {
            self.hit_mtrl_type2 = i as _;
        }

        let mut i: i32 = self.sp_effect_id2 as _;
        if ui.input_int("spEffectId2", &mut i).build() {
            self.sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.sp_effect_id3 as _;
        if ui.input_int("spEffectId3", &mut i).build() {
            self.sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.sp_effect_id4 as _;
        if ui.input_int("spEffectId4", &mut i).build() {
            self.sp_effect_id4 = i as _;
        }

        let mut i: i32 = self.sp_effect_id5 as _;
        if ui.input_int("spEffectId5", &mut i).build() {
            self.sp_effect_id5 = i as _;
        }

        let mut i: i32 = self.sp_effect_id6 as _;
        if ui.input_int("spEffectId6", &mut i).build() {
            self.sp_effect_id6 = i as _;
        }

        let mut i: i32 = self.sp_effect_id7 as _;
        if ui.input_int("spEffectId7", &mut i).build() {
            self.sp_effect_id7 = i as _;
        }

        let mut i: i32 = self.sp_effect_id8 as _;
        if ui.input_int("spEffectId8", &mut i).build() {
            self.sp_effect_id8 = i as _;
        }

        let mut i: i32 = self.sp_effect_id9 as _;
        if ui.input_int("spEffectId9", &mut i).build() {
            self.sp_effect_id9 = i as _;
        }

        let mut i: i32 = self.sp_effect_id10 as _;
        if ui.input_int("spEffectId10", &mut i).build() {
            self.sp_effect_id10 = i as _;
        }

        let mut i: i32 = self.sp_effect_id11 as _;
        if ui.input_int("spEffectId11", &mut i).build() {
            self.sp_effect_id11 = i as _;
        }

        let mut i: i32 = self.sp_effect_id12 as _;
        if ui.input_int("spEffectId12", &mut i).build() {
            self.sp_effect_id12 = i as _;
        }

        let mut i: i32 = self.sp_effect_id13 as _;
        if ui.input_int("spEffectId13", &mut i).build() {
            self.sp_effect_id13 = i as _;
        }

        let mut i: i32 = self.sp_effect_id14 as _;
        if ui.input_int("spEffectId14", &mut i).build() {
            self.sp_effect_id14 = i as _;
        }

        let mut i: i32 = self.sp_effect_id15 as _;
        if ui.input_int("spEffectId15", &mut i).build() {
            self.sp_effect_id15 = i as _;
        }

        let mut i: i32 = self.sp_effect_id16 as _;
        if ui.input_int("spEffectId16", &mut i).build() {
            self.sp_effect_id16 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct HPEstusFlaskRecoveryParam {
    pub recovery_count0: u8,
    pub recovery_count1: u8,
    pub recovery_count2: u8,
    pub recovery_count3: u8,
    pub recovery_count4: u8,
    pub recovery_count5: u8,
    pub recovery_count6: u8,
    pub recovery_count7: u8,
    pub recovery_count8: u8,
    pub recovery_count9: u8,
    pub recovery_count10: u8,
    pub recovery_count11: u8,
    pub recovery_count12: u8,
    pub recovery_count13: u8,
    pub recovery_count14: u8,
    pub recovery_count15: u8,
    pub recovery_count16: u8,
    pub recovery_count17: u8,
    pub recovery_count18: u8,
    pub recovery_count19: u8,
    pub recovery_count20: u8,
    pub recovery_count21: u8,
    pub recovery_count22: u8,
    pub recovery_count23: u8,
}

impl RenderableParam for HPEstusFlaskRecoveryParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.recovery_count0 as _;
        if ui.input_int("recoveryCount0", &mut i).build() {
            self.recovery_count0 = i as _;
        }

        let mut i: i32 = self.recovery_count1 as _;
        if ui.input_int("recoveryCount1", &mut i).build() {
            self.recovery_count1 = i as _;
        }

        let mut i: i32 = self.recovery_count2 as _;
        if ui.input_int("recoveryCount2", &mut i).build() {
            self.recovery_count2 = i as _;
        }

        let mut i: i32 = self.recovery_count3 as _;
        if ui.input_int("recoveryCount3", &mut i).build() {
            self.recovery_count3 = i as _;
        }

        let mut i: i32 = self.recovery_count4 as _;
        if ui.input_int("recoveryCount4", &mut i).build() {
            self.recovery_count4 = i as _;
        }

        let mut i: i32 = self.recovery_count5 as _;
        if ui.input_int("recoveryCount5", &mut i).build() {
            self.recovery_count5 = i as _;
        }

        let mut i: i32 = self.recovery_count6 as _;
        if ui.input_int("recoveryCount6", &mut i).build() {
            self.recovery_count6 = i as _;
        }

        let mut i: i32 = self.recovery_count7 as _;
        if ui.input_int("recoveryCount7", &mut i).build() {
            self.recovery_count7 = i as _;
        }

        let mut i: i32 = self.recovery_count8 as _;
        if ui.input_int("recoveryCount8", &mut i).build() {
            self.recovery_count8 = i as _;
        }

        let mut i: i32 = self.recovery_count9 as _;
        if ui.input_int("recoveryCount9", &mut i).build() {
            self.recovery_count9 = i as _;
        }

        let mut i: i32 = self.recovery_count10 as _;
        if ui.input_int("recoveryCount10", &mut i).build() {
            self.recovery_count10 = i as _;
        }

        let mut i: i32 = self.recovery_count11 as _;
        if ui.input_int("recoveryCount11", &mut i).build() {
            self.recovery_count11 = i as _;
        }

        let mut i: i32 = self.recovery_count12 as _;
        if ui.input_int("recoveryCount12", &mut i).build() {
            self.recovery_count12 = i as _;
        }

        let mut i: i32 = self.recovery_count13 as _;
        if ui.input_int("recoveryCount13", &mut i).build() {
            self.recovery_count13 = i as _;
        }

        let mut i: i32 = self.recovery_count14 as _;
        if ui.input_int("recoveryCount14", &mut i).build() {
            self.recovery_count14 = i as _;
        }

        let mut i: i32 = self.recovery_count15 as _;
        if ui.input_int("recoveryCount15", &mut i).build() {
            self.recovery_count15 = i as _;
        }

        let mut i: i32 = self.recovery_count16 as _;
        if ui.input_int("recoveryCount16", &mut i).build() {
            self.recovery_count16 = i as _;
        }

        let mut i: i32 = self.recovery_count17 as _;
        if ui.input_int("recoveryCount17", &mut i).build() {
            self.recovery_count17 = i as _;
        }

        let mut i: i32 = self.recovery_count18 as _;
        if ui.input_int("recoveryCount18", &mut i).build() {
            self.recovery_count18 = i as _;
        }

        let mut i: i32 = self.recovery_count19 as _;
        if ui.input_int("recoveryCount19", &mut i).build() {
            self.recovery_count19 = i as _;
        }

        let mut i: i32 = self.recovery_count20 as _;
        if ui.input_int("recoveryCount20", &mut i).build() {
            self.recovery_count20 = i as _;
        }

        let mut i: i32 = self.recovery_count21 as _;
        if ui.input_int("recoveryCount21", &mut i).build() {
            self.recovery_count21 = i as _;
        }

        let mut i: i32 = self.recovery_count22 as _;
        if ui.input_int("recoveryCount22", &mut i).build() {
            self.recovery_count22 = i as _;
        }

        let mut i: i32 = self.recovery_count23 as _;
        if ui.input_int("recoveryCount23", &mut i).build() {
            self.recovery_count23 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ItemLotParam {
    pub item_lot_id1: i32,
    pub item_lot_id2: i32,
    pub item_lot_id3: i32,
    pub item_lot_id4: i32,
    pub item_lot_id5: i32,
    pub item_lot_id6: i32,
    pub item_lot_id7: i32,
    pub item_lot_id8: i32,
    pub lot_item_category01: u32,
    pub lot_item_category02: u32,
    pub lot_item_category03: u32,
    pub lot_item_category04: u32,
    pub lot_item_category05: u32,
    pub lot_item_category06: u32,
    pub lot_item_category07: u32,
    pub lot_item_category08: u32,
    pub lot_item_base_point01: i16,
    pub lot_item_base_point02: i16,
    pub lot_item_base_point03: i16,
    pub lot_item_base_point04: i16,
    pub lot_item_base_point05: i16,
    pub lot_item_base_point06: i16,
    pub lot_item_base_point07: i16,
    pub lot_item_base_point08: i16,
    pub cumulate_lot_point01: i16,
    pub cumulate_lot_point02: i16,
    pub cumulate_lot_point03: i16,
    pub cumulate_lot_point04: i16,
    pub cumulate_lot_point05: i16,
    pub cumulate_lot_point06: i16,
    pub cumulate_lot_point07: i16,
    pub cumulate_lot_point08: i16,
    pub get_item_flag_id01: i32,
    pub get_item_flag_id02: i32,
    pub get_item_flag_id03: i32,
    pub get_item_flag_id04: i32,
    pub get_item_flag_id05: i32,
    pub get_item_flag_id06: i32,
    pub get_item_flag_id07: i32,
    pub get_item_flag_id08: i32,
    pub get_item_flag_id: i32,
    pub cumulate_num_flag_id: i32,
    pub cumulate_num_max: u8,
    pub lot_item_rarity: u8,
    pub lot_item_num1: u8,
    pub lot_item_num2: u8,
    pub lot_item_num3: u8,
    pub lot_item_num4: u8,
    pub lot_item_num5: u8,
    pub lot_item_num6: u8,
    pub lot_item_num7: u8,
    pub lot_item_num8: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub clear_count: i8,
    pub pad1: [u8; 3],
}

impl ItemLotParam {
    #[allow(unused)]
    pub fn set_enable_luck01(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck01(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck02(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck02(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck03(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck03(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck04(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck04(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck05(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck05(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck06(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck06(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck07(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck07(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_luck08(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_luck08(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset01(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset01(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset02(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset02(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset03(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset03(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset04(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset04(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset05(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset05(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset06(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset06(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset07(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset07(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cumulate_reset08(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cumulate_reset08(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for ItemLotParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.item_lot_id1 as _;
        if ui.input_int("ItemLotId1", &mut i).build() {
            self.item_lot_id1 = i as _;
        }

        let mut i: i32 = self.item_lot_id2 as _;
        if ui.input_int("ItemLotId2", &mut i).build() {
            self.item_lot_id2 = i as _;
        }

        let mut i: i32 = self.item_lot_id3 as _;
        if ui.input_int("ItemLotId3", &mut i).build() {
            self.item_lot_id3 = i as _;
        }

        let mut i: i32 = self.item_lot_id4 as _;
        if ui.input_int("ItemLotId4", &mut i).build() {
            self.item_lot_id4 = i as _;
        }

        let mut i: i32 = self.item_lot_id5 as _;
        if ui.input_int("ItemLotId5", &mut i).build() {
            self.item_lot_id5 = i as _;
        }

        let mut i: i32 = self.item_lot_id6 as _;
        if ui.input_int("ItemLotId6", &mut i).build() {
            self.item_lot_id6 = i as _;
        }

        let mut i: i32 = self.item_lot_id7 as _;
        if ui.input_int("ItemLotId7", &mut i).build() {
            self.item_lot_id7 = i as _;
        }

        let mut i: i32 = self.item_lot_id8 as _;
        if ui.input_int("ItemLotId8", &mut i).build() {
            self.item_lot_id8 = i as _;
        }

        let mut i: i32 = self.lot_item_category01 as _;
        if ui.input_int("LotItemCategory01", &mut i).build() {
            self.lot_item_category01 = i as _;
        }

        let mut i: i32 = self.lot_item_category02 as _;
        if ui.input_int("LotItemCategory02", &mut i).build() {
            self.lot_item_category02 = i as _;
        }

        let mut i: i32 = self.lot_item_category03 as _;
        if ui.input_int("LotItemCategory03", &mut i).build() {
            self.lot_item_category03 = i as _;
        }

        let mut i: i32 = self.lot_item_category04 as _;
        if ui.input_int("LotItemCategory04", &mut i).build() {
            self.lot_item_category04 = i as _;
        }

        let mut i: i32 = self.lot_item_category05 as _;
        if ui.input_int("LotItemCategory05", &mut i).build() {
            self.lot_item_category05 = i as _;
        }

        let mut i: i32 = self.lot_item_category06 as _;
        if ui.input_int("LotItemCategory06", &mut i).build() {
            self.lot_item_category06 = i as _;
        }

        let mut i: i32 = self.lot_item_category07 as _;
        if ui.input_int("LotItemCategory07", &mut i).build() {
            self.lot_item_category07 = i as _;
        }

        let mut i: i32 = self.lot_item_category08 as _;
        if ui.input_int("LotItemCategory08", &mut i).build() {
            self.lot_item_category08 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point01 as _;
        if ui.input_int("LotItemBasePoint01", &mut i).build() {
            self.lot_item_base_point01 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point02 as _;
        if ui.input_int("LotItemBasePoint02", &mut i).build() {
            self.lot_item_base_point02 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point03 as _;
        if ui.input_int("LotItemBasePoint03", &mut i).build() {
            self.lot_item_base_point03 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point04 as _;
        if ui.input_int("LotItemBasePoint04", &mut i).build() {
            self.lot_item_base_point04 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point05 as _;
        if ui.input_int("LotItemBasePoint05", &mut i).build() {
            self.lot_item_base_point05 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point06 as _;
        if ui.input_int("LotItemBasePoint06", &mut i).build() {
            self.lot_item_base_point06 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point07 as _;
        if ui.input_int("LotItemBasePoint07", &mut i).build() {
            self.lot_item_base_point07 = i as _;
        }

        let mut i: i32 = self.lot_item_base_point08 as _;
        if ui.input_int("LotItemBasePoint08", &mut i).build() {
            self.lot_item_base_point08 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point01 as _;
        if ui.input_int("cumulateLotPoint01", &mut i).build() {
            self.cumulate_lot_point01 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point02 as _;
        if ui.input_int("cumulateLotPoint02", &mut i).build() {
            self.cumulate_lot_point02 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point03 as _;
        if ui.input_int("cumulateLotPoint03", &mut i).build() {
            self.cumulate_lot_point03 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point04 as _;
        if ui.input_int("cumulateLotPoint04", &mut i).build() {
            self.cumulate_lot_point04 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point05 as _;
        if ui.input_int("cumulateLotPoint05", &mut i).build() {
            self.cumulate_lot_point05 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point06 as _;
        if ui.input_int("cumulateLotPoint06", &mut i).build() {
            self.cumulate_lot_point06 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point07 as _;
        if ui.input_int("cumulateLotPoint07", &mut i).build() {
            self.cumulate_lot_point07 = i as _;
        }

        let mut i: i32 = self.cumulate_lot_point08 as _;
        if ui.input_int("cumulateLotPoint08", &mut i).build() {
            self.cumulate_lot_point08 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id01 as _;
        if ui.input_int("GetItemFlagId01", &mut i).build() {
            self.get_item_flag_id01 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id02 as _;
        if ui.input_int("GetItemFlagId02", &mut i).build() {
            self.get_item_flag_id02 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id03 as _;
        if ui.input_int("GetItemFlagId03", &mut i).build() {
            self.get_item_flag_id03 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id04 as _;
        if ui.input_int("GetItemFlagId04", &mut i).build() {
            self.get_item_flag_id04 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id05 as _;
        if ui.input_int("GetItemFlagId05", &mut i).build() {
            self.get_item_flag_id05 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id06 as _;
        if ui.input_int("GetItemFlagId06", &mut i).build() {
            self.get_item_flag_id06 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id07 as _;
        if ui.input_int("GetItemFlagId07", &mut i).build() {
            self.get_item_flag_id07 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id08 as _;
        if ui.input_int("GetItemFlagId08", &mut i).build() {
            self.get_item_flag_id08 = i as _;
        }

        let mut i: i32 = self.get_item_flag_id as _;
        if ui.input_int("getItemFlagId", &mut i).build() {
            self.get_item_flag_id = i as _;
        }

        let mut i: i32 = self.cumulate_num_flag_id as _;
        if ui.input_int("cumulateNumFlagId", &mut i).build() {
            self.cumulate_num_flag_id = i as _;
        }

        let mut i: i32 = self.cumulate_num_max as _;
        if ui.input_int("cumulateNumMax", &mut i).build() {
            self.cumulate_num_max = i as _;
        }

        let mut i: i32 = self.lot_item_rarity as _;
        if ui.input_int("LotItemRarity", &mut i).build() {
            self.lot_item_rarity = i as _;
        }

        let mut i: i32 = self.lot_item_num1 as _;
        if ui.input_int("LotItemNum1", &mut i).build() {
            self.lot_item_num1 = i as _;
        }

        let mut i: i32 = self.lot_item_num2 as _;
        if ui.input_int("LotItemNum2", &mut i).build() {
            self.lot_item_num2 = i as _;
        }

        let mut i: i32 = self.lot_item_num3 as _;
        if ui.input_int("LotItemNum3", &mut i).build() {
            self.lot_item_num3 = i as _;
        }

        let mut i: i32 = self.lot_item_num4 as _;
        if ui.input_int("LotItemNum4", &mut i).build() {
            self.lot_item_num4 = i as _;
        }

        let mut i: i32 = self.lot_item_num5 as _;
        if ui.input_int("LotItemNum5", &mut i).build() {
            self.lot_item_num5 = i as _;
        }

        let mut i: i32 = self.lot_item_num6 as _;
        if ui.input_int("LotItemNum6", &mut i).build() {
            self.lot_item_num6 = i as _;
        }

        let mut i: i32 = self.lot_item_num7 as _;
        if ui.input_int("LotItemNum7", &mut i).build() {
            self.lot_item_num7 = i as _;
        }

        let mut i: i32 = self.lot_item_num8 as _;
        if ui.input_int("LotItemNum8", &mut i).build() {
            self.lot_item_num8 = i as _;
        }

        let mut b: bool = self.enable_luck01();
        if ui.checkbox("EnableLuck01", &mut b) {
            self.set_enable_luck01(b);
        }

        let mut b: bool = self.enable_luck02();
        if ui.checkbox("EnableLuck02", &mut b) {
            self.set_enable_luck02(b);
        }

        let mut b: bool = self.enable_luck03();
        if ui.checkbox("EnableLuck03", &mut b) {
            self.set_enable_luck03(b);
        }

        let mut b: bool = self.enable_luck04();
        if ui.checkbox("EnableLuck04", &mut b) {
            self.set_enable_luck04(b);
        }

        let mut b: bool = self.enable_luck05();
        if ui.checkbox("EnableLuck05", &mut b) {
            self.set_enable_luck05(b);
        }

        let mut b: bool = self.enable_luck06();
        if ui.checkbox("EnableLuck06", &mut b) {
            self.set_enable_luck06(b);
        }

        let mut b: bool = self.enable_luck07();
        if ui.checkbox("EnableLuck07", &mut b) {
            self.set_enable_luck07(b);
        }

        let mut b: bool = self.enable_luck08();
        if ui.checkbox("EnableLuck08", &mut b) {
            self.set_enable_luck08(b);
        }

        let mut b: bool = self.cumulate_reset01();
        if ui.checkbox("cumulateReset01", &mut b) {
            self.set_cumulate_reset01(b);
        }

        let mut b: bool = self.cumulate_reset02();
        if ui.checkbox("cumulateReset02", &mut b) {
            self.set_cumulate_reset02(b);
        }

        let mut b: bool = self.cumulate_reset03();
        if ui.checkbox("cumulateReset03", &mut b) {
            self.set_cumulate_reset03(b);
        }

        let mut b: bool = self.cumulate_reset04();
        if ui.checkbox("cumulateReset04", &mut b) {
            self.set_cumulate_reset04(b);
        }

        let mut b: bool = self.cumulate_reset05();
        if ui.checkbox("cumulateReset05", &mut b) {
            self.set_cumulate_reset05(b);
        }

        let mut b: bool = self.cumulate_reset06();
        if ui.checkbox("cumulateReset06", &mut b) {
            self.set_cumulate_reset06(b);
        }

        let mut b: bool = self.cumulate_reset07();
        if ui.checkbox("cumulateReset07", &mut b) {
            self.set_cumulate_reset07(b);
        }

        let mut b: bool = self.cumulate_reset08();
        if ui.checkbox("cumulateReset08", &mut b) {
            self.set_cumulate_reset08(b);
        }

        let mut i: i32 = self.clear_count as _;
        if ui.input_int("ClearCount", &mut i).build() {
            self.clear_count = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct KnockBackParam {
    pub damage_min_cont_time: f32,
    pub damage_s_cont_time: f32,
    pub damage_m_cont_time: f32,
    pub damage_l_cont_time: f32,
    pub damage_blow_s_cont_time: f32,
    pub damage_blow_m_cont_time: f32,
    pub damage_strike_cont_time: f32,
    pub damage_uppercut_cont_time: f32,
    pub damage_push_cont_time: f32,
    pub damage_breath_cont_time: f32,
    pub damage_head_shot_cont_time: f32,
    pub guard_s_cont_time: f32,
    pub guard_l_cont_time: f32,
    pub guard_ll_cont_time: f32,
    pub guard_brake_cont_time: f32,
    pub damage_min_dec_time: f32,
    pub damage_s_dec_time: f32,
    pub damage_m_dec_time: f32,
    pub damage_l_dec_time: f32,
    pub damage_blow_s_dec_time: f32,
    pub damage_blow_m_dec_time: f32,
    pub damage_strike_dec_time: f32,
    pub damage_uppercut_dec_time: f32,
    pub damage_push_dec_time: f32,
    pub damage_breath_dec_time: f32,
    pub damage_head_shot_dec_time: f32,
    pub guard_s_dec_time: f32,
    pub guard_l_dec_time: f32,
    pub guard_ll_dec_time: f32,
    pub guard_brake_dec_time: f32,
    pub pad1: [u8; 8],
}

impl RenderableParam for KnockBackParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.damage_min_cont_time;
        if ui.input_float("damage_Min_ContTime", &mut i).build() {
            self.damage_min_cont_time = i;
        }

        let mut i: f32 = self.damage_s_cont_time;
        if ui.input_float("damage_S_ContTime", &mut i).build() {
            self.damage_s_cont_time = i;
        }

        let mut i: f32 = self.damage_m_cont_time;
        if ui.input_float("damage_M_ContTime", &mut i).build() {
            self.damage_m_cont_time = i;
        }

        let mut i: f32 = self.damage_l_cont_time;
        if ui.input_float("damage_L_ContTime", &mut i).build() {
            self.damage_l_cont_time = i;
        }

        let mut i: f32 = self.damage_blow_s_cont_time;
        if ui.input_float("damage_BlowS_ContTime", &mut i).build() {
            self.damage_blow_s_cont_time = i;
        }

        let mut i: f32 = self.damage_blow_m_cont_time;
        if ui.input_float("damage_BlowM_ContTime", &mut i).build() {
            self.damage_blow_m_cont_time = i;
        }

        let mut i: f32 = self.damage_strike_cont_time;
        if ui.input_float("damage_Strike_ContTime", &mut i).build() {
            self.damage_strike_cont_time = i;
        }

        let mut i: f32 = self.damage_uppercut_cont_time;
        if ui.input_float("damage_Uppercut_ContTime", &mut i).build() {
            self.damage_uppercut_cont_time = i;
        }

        let mut i: f32 = self.damage_push_cont_time;
        if ui.input_float("damage_Push_ContTime", &mut i).build() {
            self.damage_push_cont_time = i;
        }

        let mut i: f32 = self.damage_breath_cont_time;
        if ui.input_float("damage_Breath_ContTime", &mut i).build() {
            self.damage_breath_cont_time = i;
        }

        let mut i: f32 = self.damage_head_shot_cont_time;
        if ui.input_float("damage_HeadShot_ContTime", &mut i).build() {
            self.damage_head_shot_cont_time = i;
        }

        let mut i: f32 = self.guard_s_cont_time;
        if ui.input_float("guard_S_ContTime", &mut i).build() {
            self.guard_s_cont_time = i;
        }

        let mut i: f32 = self.guard_l_cont_time;
        if ui.input_float("guard_L_ContTime", &mut i).build() {
            self.guard_l_cont_time = i;
        }

        let mut i: f32 = self.guard_ll_cont_time;
        if ui.input_float("guard_LL_ContTime", &mut i).build() {
            self.guard_ll_cont_time = i;
        }

        let mut i: f32 = self.guard_brake_cont_time;
        if ui.input_float("guardBrake_ContTime", &mut i).build() {
            self.guard_brake_cont_time = i;
        }

        let mut i: f32 = self.damage_min_dec_time;
        if ui.input_float("damage_min_decTime", &mut i).build() {
            self.damage_min_dec_time = i;
        }

        let mut i: f32 = self.damage_s_dec_time;
        if ui.input_float("damage_S_decTime", &mut i).build() {
            self.damage_s_dec_time = i;
        }

        let mut i: f32 = self.damage_m_dec_time;
        if ui.input_float("damage_M_decTime", &mut i).build() {
            self.damage_m_dec_time = i;
        }

        let mut i: f32 = self.damage_l_dec_time;
        if ui.input_float("damage_L_decTime", &mut i).build() {
            self.damage_l_dec_time = i;
        }

        let mut i: f32 = self.damage_blow_s_dec_time;
        if ui.input_float("damage_BlowS_decTime", &mut i).build() {
            self.damage_blow_s_dec_time = i;
        }

        let mut i: f32 = self.damage_blow_m_dec_time;
        if ui.input_float("damage_BlowM_decTime", &mut i).build() {
            self.damage_blow_m_dec_time = i;
        }

        let mut i: f32 = self.damage_strike_dec_time;
        if ui.input_float("damage_Strike_decTime", &mut i).build() {
            self.damage_strike_dec_time = i;
        }

        let mut i: f32 = self.damage_uppercut_dec_time;
        if ui.input_float("damage_Uppercut_DecTime", &mut i).build() {
            self.damage_uppercut_dec_time = i;
        }

        let mut i: f32 = self.damage_push_dec_time;
        if ui.input_float("damage_Push_DecTime", &mut i).build() {
            self.damage_push_dec_time = i;
        }

        let mut i: f32 = self.damage_breath_dec_time;
        if ui.input_float("damage_Breath_DecTime", &mut i).build() {
            self.damage_breath_dec_time = i;
        }

        let mut i: f32 = self.damage_head_shot_dec_time;
        if ui.input_float("damage_HeadShot_DecTime", &mut i).build() {
            self.damage_head_shot_dec_time = i;
        }

        let mut i: f32 = self.guard_s_dec_time;
        if ui.input_float("guard_S_DecTime", &mut i).build() {
            self.guard_s_dec_time = i;
        }

        let mut i: f32 = self.guard_l_dec_time;
        if ui.input_float("guard_L_DecTime", &mut i).build() {
            self.guard_l_dec_time = i;
        }

        let mut i: f32 = self.guard_ll_dec_time;
        if ui.input_float("guard_LL_DecTime", &mut i).build() {
            self.guard_ll_dec_time = i;
        }

        let mut i: f32 = self.guard_brake_dec_time;
        if ui.input_float("guardBrake_DecTime", &mut i).build() {
            self.guard_brake_dec_time = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct KnowledgeLoadScreenItemParam {
    pub loadscreen_category_id: u32,
    pub knowledge_id: i32,
    pub pad1: [u8; 8],
}

impl RenderableParam for KnowledgeLoadScreenItemParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.loadscreen_category_id as _;
        if ui.input_int("LoadscreenCategoryId", &mut i).build() {
            self.loadscreen_category_id = i as _;
        }

        let mut i: i32 = self.knowledge_id as _;
        if ui.input_int("KnowledgeId", &mut i).build() {
            self.knowledge_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct LoadBalancerDrawDistScaleParam {
    pub lod_dist_draw_scale0: f32,
    pub lod_dist_draw_scale1: f32,
    pub lod_dist_draw_scale2: f32,
    pub lod_dist_draw_scale3: f32,
    pub lod_dist_draw_scale4: f32,
    pub lod_dist_draw_scale5: f32,
    pub lod_dist_draw_scale6: f32,
    pub lod_dist_draw_scale7: f32,
    pub lod_dist_draw_scale8: f32,
    pub lod_dist_draw_scale9: f32,
    pub lod_dist_draw_scale10: f32,
    pub lod_dist_draw_scale11: f32,
    pub lod_dist_draw_scale12: f32,
    pub lod_dist_draw_scale13: f32,
    pub lod_dist_draw_scale14: f32,
    pub lod_dist_draw_scale15: f32,
    pub lod_dist_draw_scale16: f32,
    pub lod_dist_draw_scale17: f32,
    pub lod_dist_draw_scale18: f32,
    pub lod_dist_draw_scale19: f32,
    pub lod_dist_draw_scale20: f32,
    pub pad1: [u8; 44],
}

impl RenderableParam for LoadBalancerDrawDistScaleParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.lod_dist_draw_scale0;
        if ui.input_float("LodDistDrawScale0", &mut i).build() {
            self.lod_dist_draw_scale0 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale1;
        if ui.input_float("LodDistDrawScale1", &mut i).build() {
            self.lod_dist_draw_scale1 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale2;
        if ui.input_float("LodDistDrawScale2", &mut i).build() {
            self.lod_dist_draw_scale2 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale3;
        if ui.input_float("LodDistDrawScale3", &mut i).build() {
            self.lod_dist_draw_scale3 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale4;
        if ui.input_float("LodDistDrawScale4", &mut i).build() {
            self.lod_dist_draw_scale4 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale5;
        if ui.input_float("LodDistDrawScale5", &mut i).build() {
            self.lod_dist_draw_scale5 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale6;
        if ui.input_float("LodDistDrawScale6", &mut i).build() {
            self.lod_dist_draw_scale6 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale7;
        if ui.input_float("LodDistDrawScale7", &mut i).build() {
            self.lod_dist_draw_scale7 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale8;
        if ui.input_float("LodDistDrawScale8", &mut i).build() {
            self.lod_dist_draw_scale8 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale9;
        if ui.input_float("LodDistDrawScale9", &mut i).build() {
            self.lod_dist_draw_scale9 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale10;
        if ui.input_float("LodDistDrawScale10", &mut i).build() {
            self.lod_dist_draw_scale10 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale11;
        if ui.input_float("LodDistDrawScale11", &mut i).build() {
            self.lod_dist_draw_scale11 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale12;
        if ui.input_float("LodDistDrawScale12", &mut i).build() {
            self.lod_dist_draw_scale12 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale13;
        if ui.input_float("LodDistDrawScale13", &mut i).build() {
            self.lod_dist_draw_scale13 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale14;
        if ui.input_float("LodDistDrawScale14", &mut i).build() {
            self.lod_dist_draw_scale14 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale15;
        if ui.input_float("LodDistDrawScale15", &mut i).build() {
            self.lod_dist_draw_scale15 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale16;
        if ui.input_float("LodDistDrawScale16", &mut i).build() {
            self.lod_dist_draw_scale16 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale17;
        if ui.input_float("LodDistDrawScale17", &mut i).build() {
            self.lod_dist_draw_scale17 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale18;
        if ui.input_float("LodDistDrawScale18", &mut i).build() {
            self.lod_dist_draw_scale18 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale19;
        if ui.input_float("LodDistDrawScale19", &mut i).build() {
            self.lod_dist_draw_scale19 = i;
        }

        let mut i: f32 = self.lod_dist_draw_scale20;
        if ui.input_float("LodDistDrawScale20", &mut i).build() {
            self.lod_dist_draw_scale20 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct LoadBalancerParam {
    pub unk1: f32,
    pub unk2: f32,
    pub unk3: i32,
    pub unk4: i32,
    pub unk5: i32,
    pub unk6: i32,
    pub load_balancer_val0: u8,
    pub load_balancer_val1: u8,
    pub load_balancer_val2: u8,
    pub load_balancer_val3: u8,
    pub load_balancer_val4: u8,
    pub load_balancer_val5: u8,
    pub load_balancer_val6: u8,
    pub load_balancer_val7: u8,
    pub load_balancer_val8: u8,
    pub load_balancer_val9: u8,
    pub load_balancer_val10: u8,
    pub load_balancer_val11: u8,
    pub load_balancer_val12: u8,
    pub load_balancer_val13: u8,
    pub load_balancer_val14: u8,
    pub load_balancer_val15: u8,
    pub load_balancer_val16: u8,
    pub load_balancer_val17: u8,
    pub pad1: [u8; 38],
}

impl RenderableParam for LoadBalancerParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.unk1;
        if ui.input_float("Unk1", &mut i).build() {
            self.unk1 = i;
        }

        let mut i: f32 = self.unk2;
        if ui.input_float("Unk2", &mut i).build() {
            self.unk2 = i;
        }

        let mut i: i32 = self.unk3 as _;
        if ui.input_int("Unk3", &mut i).build() {
            self.unk3 = i as _;
        }

        let mut i: i32 = self.unk4 as _;
        if ui.input_int("Unk4", &mut i).build() {
            self.unk4 = i as _;
        }

        let mut i: i32 = self.unk5 as _;
        if ui.input_int("Unk5", &mut i).build() {
            self.unk5 = i as _;
        }

        let mut i: i32 = self.unk6 as _;
        if ui.input_int("Unk6", &mut i).build() {
            self.unk6 = i as _;
        }

        let mut i: i32 = self.load_balancer_val0 as _;
        if ui.input_int("LoadBalancerVal0", &mut i).build() {
            self.load_balancer_val0 = i as _;
        }

        let mut i: i32 = self.load_balancer_val1 as _;
        if ui.input_int("LoadBalancerVal1", &mut i).build() {
            self.load_balancer_val1 = i as _;
        }

        let mut i: i32 = self.load_balancer_val2 as _;
        if ui.input_int("LoadBalancerVal2", &mut i).build() {
            self.load_balancer_val2 = i as _;
        }

        let mut i: i32 = self.load_balancer_val3 as _;
        if ui.input_int("LoadBalancerVal3", &mut i).build() {
            self.load_balancer_val3 = i as _;
        }

        let mut i: i32 = self.load_balancer_val4 as _;
        if ui.input_int("LoadBalancerVal4", &mut i).build() {
            self.load_balancer_val4 = i as _;
        }

        let mut i: i32 = self.load_balancer_val5 as _;
        if ui.input_int("LoadBalancerVal5", &mut i).build() {
            self.load_balancer_val5 = i as _;
        }

        let mut i: i32 = self.load_balancer_val6 as _;
        if ui.input_int("LoadBalancerVal6", &mut i).build() {
            self.load_balancer_val6 = i as _;
        }

        let mut i: i32 = self.load_balancer_val7 as _;
        if ui.input_int("LoadBalancerVal7", &mut i).build() {
            self.load_balancer_val7 = i as _;
        }

        let mut i: i32 = self.load_balancer_val8 as _;
        if ui.input_int("LoadBalancerVal8", &mut i).build() {
            self.load_balancer_val8 = i as _;
        }

        let mut i: i32 = self.load_balancer_val9 as _;
        if ui.input_int("LoadBalancerVal9", &mut i).build() {
            self.load_balancer_val9 = i as _;
        }

        let mut i: i32 = self.load_balancer_val10 as _;
        if ui.input_int("LoadBalancerVal10", &mut i).build() {
            self.load_balancer_val10 = i as _;
        }

        let mut i: i32 = self.load_balancer_val11 as _;
        if ui.input_int("LoadBalancerVal11", &mut i).build() {
            self.load_balancer_val11 = i as _;
        }

        let mut i: i32 = self.load_balancer_val12 as _;
        if ui.input_int("LoadBalancerVal12", &mut i).build() {
            self.load_balancer_val12 = i as _;
        }

        let mut i: i32 = self.load_balancer_val13 as _;
        if ui.input_int("LoadBalancerVal13", &mut i).build() {
            self.load_balancer_val13 = i as _;
        }

        let mut i: i32 = self.load_balancer_val14 as _;
        if ui.input_int("LoadBalancerVal14", &mut i).build() {
            self.load_balancer_val14 = i as _;
        }

        let mut i: i32 = self.load_balancer_val15 as _;
        if ui.input_int("LoadBalancerVal15", &mut i).build() {
            self.load_balancer_val15 = i as _;
        }

        let mut i: i32 = self.load_balancer_val16 as _;
        if ui.input_int("LoadBalancerVal16", &mut i).build() {
            self.load_balancer_val16 = i as _;
        }

        let mut i: i32 = self.load_balancer_val17 as _;
        if ui.input_int("LoadBalancerVal17", &mut i).build() {
            self.load_balancer_val17 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct LockCamParam {
    pub cam_dist_target: f32,
    pub rot_range_min_x: f32,
    pub lock_rot_xshift_ratio: f32,
    pub chr_org_offset_z: f32,
    pub chr_lock_range_max_radius: f32,
    pub fov_ychange: f32,
    pub chr_lock_range_max_radius_for_dark: f32,
    pub chr_lock_range_max_radius_for_pitch_dark: f32,
    pub melee_attack_capture_upper_limit_height: f32,
    pub attack_capture_lower_limit_height: f32,
    pub attack_auto_acquisition_angle_range_left: f32,
    pub melee_attack_auto_acquisition_character_range_maximum_radius: f32,
    pub melee_attack_auto_acquisition_dark_character_range_maximum_radius: f32,
    pub proximity_attack_auto_acquisition_character_range_for_pure_darkness_maximum_radius: f32,
    pub bullet_auto_capture_character_range_maximum_radius: f32,
    pub bullet_auto_capture_dark_character_range_maximum_radius: f32,
    pub bullet_automatic_capture_character_range_ror_pure_darkness_maximum_radius: f32,
    pub bullet_auto_capturing_angle_range_left_and_right: f32,
    pub pad1: [u8; 28],
}

impl RenderableParam for LockCamParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.cam_dist_target;
        if ui.input_float("CamDistTarget", &mut i).build() {
            self.cam_dist_target = i;
        }

        let mut i: f32 = self.rot_range_min_x;
        if ui.input_float("rotRangeMinX", &mut i).build() {
            self.rot_range_min_x = i;
        }

        let mut i: f32 = self.lock_rot_xshift_ratio;
        if ui.input_float("lockRotXShiftRatio", &mut i).build() {
            self.lock_rot_xshift_ratio = i;
        }

        let mut i: f32 = self.chr_org_offset_z;
        if ui.input_float("chrOrgOffsetZ", &mut i).build() {
            self.chr_org_offset_z = i;
        }

        let mut i: f32 = self.chr_lock_range_max_radius;
        if ui.input_float("chrLockRangeMaxRadius", &mut i).build() {
            self.chr_lock_range_max_radius = i;
        }

        let mut i: f32 = self.fov_ychange;
        if ui.input_float("FovYChange", &mut i).build() {
            self.fov_ychange = i;
        }

        let mut i: f32 = self.chr_lock_range_max_radius_for_dark;
        if ui
            .input_float("ChrLockRangeMaxRadius_forDark", &mut i)
            .build()
        {
            self.chr_lock_range_max_radius_for_dark = i;
        }

        let mut i: f32 = self.chr_lock_range_max_radius_for_pitch_dark;
        if ui
            .input_float("ChrLockRangeMaxRadius_forPitchDark", &mut i)
            .build()
        {
            self.chr_lock_range_max_radius_for_pitch_dark = i;
        }

        let mut i: f32 = self.melee_attack_capture_upper_limit_height;
        if ui
            .input_float("MeleeAttackCaptureUpperLimitHeight", &mut i)
            .build()
        {
            self.melee_attack_capture_upper_limit_height = i;
        }

        let mut i: f32 = self.attack_capture_lower_limit_height;
        if ui
            .input_float("AttackCaptureLowerLimitHeight", &mut i)
            .build()
        {
            self.attack_capture_lower_limit_height = i;
        }

        let mut i: f32 = self.attack_auto_acquisition_angle_range_left;
        if ui
            .input_float("AttackAutoAcquisitionAngleRangeLeft", &mut i)
            .build()
        {
            self.attack_auto_acquisition_angle_range_left = i;
        }

        let mut i: f32 = self.melee_attack_auto_acquisition_character_range_maximum_radius;
        if ui
            .input_float(
                "MeleeAttackAutoAcquisitionCharacterRangeMaximumRadius",
                &mut i,
            )
            .build()
        {
            self.melee_attack_auto_acquisition_character_range_maximum_radius = i;
        }

        let mut i: f32 = self.melee_attack_auto_acquisition_dark_character_range_maximum_radius;
        if ui
            .input_float(
                "MeleeAttackAutoAcquisitionDarkCharacterRangeMaximumRadius",
                &mut i,
            )
            .build()
        {
            self.melee_attack_auto_acquisition_dark_character_range_maximum_radius = i;
        }

        let mut i: f32 =
            self.proximity_attack_auto_acquisition_character_range_for_pure_darkness_maximum_radius;
        if ui
            .input_float(
                "ProximityAttackAutoAcquisitionCharacterRangeForPureDarknessMaximumRadius",
                &mut i,
            )
            .build()
        {
            self.proximity_attack_auto_acquisition_character_range_for_pure_darkness_maximum_radius = i;
        }

        let mut i: f32 = self.bullet_auto_capture_character_range_maximum_radius;
        if ui
            .input_float("BulletAutoCaptureCharacterRangeMaximumRadius", &mut i)
            .build()
        {
            self.bullet_auto_capture_character_range_maximum_radius = i;
        }

        let mut i: f32 = self.bullet_auto_capture_dark_character_range_maximum_radius;
        if ui
            .input_float("BulletAutoCaptureDarkCharacterRangeMaximumRadius", &mut i)
            .build()
        {
            self.bullet_auto_capture_dark_character_range_maximum_radius = i;
        }

        let mut i: f32 =
            self.bullet_automatic_capture_character_range_ror_pure_darkness_maximum_radius;
        if ui
            .input_float(
                "BulletAutomaticCaptureCharacterRangeRorPureDarknessMaximumRadius",
                &mut i,
            )
            .build()
        {
            self.bullet_automatic_capture_character_range_ror_pure_darkness_maximum_radius = i;
        }

        let mut i: f32 = self.bullet_auto_capturing_angle_range_left_and_right;
        if ui
            .input_float("BulletAutoCapturingAngleRangeLeftAndRight", &mut i)
            .build()
        {
            self.bullet_auto_capturing_angle_range_left_and_right = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct LodParam {
    pub lv01_border_dist: f32,
    pub lv01_play_dist: f32,
    pub lv12_border_dist: f32,
    pub lv12_play_dist: f32,
    pub texture_lod: u8,
    pub pad1: [u8; 3],
    pub lv23_border_dist: f32,
    pub lv23_play_dist: f32,
    pub lv34_border_dist: f32,
    pub lv34_play_dist: f32,
    pub lv45_border_dist: f32,
    pub lv45_play_dist: f32,
    pub distance_scale_id: u8,
    pub pad2: [u8; 19],
}

impl RenderableParam for LodParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.lv01_border_dist;
        if ui.input_float("lv01_BorderDist", &mut i).build() {
            self.lv01_border_dist = i;
        }

        let mut i: f32 = self.lv01_play_dist;
        if ui.input_float("lv01_PlayDist", &mut i).build() {
            self.lv01_play_dist = i;
        }

        let mut i: f32 = self.lv12_border_dist;
        if ui.input_float("lv12_BorderDist", &mut i).build() {
            self.lv12_border_dist = i;
        }

        let mut i: f32 = self.lv12_play_dist;
        if ui.input_float("lv12_PlayDist", &mut i).build() {
            self.lv12_play_dist = i;
        }

        let mut i: i32 = self.texture_lod as _;
        if ui.input_int("textureLod", &mut i).build() {
            self.texture_lod = i as _;
        }

        let mut i: f32 = self.lv23_border_dist;
        if ui.input_float("lv23_BorderDist", &mut i).build() {
            self.lv23_border_dist = i;
        }

        let mut i: f32 = self.lv23_play_dist;
        if ui.input_float("lv23_PlayDist", &mut i).build() {
            self.lv23_play_dist = i;
        }

        let mut i: f32 = self.lv34_border_dist;
        if ui.input_float("lv34_BorderDist", &mut i).build() {
            self.lv34_border_dist = i;
        }

        let mut i: f32 = self.lv34_play_dist;
        if ui.input_float("lv34_PlayDist", &mut i).build() {
            self.lv34_play_dist = i;
        }

        let mut i: f32 = self.lv45_border_dist;
        if ui.input_float("lv45_BorderDist", &mut i).build() {
            self.lv45_border_dist = i;
        }

        let mut i: f32 = self.lv45_play_dist;
        if ui.input_float("lv45_PlayDist", &mut i).build() {
            self.lv45_play_dist = i;
        }

        let mut i: i32 = self.distance_scale_id as _;
        if ui.input_int("DistanceScaleId", &mut i).build() {
            self.distance_scale_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct LodParam_ps4 {
    pub lv01_border_dist: f32,
    pub lv01_play_dist: f32,
    pub lv12_border_dist: f32,
    pub lv12_play_dist: f32,
    pub texture_lod: u8,
    pub pad1: [u8; 3],
    pub lv23_border_dist: f32,
    pub lv23_play_dist: f32,
    pub lv34_border_dist: f32,
    pub lv34_play_dist: f32,
    pub lv45_border_dist: f32,
    pub lv45_play_dist: f32,
    pub distance_scale_id: u8,
    pub pad2: [u8; 19],
}

impl RenderableParam for LodParam_ps4 {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.lv01_border_dist;
        if ui.input_float("lv01_BorderDist", &mut i).build() {
            self.lv01_border_dist = i;
        }

        let mut i: f32 = self.lv01_play_dist;
        if ui.input_float("lv01_PlayDist", &mut i).build() {
            self.lv01_play_dist = i;
        }

        let mut i: f32 = self.lv12_border_dist;
        if ui.input_float("lv12_BorderDist", &mut i).build() {
            self.lv12_border_dist = i;
        }

        let mut i: f32 = self.lv12_play_dist;
        if ui.input_float("lv12_PlayDist", &mut i).build() {
            self.lv12_play_dist = i;
        }

        let mut i: i32 = self.texture_lod as _;
        if ui.input_int("textureLod", &mut i).build() {
            self.texture_lod = i as _;
        }

        let mut i: f32 = self.lv23_border_dist;
        if ui.input_float("lv23_BorderDist", &mut i).build() {
            self.lv23_border_dist = i;
        }

        let mut i: f32 = self.lv23_play_dist;
        if ui.input_float("lv23_PlayDist", &mut i).build() {
            self.lv23_play_dist = i;
        }

        let mut i: f32 = self.lv34_border_dist;
        if ui.input_float("lv34_BorderDist", &mut i).build() {
            self.lv34_border_dist = i;
        }

        let mut i: f32 = self.lv34_play_dist;
        if ui.input_float("lv34_PlayDist", &mut i).build() {
            self.lv34_play_dist = i;
        }

        let mut i: f32 = self.lv45_border_dist;
        if ui.input_float("lv45_BorderDist", &mut i).build() {
            self.lv45_border_dist = i;
        }

        let mut i: f32 = self.lv45_play_dist;
        if ui.input_float("lv45_PlayDist", &mut i).build() {
            self.lv45_play_dist = i;
        }

        let mut i: i32 = self.distance_scale_id as _;
        if ui.input_int("DistanceScaleId", &mut i).build() {
            self.distance_scale_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct LodParam_xb1 {
    pub lv01_border_dist: f32,
    pub lv01_play_dist: f32,
    pub lv12_border_dist: f32,
    pub lv12_play_dist: f32,
    pub texture_lod: u8,
    pub pad1: [u8; 3],
    pub lv23_border_dist: f32,
    pub lv23_play_dist: f32,
    pub lv34_border_dist: f32,
    pub lv34_play_dist: f32,
    pub lv45_border_dist: f32,
    pub lv45_play_dist: f32,
    pub distance_scale_id: u8,
    pub pad2: [u8; 19],
}

impl RenderableParam for LodParam_xb1 {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.lv01_border_dist;
        if ui.input_float("lv01_BorderDist", &mut i).build() {
            self.lv01_border_dist = i;
        }

        let mut i: f32 = self.lv01_play_dist;
        if ui.input_float("lv01_PlayDist", &mut i).build() {
            self.lv01_play_dist = i;
        }

        let mut i: f32 = self.lv12_border_dist;
        if ui.input_float("lv12_BorderDist", &mut i).build() {
            self.lv12_border_dist = i;
        }

        let mut i: f32 = self.lv12_play_dist;
        if ui.input_float("lv12_PlayDist", &mut i).build() {
            self.lv12_play_dist = i;
        }

        let mut i: i32 = self.texture_lod as _;
        if ui.input_int("textureLod", &mut i).build() {
            self.texture_lod = i as _;
        }

        let mut i: f32 = self.lv23_border_dist;
        if ui.input_float("lv23_BorderDist", &mut i).build() {
            self.lv23_border_dist = i;
        }

        let mut i: f32 = self.lv23_play_dist;
        if ui.input_float("lv23_PlayDist", &mut i).build() {
            self.lv23_play_dist = i;
        }

        let mut i: f32 = self.lv34_border_dist;
        if ui.input_float("lv34_BorderDist", &mut i).build() {
            self.lv34_border_dist = i;
        }

        let mut i: f32 = self.lv34_play_dist;
        if ui.input_float("lv34_PlayDist", &mut i).build() {
            self.lv34_play_dist = i;
        }

        let mut i: f32 = self.lv45_border_dist;
        if ui.input_float("lv45_BorderDist", &mut i).build() {
            self.lv45_border_dist = i;
        }

        let mut i: f32 = self.lv45_play_dist;
        if ui.input_float("lv45_PlayDist", &mut i).build() {
            self.lv45_play_dist = i;
        }

        let mut i: i32 = self.distance_scale_id as _;
        if ui.input_int("DistanceScaleId", &mut i).build() {
            self.distance_scale_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct Magic {
    pub yes_no_dialog_message_id: i32,
    pub limit_cancel_sp_effect_id: i32,
    pub sort_id: i16,
    pub ref_id: i16,
    pub ref_id_fp_cost1: i16,
    pub ref_id_sp_cost1: i16,
    pub icon_id: i16,
    pub behavior_id: i16,
    pub mtrl_item_id: i16,
    pub replace_magic_id: i16,
    pub max_quantity: i16,
    pub hero_point: u8,
    pub over_dexterity: u8,
    pub sfx_variation_id: u8,
    pub slot_length: u8,
    pub requirement_intellect: u8,
    pub requirement_faith: u8,
    pub analog_dexterity_min: u8,
    pub analog_dexterity_max: u8,
    pub ez_state_behavior_type: u8,
    pub ref_category1: u8,
    pub sp_effect_category: u8,
    pub ref_type: u8,
    pub menu_type: u8,
    pub ref_category4: u8,
    pub has_sp_effect_type: i16,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub bitfield3: u8,
    pub unk7: u8,
    pub unk8: u8,
    pub cast_sfx1: i32,
    pub cast_sfx2: i32,
    pub cast_sfx3: i32,
    pub unk9: i32,
    pub attribute_type: u8,
    pub attribute_val0: i8,
    pub attribute_val1: i8,
    pub attribute_val2: i8,
    pub attribute_val3: i8,
    pub ref_category2: u8,
    pub ref_id_sp_cost4: i16,
    pub magic_id0: i32,
    pub magic_id1: i32,
    pub magic_id2: i32,
    pub magic_id3: i32,
    pub ref_id_fp_cost2: i16,
    pub ref_id_sp_cost2: i16,
    pub unk10: u8,
    pub ref_category3: u8,
    pub ref_id_fp_cost4: i16,
    pub ref_id_fp_cost3: i16,
    pub ref_id_sp_cost3: i16,
    pub ref_id1: i32,
    pub ref_id2: i32,
    pub ref_id3: i32,
    pub ref_id4: i32,
    pub pad1: [u8; 12],
}

impl Magic {
    #[allow(unused)]
    pub fn set_vow_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_multi(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_multi(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_mult_only(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_mult_only(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enchant(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enchant(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_shield_enchant(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_shield_enchant(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_live(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_live(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_gray(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_gray(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_white(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_white(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_black(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_black(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_offline(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_offline(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_cast_resonance_magic(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn cast_resonance_magic(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type8(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type8(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type9(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type9(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type10(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type10(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type11(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type11(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type12(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type12(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type15(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type15(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for Magic {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.yes_no_dialog_message_id as _;
        if ui.input_int("yesNoDialogMessageId", &mut i).build() {
            self.yes_no_dialog_message_id = i as _;
        }

        let mut i: i32 = self.limit_cancel_sp_effect_id as _;
        if ui.input_int("LimitCancelSpEffectId", &mut i).build() {
            self.limit_cancel_sp_effect_id = i as _;
        }

        let mut i: i32 = self.sort_id as _;
        if ui.input_int("sortId", &mut i).build() {
            self.sort_id = i as _;
        }

        let mut i: i32 = self.ref_id as _;
        if ui.input_int("refId", &mut i).build() {
            self.ref_id = i as _;
        }

        let mut i: i32 = self.ref_id_fp_cost1 as _;
        if ui.input_int("refIdFpCost1", &mut i).build() {
            self.ref_id_fp_cost1 = i as _;
        }

        let mut i: i32 = self.ref_id_sp_cost1 as _;
        if ui.input_int("refIdSpCost1", &mut i).build() {
            self.ref_id_sp_cost1 = i as _;
        }

        let mut i: i32 = self.icon_id as _;
        if ui.input_int("iconId", &mut i).build() {
            self.icon_id = i as _;
        }

        let mut i: i32 = self.behavior_id as _;
        if ui.input_int("behaviorId", &mut i).build() {
            self.behavior_id = i as _;
        }

        let mut i: i32 = self.mtrl_item_id as _;
        if ui.input_int("mtrlItemId", &mut i).build() {
            self.mtrl_item_id = i as _;
        }

        let mut i: i32 = self.replace_magic_id as _;
        if ui.input_int("replaceMagicId", &mut i).build() {
            self.replace_magic_id = i as _;
        }

        let mut i: i32 = self.max_quantity as _;
        if ui.input_int("maxQuantity", &mut i).build() {
            self.max_quantity = i as _;
        }

        let mut i: i32 = self.hero_point as _;
        if ui.input_int("heroPoint", &mut i).build() {
            self.hero_point = i as _;
        }

        let mut i: i32 = self.over_dexterity as _;
        if ui.input_int("overDexterity", &mut i).build() {
            self.over_dexterity = i as _;
        }

        let mut i: i32 = self.sfx_variation_id as _;
        if ui.input_int("sfxVariationId", &mut i).build() {
            self.sfx_variation_id = i as _;
        }

        let mut i: i32 = self.slot_length as _;
        if ui.input_int("slotLength", &mut i).build() {
            self.slot_length = i as _;
        }

        let mut i: i32 = self.requirement_intellect as _;
        if ui.input_int("requirementIntellect", &mut i).build() {
            self.requirement_intellect = i as _;
        }

        let mut i: i32 = self.requirement_faith as _;
        if ui.input_int("requirementFaith", &mut i).build() {
            self.requirement_faith = i as _;
        }

        let mut i: i32 = self.analog_dexterity_min as _;
        if ui.input_int("analogDexterityMin", &mut i).build() {
            self.analog_dexterity_min = i as _;
        }

        let mut i: i32 = self.analog_dexterity_max as _;
        if ui.input_int("analogDexterityMax", &mut i).build() {
            self.analog_dexterity_max = i as _;
        }

        let mut i: i32 = self.ez_state_behavior_type as _;
        if ui.input_int("ezStateBehaviorType", &mut i).build() {
            self.ez_state_behavior_type = i as _;
        }

        let mut i: i32 = self.ref_category1 as _;
        if ui.input_int("refCategory1", &mut i).build() {
            self.ref_category1 = i as _;
        }

        let mut i: i32 = self.sp_effect_category as _;
        if ui.input_int("spEffectCategory", &mut i).build() {
            self.sp_effect_category = i as _;
        }

        let mut i: i32 = self.ref_type as _;
        if ui.input_int("refType", &mut i).build() {
            self.ref_type = i as _;
        }

        let mut i: i32 = self.menu_type as _;
        if ui.input_int("menuType", &mut i).build() {
            self.menu_type = i as _;
        }

        let mut i: i32 = self.ref_category4 as _;
        if ui.input_int("refCategory4", &mut i).build() {
            self.ref_category4 = i as _;
        }

        let mut i: i32 = self.has_sp_effect_type as _;
        if ui.input_int("hasSpEffectType", &mut i).build() {
            self.has_sp_effect_type = i as _;
        }

        let mut b: bool = self.vow_type0();
        if ui.checkbox("VowType0", &mut b) {
            self.set_vow_type0(b);
        }

        let mut b: bool = self.vow_type1();
        if ui.checkbox("VowType1", &mut b) {
            self.set_vow_type1(b);
        }

        let mut b: bool = self.vow_type2();
        if ui.checkbox("VowType2", &mut b) {
            self.set_vow_type2(b);
        }

        let mut b: bool = self.vow_type3();
        if ui.checkbox("VowType3", &mut b) {
            self.set_vow_type3(b);
        }

        let mut b: bool = self.vow_type4();
        if ui.checkbox("VowType4", &mut b) {
            self.set_vow_type4(b);
        }

        let mut b: bool = self.vow_type5();
        if ui.checkbox("VowType5", &mut b) {
            self.set_vow_type5(b);
        }

        let mut b: bool = self.vow_type6();
        if ui.checkbox("VowType6", &mut b) {
            self.set_vow_type6(b);
        }

        let mut b: bool = self.vow_type7();
        if ui.checkbox("VowType7", &mut b) {
            self.set_vow_type7(b);
        }

        let mut b: bool = self.enable_multi();
        if ui.checkbox("enableMulti", &mut b) {
            self.set_enable_multi(b);
        }

        let mut b: bool = self.enable_mult_only();
        if ui.checkbox("enableMultOnly", &mut b) {
            self.set_enable_mult_only(b);
        }

        let mut b: bool = self.is_enchant();
        if ui.checkbox("isEnchant", &mut b) {
            self.set_is_enchant(b);
        }

        let mut b: bool = self.is_shield_enchant();
        if ui.checkbox("isShieldEnchant", &mut b) {
            self.set_is_shield_enchant(b);
        }

        let mut b: bool = self.enable_live();
        if ui.checkbox("enable_live", &mut b) {
            self.set_enable_live(b);
        }

        let mut b: bool = self.enable_gray();
        if ui.checkbox("enable_gray", &mut b) {
            self.set_enable_gray(b);
        }

        let mut b: bool = self.enable_white();
        if ui.checkbox("enable_white", &mut b) {
            self.set_enable_white(b);
        }

        let mut b: bool = self.enable_black();
        if ui.checkbox("enable_black", &mut b) {
            self.set_enable_black(b);
        }

        let mut b: bool = self.disable_offline();
        if ui.checkbox("disable_offline", &mut b) {
            self.set_disable_offline(b);
        }

        let mut b: bool = self.cast_resonance_magic();
        if ui.checkbox("castResonanceMagic", &mut b) {
            self.set_cast_resonance_magic(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut b: bool = self.unk6();
        if ui.checkbox("Unk6", &mut b) {
            self.set_unk6(b);
        }

        let mut b: bool = self.vow_type8();
        if ui.checkbox("VowType8", &mut b) {
            self.set_vow_type8(b);
        }

        let mut b: bool = self.vow_type9();
        if ui.checkbox("VowType9", &mut b) {
            self.set_vow_type9(b);
        }

        let mut b: bool = self.vow_type10();
        if ui.checkbox("VowType10", &mut b) {
            self.set_vow_type10(b);
        }

        let mut b: bool = self.vow_type11();
        if ui.checkbox("VowType11", &mut b) {
            self.set_vow_type11(b);
        }

        let mut b: bool = self.vow_type12();
        if ui.checkbox("VowType12", &mut b) {
            self.set_vow_type12(b);
        }

        let mut b: bool = self.vow_type13();
        if ui.checkbox("VowType13", &mut b) {
            self.set_vow_type13(b);
        }

        let mut b: bool = self.vow_type14();
        if ui.checkbox("VowType14", &mut b) {
            self.set_vow_type14(b);
        }

        let mut b: bool = self.vow_type15();
        if ui.checkbox("VowType15", &mut b) {
            self.set_vow_type15(b);
        }

        let mut i: i32 = self.unk7 as _;
        if ui.input_int("Unk7", &mut i).build() {
            self.unk7 = i as _;
        }

        let mut i: i32 = self.unk8 as _;
        if ui.input_int("Unk8", &mut i).build() {
            self.unk8 = i as _;
        }

        let mut i: i32 = self.cast_sfx1 as _;
        if ui.input_int("CastSfx1", &mut i).build() {
            self.cast_sfx1 = i as _;
        }

        let mut i: i32 = self.cast_sfx2 as _;
        if ui.input_int("CastSfx2", &mut i).build() {
            self.cast_sfx2 = i as _;
        }

        let mut i: i32 = self.cast_sfx3 as _;
        if ui.input_int("CastSfx3", &mut i).build() {
            self.cast_sfx3 = i as _;
        }

        let mut i: i32 = self.unk9 as _;
        if ui.input_int("Unk9", &mut i).build() {
            self.unk9 = i as _;
        }

        let mut i: i32 = self.attribute_type as _;
        if ui.input_int("AttributeType", &mut i).build() {
            self.attribute_type = i as _;
        }

        let mut i: i32 = self.attribute_val0 as _;
        if ui.input_int("AttributeVal0", &mut i).build() {
            self.attribute_val0 = i as _;
        }

        let mut i: i32 = self.attribute_val1 as _;
        if ui.input_int("AttributeVal1", &mut i).build() {
            self.attribute_val1 = i as _;
        }

        let mut i: i32 = self.attribute_val2 as _;
        if ui.input_int("AttributeVal2", &mut i).build() {
            self.attribute_val2 = i as _;
        }

        let mut i: i32 = self.attribute_val3 as _;
        if ui.input_int("AttributeVal3", &mut i).build() {
            self.attribute_val3 = i as _;
        }

        let mut i: i32 = self.ref_category2 as _;
        if ui.input_int("refCategory2", &mut i).build() {
            self.ref_category2 = i as _;
        }

        let mut i: i32 = self.ref_id_sp_cost4 as _;
        if ui.input_int("refIdSpCost4", &mut i).build() {
            self.ref_id_sp_cost4 = i as _;
        }

        let mut i: i32 = self.magic_id0 as _;
        if ui.input_int("magicId0", &mut i).build() {
            self.magic_id0 = i as _;
        }

        let mut i: i32 = self.magic_id1 as _;
        if ui.input_int("magicId1", &mut i).build() {
            self.magic_id1 = i as _;
        }

        let mut i: i32 = self.magic_id2 as _;
        if ui.input_int("magicId2", &mut i).build() {
            self.magic_id2 = i as _;
        }

        let mut i: i32 = self.magic_id3 as _;
        if ui.input_int("magicId3", &mut i).build() {
            self.magic_id3 = i as _;
        }

        let mut i: i32 = self.ref_id_fp_cost2 as _;
        if ui.input_int("refIdFpCost2", &mut i).build() {
            self.ref_id_fp_cost2 = i as _;
        }

        let mut i: i32 = self.ref_id_sp_cost2 as _;
        if ui.input_int("refIdSpCost2", &mut i).build() {
            self.ref_id_sp_cost2 = i as _;
        }

        let mut i: i32 = self.unk10 as _;
        if ui.input_int("Unk10", &mut i).build() {
            self.unk10 = i as _;
        }

        let mut i: i32 = self.ref_category3 as _;
        if ui.input_int("refCategory3", &mut i).build() {
            self.ref_category3 = i as _;
        }

        let mut i: i32 = self.ref_id_fp_cost4 as _;
        if ui.input_int("refIdFpCost4", &mut i).build() {
            self.ref_id_fp_cost4 = i as _;
        }

        let mut i: i32 = self.ref_id_fp_cost3 as _;
        if ui.input_int("refIdFpCost3", &mut i).build() {
            self.ref_id_fp_cost3 = i as _;
        }

        let mut i: i32 = self.ref_id_sp_cost3 as _;
        if ui.input_int("refIdSpCost3", &mut i).build() {
            self.ref_id_sp_cost3 = i as _;
        }

        let mut i: i32 = self.ref_id1 as _;
        if ui.input_int("refId1", &mut i).build() {
            self.ref_id1 = i as _;
        }

        let mut i: i32 = self.ref_id2 as _;
        if ui.input_int("refId2", &mut i).build() {
            self.ref_id2 = i as _;
        }

        let mut i: i32 = self.ref_id3 as _;
        if ui.input_int("refId3", &mut i).build() {
            self.ref_id3 = i as _;
        }

        let mut i: i32 = self.ref_id4 as _;
        if ui.input_int("refId4", &mut i).build() {
            self.ref_id4 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MapMimicryEstablishmentParam {
    pub randomizer_coefficient0: f32,
    pub randomizer_coefficient1: f32,
    pub randomizer_coefficient2: f32,
    pub transform_vfx_id0: i32,
    pub loop_vfx_id0: i32,
    pub destroy_vfx_id0: i32,
    pub transform_vfx_id1: i32,
    pub loop_vfx_id1: i32,
    pub destroy_vfx_id1: i32,
    pub transform_vfx_id2: i32,
    pub loop_vfx_id2: i32,
    pub destroy_vfx_id2: i32,
    pub pad1: [u8; 16],
}

impl RenderableParam for MapMimicryEstablishmentParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.randomizer_coefficient0;
        if ui.input_float("RandomizerCoefficient0", &mut i).build() {
            self.randomizer_coefficient0 = i;
        }

        let mut i: f32 = self.randomizer_coefficient1;
        if ui.input_float("RandomizerCoefficient1", &mut i).build() {
            self.randomizer_coefficient1 = i;
        }

        let mut i: f32 = self.randomizer_coefficient2;
        if ui.input_float("RandomizerCoefficient2", &mut i).build() {
            self.randomizer_coefficient2 = i;
        }

        let mut i: i32 = self.transform_vfx_id0 as _;
        if ui.input_int("TransformVfxId0", &mut i).build() {
            self.transform_vfx_id0 = i as _;
        }

        let mut i: i32 = self.loop_vfx_id0 as _;
        if ui.input_int("LoopVfxId0", &mut i).build() {
            self.loop_vfx_id0 = i as _;
        }

        let mut i: i32 = self.destroy_vfx_id0 as _;
        if ui.input_int("DestroyVfxId0", &mut i).build() {
            self.destroy_vfx_id0 = i as _;
        }

        let mut i: i32 = self.transform_vfx_id1 as _;
        if ui.input_int("TransformVfxId1", &mut i).build() {
            self.transform_vfx_id1 = i as _;
        }

        let mut i: i32 = self.loop_vfx_id1 as _;
        if ui.input_int("LoopVfxId1", &mut i).build() {
            self.loop_vfx_id1 = i as _;
        }

        let mut i: i32 = self.destroy_vfx_id1 as _;
        if ui.input_int("DestroyVfxId1", &mut i).build() {
            self.destroy_vfx_id1 = i as _;
        }

        let mut i: i32 = self.transform_vfx_id2 as _;
        if ui.input_int("TransformVfxId2", &mut i).build() {
            self.transform_vfx_id2 = i as _;
        }

        let mut i: i32 = self.loop_vfx_id2 as _;
        if ui.input_int("LoopVfxId2", &mut i).build() {
            self.loop_vfx_id2 = i as _;
        }

        let mut i: i32 = self.destroy_vfx_id2 as _;
        if ui.input_int("DestroyVfxId2", &mut i).build() {
            self.destroy_vfx_id2 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MenuOffscrRendParam {
    pub menu_content0: f32,
    pub menu_content0_0: f32,
    pub menu_content0_1: f32,
    pub menu_content1: f32,
    pub menu_content1_2: f32,
    pub menu_content1_3: f32,
    pub menu_content1_4: f32,
    pub pad1: [u8; 16],
    pub screen_rend_id: i32,
    pub pad2: [u8; 16],
}

impl RenderableParam for MenuOffscrRendParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.menu_content0;
        if ui.input_float("MenuContent0", &mut i).build() {
            self.menu_content0 = i;
        }

        let mut i: f32 = self.menu_content0_0;
        if ui.input_float("MenuContent0_0", &mut i).build() {
            self.menu_content0_0 = i;
        }

        let mut i: f32 = self.menu_content0_1;
        if ui.input_float("MenuContent0_1", &mut i).build() {
            self.menu_content0_1 = i;
        }

        let mut i: f32 = self.menu_content1;
        if ui.input_float("MenuContent1", &mut i).build() {
            self.menu_content1 = i;
        }

        let mut i: f32 = self.menu_content1_2;
        if ui.input_float("MenuContent1_2", &mut i).build() {
            self.menu_content1_2 = i;
        }

        let mut i: f32 = self.menu_content1_3;
        if ui.input_float("MenuContent1_3", &mut i).build() {
            self.menu_content1_3 = i;
        }

        let mut i: f32 = self.menu_content1_4;
        if ui.input_float("MenuContent1_4", &mut i).build() {
            self.menu_content1_4 = i;
        }

        let mut i: i32 = self.screen_rend_id as _;
        if ui.input_int("screenRendId", &mut i).build() {
            self.screen_rend_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MenuPropertyLayoutParam {
    pub layout_path: [u8; 16],
    pub property_id: i32,
    pub caption_text_id: i32,
    pub help_text_id: i32,
    pub pad1: [u8; 4],
}

impl RenderableParam for MenuPropertyLayoutParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.property_id as _;
        if ui.input_int("PropertyId", &mut i).build() {
            self.property_id = i as _;
        }

        let mut i: i32 = self.caption_text_id as _;
        if ui.input_int("captionTextId", &mut i).build() {
            self.caption_text_id = i as _;
        }

        let mut i: i32 = self.help_text_id as _;
        if ui.input_int("HelpTextId", &mut i).build() {
            self.help_text_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MenuPropertySpecParam {
    pub caption_text_id: i32,
    pub icon_id: i32,
    pub required_property_id: i32,
    pub compare_type: u8,
    pub required_property_format_id: u8,
    pub adhoc_caption: [u16; 9],
}

impl RenderableParam for MenuPropertySpecParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.caption_text_id as _;
        if ui.input_int("CaptionTextId", &mut i).build() {
            self.caption_text_id = i as _;
        }

        let mut i: i32 = self.icon_id as _;
        if ui.input_int("IconId", &mut i).build() {
            self.icon_id = i as _;
        }

        let mut i: i32 = self.required_property_id as _;
        if ui.input_int("RequiredPropertyId", &mut i).build() {
            self.required_property_id = i as _;
        }

        let mut i: i32 = self.compare_type as _;
        if ui.input_int("CompareType", &mut i).build() {
            self.compare_type = i as _;
        }

        let mut i: i32 = self.required_property_format_id as _;
        if ui.input_int("RequiredPropertyFormatId", &mut i).build() {
            self.required_property_format_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MenuValueTableParam {
    pub value: i32,
    pub text_id: i32,
    pub compare_type: u8,
    pub pad1: [u8; 3],
}

impl RenderableParam for MenuValueTableParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.value as _;
        if ui.input_int("Value", &mut i).build() {
            self.value = i as _;
        }

        let mut i: i32 = self.text_id as _;
        if ui.input_int("TextId", &mut i).build() {
            self.text_id = i as _;
        }

        let mut i: i32 = self.compare_type as _;
        if ui.input_int("CompareType", &mut i).build() {
            self.compare_type = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ModelSfxParam {
    pub vfx_id1: i32,
    pub dummy_poly_id1: i32,
    pub pad1: [u8; 8],
    pub vfx_id2: i32,
    pub dummy_poly_id2: i32,
    pub pad2: [u8; 8],
    pub vfx_id3: i32,
    pub dummy_poly_id3: i32,
    pub pad3: [u8; 0],
    pub vfx_id4: i32,
    pub dummy_poly_id4: i32,
    pub pad4: [u8; 0],
    pub vfx_id5: i32,
    pub dummy_poly_id5: i32,
    pub pad5: [u8; 0],
    pub vfx_id6: i32,
    pub dummy_poly_id6: i32,
    pub pad6: [u8; 0],
    pub vfx_id7: i32,
    pub dummy_poly_id7: i32,
    pub pad7: [u8; 8],
    pub vfx_id8: i32,
    pub dummy_poly_id8: i32,
    pub pad8: [u8; 8],
    pub vfx_id9: i32,
    pub dummy_poly_id9: i32,
    pub pad9: [u8; 8],
    pub vfx_id10: i32,
    pub dummy_poly_id10: i32,
    pub pad10: [u8; 8],
}

impl RenderableParam for ModelSfxParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.vfx_id1 as _;
        if ui.input_int("VfxId1", &mut i).build() {
            self.vfx_id1 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id1 as _;
        if ui.input_int("DummyPolyId1", &mut i).build() {
            self.dummy_poly_id1 = i as _;
        }

        let mut i: i32 = self.vfx_id2 as _;
        if ui.input_int("VfxId2", &mut i).build() {
            self.vfx_id2 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id2 as _;
        if ui.input_int("DummyPolyId2", &mut i).build() {
            self.dummy_poly_id2 = i as _;
        }

        let mut i: i32 = self.vfx_id3 as _;
        if ui.input_int("VfxId3", &mut i).build() {
            self.vfx_id3 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id3 as _;
        if ui.input_int("DummyPolyId3", &mut i).build() {
            self.dummy_poly_id3 = i as _;
        }

        let mut i: i32 = self.vfx_id4 as _;
        if ui.input_int("VfxId4", &mut i).build() {
            self.vfx_id4 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id4 as _;
        if ui.input_int("DummyPolyId4", &mut i).build() {
            self.dummy_poly_id4 = i as _;
        }

        let mut i: i32 = self.vfx_id5 as _;
        if ui.input_int("VfxId5", &mut i).build() {
            self.vfx_id5 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id5 as _;
        if ui.input_int("DummyPolyId5", &mut i).build() {
            self.dummy_poly_id5 = i as _;
        }

        let mut i: i32 = self.vfx_id6 as _;
        if ui.input_int("VfxId6", &mut i).build() {
            self.vfx_id6 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id6 as _;
        if ui.input_int("DummyPolyId6", &mut i).build() {
            self.dummy_poly_id6 = i as _;
        }

        let mut i: i32 = self.vfx_id7 as _;
        if ui.input_int("VfxId7", &mut i).build() {
            self.vfx_id7 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id7 as _;
        if ui.input_int("DummyPolyId7", &mut i).build() {
            self.dummy_poly_id7 = i as _;
        }

        let mut i: i32 = self.vfx_id8 as _;
        if ui.input_int("VfxId8", &mut i).build() {
            self.vfx_id8 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id8 as _;
        if ui.input_int("DummyPolyId8", &mut i).build() {
            self.dummy_poly_id8 = i as _;
        }

        let mut i: i32 = self.vfx_id9 as _;
        if ui.input_int("VfxId9", &mut i).build() {
            self.vfx_id9 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id9 as _;
        if ui.input_int("DummyPolyId9", &mut i).build() {
            self.dummy_poly_id9 = i as _;
        }

        let mut i: i32 = self.vfx_id10 as _;
        if ui.input_int("VfxId10", &mut i).build() {
            self.vfx_id10 = i as _;
        }

        let mut i: i32 = self.dummy_poly_id10 as _;
        if ui.input_int("DummyPolyId10", &mut i).build() {
            self.dummy_poly_id10 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MoveParam {
    pub stay_id: i32,
    pub walk_f: i32,
    pub walk_b: i32,
    pub walk_l: i32,
    pub walk_r: i32,
    pub dash_f: i32,
    pub dash_b: i32,
    pub dash_l: i32,
    pub dash_r: i32,
    pub super_dash: i32,
    pub escape_f: i32,
    pub escape_b: i32,
    pub escape_l: i32,
    pub escape_r: i32,
    pub turn_l: i32,
    pub turn_r: i32,
    pub large_turn_l: i32,
    pub large_turn_r: i32,
    pub step_move: i32,
    pub fly_stay: i32,
    pub fly_walk_f: i32,
    pub fly_walk_fl: i32,
    pub fly_walk_fr: i32,
    pub fly_walk_fl2: i32,
    pub fly_walk_fr2: i32,
    pub fly_dash_f: i32,
    pub fly_dash_fl: i32,
    pub fly_dash_fr: i32,
    pub fly_dash_fl2: i32,
    pub fly_dash_fr2: i32,
    pub dash_escape_f: i32,
    pub dash_escape_b: i32,
    pub dash_escape_l: i32,
    pub dash_escape_r: i32,
    pub analog_move_param_id: i32,
    pub turn_no_anim_angle: u8,
    pub turn45_angle: u8,
    pub turn90_angle: u8,
    pub turn_wait_no_anim_angle: u8,
}

impl RenderableParam for MoveParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.stay_id as _;
        if ui.input_int("stayId", &mut i).build() {
            self.stay_id = i as _;
        }

        let mut i: i32 = self.walk_f as _;
        if ui.input_int("walkF", &mut i).build() {
            self.walk_f = i as _;
        }

        let mut i: i32 = self.walk_b as _;
        if ui.input_int("walkB", &mut i).build() {
            self.walk_b = i as _;
        }

        let mut i: i32 = self.walk_l as _;
        if ui.input_int("walkL", &mut i).build() {
            self.walk_l = i as _;
        }

        let mut i: i32 = self.walk_r as _;
        if ui.input_int("walkR", &mut i).build() {
            self.walk_r = i as _;
        }

        let mut i: i32 = self.dash_f as _;
        if ui.input_int("dashF", &mut i).build() {
            self.dash_f = i as _;
        }

        let mut i: i32 = self.dash_b as _;
        if ui.input_int("dashB", &mut i).build() {
            self.dash_b = i as _;
        }

        let mut i: i32 = self.dash_l as _;
        if ui.input_int("dashL", &mut i).build() {
            self.dash_l = i as _;
        }

        let mut i: i32 = self.dash_r as _;
        if ui.input_int("dashR", &mut i).build() {
            self.dash_r = i as _;
        }

        let mut i: i32 = self.super_dash as _;
        if ui.input_int("superDash", &mut i).build() {
            self.super_dash = i as _;
        }

        let mut i: i32 = self.escape_f as _;
        if ui.input_int("escapeF", &mut i).build() {
            self.escape_f = i as _;
        }

        let mut i: i32 = self.escape_b as _;
        if ui.input_int("escapeB", &mut i).build() {
            self.escape_b = i as _;
        }

        let mut i: i32 = self.escape_l as _;
        if ui.input_int("escapeL", &mut i).build() {
            self.escape_l = i as _;
        }

        let mut i: i32 = self.escape_r as _;
        if ui.input_int("escapeR", &mut i).build() {
            self.escape_r = i as _;
        }

        let mut i: i32 = self.turn_l as _;
        if ui.input_int("turnL", &mut i).build() {
            self.turn_l = i as _;
        }

        let mut i: i32 = self.turn_r as _;
        if ui.input_int("turnR", &mut i).build() {
            self.turn_r = i as _;
        }

        let mut i: i32 = self.large_turn_l as _;
        if ui.input_int("largeTurnL", &mut i).build() {
            self.large_turn_l = i as _;
        }

        let mut i: i32 = self.large_turn_r as _;
        if ui.input_int("largeTurnR", &mut i).build() {
            self.large_turn_r = i as _;
        }

        let mut i: i32 = self.step_move as _;
        if ui.input_int("stepMove", &mut i).build() {
            self.step_move = i as _;
        }

        let mut i: i32 = self.fly_stay as _;
        if ui.input_int("flyStay", &mut i).build() {
            self.fly_stay = i as _;
        }

        let mut i: i32 = self.fly_walk_f as _;
        if ui.input_int("flyWalkF", &mut i).build() {
            self.fly_walk_f = i as _;
        }

        let mut i: i32 = self.fly_walk_fl as _;
        if ui.input_int("flyWalkFL", &mut i).build() {
            self.fly_walk_fl = i as _;
        }

        let mut i: i32 = self.fly_walk_fr as _;
        if ui.input_int("flyWalkFR", &mut i).build() {
            self.fly_walk_fr = i as _;
        }

        let mut i: i32 = self.fly_walk_fl2 as _;
        if ui.input_int("flyWalkFL2", &mut i).build() {
            self.fly_walk_fl2 = i as _;
        }

        let mut i: i32 = self.fly_walk_fr2 as _;
        if ui.input_int("flyWalkFR2", &mut i).build() {
            self.fly_walk_fr2 = i as _;
        }

        let mut i: i32 = self.fly_dash_f as _;
        if ui.input_int("flyDashF", &mut i).build() {
            self.fly_dash_f = i as _;
        }

        let mut i: i32 = self.fly_dash_fl as _;
        if ui.input_int("flyDashFL", &mut i).build() {
            self.fly_dash_fl = i as _;
        }

        let mut i: i32 = self.fly_dash_fr as _;
        if ui.input_int("flyDashFR", &mut i).build() {
            self.fly_dash_fr = i as _;
        }

        let mut i: i32 = self.fly_dash_fl2 as _;
        if ui.input_int("flyDashFL2", &mut i).build() {
            self.fly_dash_fl2 = i as _;
        }

        let mut i: i32 = self.fly_dash_fr2 as _;
        if ui.input_int("flyDashFR2", &mut i).build() {
            self.fly_dash_fr2 = i as _;
        }

        let mut i: i32 = self.dash_escape_f as _;
        if ui.input_int("dashEscapeF", &mut i).build() {
            self.dash_escape_f = i as _;
        }

        let mut i: i32 = self.dash_escape_b as _;
        if ui.input_int("dashEscapeB", &mut i).build() {
            self.dash_escape_b = i as _;
        }

        let mut i: i32 = self.dash_escape_l as _;
        if ui.input_int("dashEscapeL", &mut i).build() {
            self.dash_escape_l = i as _;
        }

        let mut i: i32 = self.dash_escape_r as _;
        if ui.input_int("dashEscapeR", &mut i).build() {
            self.dash_escape_r = i as _;
        }

        let mut i: i32 = self.analog_move_param_id as _;
        if ui.input_int("analogMoveParamId", &mut i).build() {
            self.analog_move_param_id = i as _;
        }

        let mut i: i32 = self.turn_no_anim_angle as _;
        if ui.input_int("turnNoAnimAngle", &mut i).build() {
            self.turn_no_anim_angle = i as _;
        }

        let mut i: i32 = self.turn45_angle as _;
        if ui.input_int("turn45Angle", &mut i).build() {
            self.turn45_angle = i as _;
        }

        let mut i: i32 = self.turn90_angle as _;
        if ui.input_int("turn90Angle", &mut i).build() {
            self.turn90_angle = i as _;
        }

        let mut i: i32 = self.turn_wait_no_anim_angle as _;
        if ui.input_int("turnWaitNoAnimAngle", &mut i).build() {
            self.turn_wait_no_anim_angle = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MPEstusFlaskRecoveryParam {
    pub recovery_count0: u8,
    pub recovery_count1: u8,
    pub recovery_count2: u8,
    pub recovery_count3: u8,
    pub recovery_count4: u8,
    pub recovery_count5: u8,
    pub recovery_count6: u8,
    pub recovery_count7: u8,
    pub recovery_count8: u8,
    pub recovery_count9: u8,
    pub recovery_count10: u8,
    pub recovery_count11: u8,
    pub recovery_count12: u8,
    pub recovery_count13: u8,
    pub recovery_count14: u8,
    pub recovery_count15: u8,
    pub recovery_count16: u8,
    pub recovery_count17: u8,
    pub recovery_count18: u8,
    pub recovery_count19: u8,
    pub recovery_count20: u8,
    pub recovery_count21: u8,
    pub recovery_count22: u8,
    pub recovery_count23: u8,
}

impl RenderableParam for MPEstusFlaskRecoveryParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.recovery_count0 as _;
        if ui.input_int("recoveryCount0", &mut i).build() {
            self.recovery_count0 = i as _;
        }

        let mut i: i32 = self.recovery_count1 as _;
        if ui.input_int("recoveryCount1", &mut i).build() {
            self.recovery_count1 = i as _;
        }

        let mut i: i32 = self.recovery_count2 as _;
        if ui.input_int("recoveryCount2", &mut i).build() {
            self.recovery_count2 = i as _;
        }

        let mut i: i32 = self.recovery_count3 as _;
        if ui.input_int("recoveryCount3", &mut i).build() {
            self.recovery_count3 = i as _;
        }

        let mut i: i32 = self.recovery_count4 as _;
        if ui.input_int("recoveryCount4", &mut i).build() {
            self.recovery_count4 = i as _;
        }

        let mut i: i32 = self.recovery_count5 as _;
        if ui.input_int("recoveryCount5", &mut i).build() {
            self.recovery_count5 = i as _;
        }

        let mut i: i32 = self.recovery_count6 as _;
        if ui.input_int("recoveryCount6", &mut i).build() {
            self.recovery_count6 = i as _;
        }

        let mut i: i32 = self.recovery_count7 as _;
        if ui.input_int("recoveryCount7", &mut i).build() {
            self.recovery_count7 = i as _;
        }

        let mut i: i32 = self.recovery_count8 as _;
        if ui.input_int("recoveryCount8", &mut i).build() {
            self.recovery_count8 = i as _;
        }

        let mut i: i32 = self.recovery_count9 as _;
        if ui.input_int("recoveryCount9", &mut i).build() {
            self.recovery_count9 = i as _;
        }

        let mut i: i32 = self.recovery_count10 as _;
        if ui.input_int("recoveryCount10", &mut i).build() {
            self.recovery_count10 = i as _;
        }

        let mut i: i32 = self.recovery_count11 as _;
        if ui.input_int("recoveryCount11", &mut i).build() {
            self.recovery_count11 = i as _;
        }

        let mut i: i32 = self.recovery_count12 as _;
        if ui.input_int("recoveryCount12", &mut i).build() {
            self.recovery_count12 = i as _;
        }

        let mut i: i32 = self.recovery_count13 as _;
        if ui.input_int("recoveryCount13", &mut i).build() {
            self.recovery_count13 = i as _;
        }

        let mut i: i32 = self.recovery_count14 as _;
        if ui.input_int("recoveryCount14", &mut i).build() {
            self.recovery_count14 = i as _;
        }

        let mut i: i32 = self.recovery_count15 as _;
        if ui.input_int("recoveryCount15", &mut i).build() {
            self.recovery_count15 = i as _;
        }

        let mut i: i32 = self.recovery_count16 as _;
        if ui.input_int("recoveryCount16", &mut i).build() {
            self.recovery_count16 = i as _;
        }

        let mut i: i32 = self.recovery_count17 as _;
        if ui.input_int("recoveryCount17", &mut i).build() {
            self.recovery_count17 = i as _;
        }

        let mut i: i32 = self.recovery_count18 as _;
        if ui.input_int("recoveryCount18", &mut i).build() {
            self.recovery_count18 = i as _;
        }

        let mut i: i32 = self.recovery_count19 as _;
        if ui.input_int("recoveryCount19", &mut i).build() {
            self.recovery_count19 = i as _;
        }

        let mut i: i32 = self.recovery_count20 as _;
        if ui.input_int("recoveryCount20", &mut i).build() {
            self.recovery_count20 = i as _;
        }

        let mut i: i32 = self.recovery_count21 as _;
        if ui.input_int("recoveryCount21", &mut i).build() {
            self.recovery_count21 = i as _;
        }

        let mut i: i32 = self.recovery_count22 as _;
        if ui.input_int("recoveryCount22", &mut i).build() {
            self.recovery_count22 = i as _;
        }

        let mut i: i32 = self.recovery_count23 as _;
        if ui.input_int("recoveryCount23", &mut i).build() {
            self.recovery_count23 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MultiHPEstusFlaskBonusParam {
    pub estus_flask_restore_count0: u8,
    pub estus_flask_restore_count1: u8,
    pub estus_flask_restore_count2: u8,
    pub estus_flask_restore_count3: u8,
    pub estus_flask_restore_count4: u8,
    pub estus_flask_restore_count5: u8,
    pub estus_flask_restore_count6: u8,
    pub estus_flask_restore_count7: u8,
    pub estus_flask_restore_count8: u8,
    pub estus_flask_restore_count9: u8,
    pub estus_flask_restore_count10: u8,
    pub estus_flask_restore_count11: u8,
    pub estus_flask_restore_count12: u8,
    pub estus_flask_restore_count13: u8,
    pub estus_flask_restore_count14: u8,
    pub estus_flask_restore_count15: u8,
    pub estus_flask_restore_count16: u8,
    pub estus_flask_restore_count17: u8,
    pub estus_flask_restore_count18: u8,
    pub estus_flask_restore_count19: u8,
}

impl RenderableParam for MultiHPEstusFlaskBonusParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.estus_flask_restore_count0 as _;
        if ui.input_int("estusFlaskRestoreCount0", &mut i).build() {
            self.estus_flask_restore_count0 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count1 as _;
        if ui.input_int("estusFlaskRestoreCount1", &mut i).build() {
            self.estus_flask_restore_count1 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count2 as _;
        if ui.input_int("estusFlaskRestoreCount2", &mut i).build() {
            self.estus_flask_restore_count2 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count3 as _;
        if ui.input_int("estusFlaskRestoreCount3", &mut i).build() {
            self.estus_flask_restore_count3 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count4 as _;
        if ui.input_int("estusFlaskRestoreCount4", &mut i).build() {
            self.estus_flask_restore_count4 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count5 as _;
        if ui.input_int("estusFlaskRestoreCount5", &mut i).build() {
            self.estus_flask_restore_count5 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count6 as _;
        if ui.input_int("estusFlaskRestoreCount6", &mut i).build() {
            self.estus_flask_restore_count6 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count7 as _;
        if ui.input_int("estusFlaskRestoreCount7", &mut i).build() {
            self.estus_flask_restore_count7 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count8 as _;
        if ui.input_int("estusFlaskRestoreCount8", &mut i).build() {
            self.estus_flask_restore_count8 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count9 as _;
        if ui.input_int("estusFlaskRestoreCount9", &mut i).build() {
            self.estus_flask_restore_count9 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count10 as _;
        if ui.input_int("estusFlaskRestoreCount10", &mut i).build() {
            self.estus_flask_restore_count10 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count11 as _;
        if ui.input_int("estusFlaskRestoreCount11", &mut i).build() {
            self.estus_flask_restore_count11 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count12 as _;
        if ui.input_int("estusFlaskRestoreCount12", &mut i).build() {
            self.estus_flask_restore_count12 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count13 as _;
        if ui.input_int("estusFlaskRestoreCount13", &mut i).build() {
            self.estus_flask_restore_count13 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count14 as _;
        if ui.input_int("estusFlaskRestoreCount14", &mut i).build() {
            self.estus_flask_restore_count14 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count15 as _;
        if ui.input_int("estusFlaskRestoreCount15", &mut i).build() {
            self.estus_flask_restore_count15 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count16 as _;
        if ui.input_int("estusFlaskRestoreCount16", &mut i).build() {
            self.estus_flask_restore_count16 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count17 as _;
        if ui.input_int("estusFlaskRestoreCount17", &mut i).build() {
            self.estus_flask_restore_count17 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count18 as _;
        if ui.input_int("estusFlaskRestoreCount18", &mut i).build() {
            self.estus_flask_restore_count18 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count19 as _;
        if ui.input_int("estusFlaskRestoreCount19", &mut i).build() {
            self.estus_flask_restore_count19 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MultiMPEstusFlaskBonusParam {
    pub estus_flask_restore_count0: u8,
    pub estus_flask_restore_count1: u8,
    pub estus_flask_restore_count2: u8,
    pub estus_flask_restore_count3: u8,
    pub estus_flask_restore_count4: u8,
    pub estus_flask_restore_count5: u8,
    pub estus_flask_restore_count6: u8,
    pub estus_flask_restore_count7: u8,
    pub estus_flask_restore_count8: u8,
    pub estus_flask_restore_count9: u8,
    pub estus_flask_restore_count10: u8,
    pub estus_flask_restore_count11: u8,
    pub estus_flask_restore_count12: u8,
    pub estus_flask_restore_count13: u8,
    pub estus_flask_restore_count14: u8,
    pub estus_flask_restore_count15: u8,
    pub estus_flask_restore_count16: u8,
    pub estus_flask_restore_count17: u8,
    pub estus_flask_restore_count18: u8,
    pub estus_flask_restore_count19: u8,
}

impl RenderableParam for MultiMPEstusFlaskBonusParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.estus_flask_restore_count0 as _;
        if ui.input_int("estusFlaskRestoreCount0", &mut i).build() {
            self.estus_flask_restore_count0 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count1 as _;
        if ui.input_int("estusFlaskRestoreCount1", &mut i).build() {
            self.estus_flask_restore_count1 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count2 as _;
        if ui.input_int("estusFlaskRestoreCount2", &mut i).build() {
            self.estus_flask_restore_count2 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count3 as _;
        if ui.input_int("estusFlaskRestoreCount3", &mut i).build() {
            self.estus_flask_restore_count3 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count4 as _;
        if ui.input_int("estusFlaskRestoreCount4", &mut i).build() {
            self.estus_flask_restore_count4 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count5 as _;
        if ui.input_int("estusFlaskRestoreCount5", &mut i).build() {
            self.estus_flask_restore_count5 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count6 as _;
        if ui.input_int("estusFlaskRestoreCount6", &mut i).build() {
            self.estus_flask_restore_count6 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count7 as _;
        if ui.input_int("estusFlaskRestoreCount7", &mut i).build() {
            self.estus_flask_restore_count7 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count8 as _;
        if ui.input_int("estusFlaskRestoreCount8", &mut i).build() {
            self.estus_flask_restore_count8 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count9 as _;
        if ui.input_int("estusFlaskRestoreCount9", &mut i).build() {
            self.estus_flask_restore_count9 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count10 as _;
        if ui.input_int("estusFlaskRestoreCount10", &mut i).build() {
            self.estus_flask_restore_count10 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count11 as _;
        if ui.input_int("estusFlaskRestoreCount11", &mut i).build() {
            self.estus_flask_restore_count11 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count12 as _;
        if ui.input_int("estusFlaskRestoreCount12", &mut i).build() {
            self.estus_flask_restore_count12 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count13 as _;
        if ui.input_int("estusFlaskRestoreCount13", &mut i).build() {
            self.estus_flask_restore_count13 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count14 as _;
        if ui.input_int("estusFlaskRestoreCount14", &mut i).build() {
            self.estus_flask_restore_count14 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count15 as _;
        if ui.input_int("estusFlaskRestoreCount15", &mut i).build() {
            self.estus_flask_restore_count15 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count16 as _;
        if ui.input_int("estusFlaskRestoreCount16", &mut i).build() {
            self.estus_flask_restore_count16 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count17 as _;
        if ui.input_int("estusFlaskRestoreCount17", &mut i).build() {
            self.estus_flask_restore_count17 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count18 as _;
        if ui.input_int("estusFlaskRestoreCount18", &mut i).build() {
            self.estus_flask_restore_count18 = i as _;
        }

        let mut i: i32 = self.estus_flask_restore_count19 as _;
        if ui.input_int("estusFlaskRestoreCount19", &mut i).build() {
            self.estus_flask_restore_count19 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MultiPlayCorrectionParam {
    pub correction_val0: i32,
    pub correction_val1: i32,
    pub correction_val2: i32,
    pub correction_val3: i32,
    pub pad1: [u8; 16],
}

impl RenderableParam for MultiPlayCorrectionParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.correction_val0 as _;
        if ui.input_int("CorrectionVal0", &mut i).build() {
            self.correction_val0 = i as _;
        }

        let mut i: i32 = self.correction_val1 as _;
        if ui.input_int("CorrectionVal1", &mut i).build() {
            self.correction_val1 = i as _;
        }

        let mut i: i32 = self.correction_val2 as _;
        if ui.input_int("CorrectionVal2", &mut i).build() {
            self.correction_val2 = i as _;
        }

        let mut i: i32 = self.correction_val3 as _;
        if ui.input_int("CorrectionVal3", &mut i).build() {
            self.correction_val3 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct MultiSoulBonusRateParam {
    pub soul_multiplier_rate0: f32,
    pub soul_multiplier_rate1: f32,
    pub soul_multiplier_rate2: f32,
    pub soul_multiplier_rate3: f32,
    pub soul_multiplier_rate4: f32,
    pub soul_multiplier_rate5: f32,
    pub soul_multiplier_rate6: f32,
    pub soul_multiplier_rate7: f32,
    pub soul_multiplier_rate8: f32,
    pub soul_multiplier_rate9: f32,
    pub soul_multiplier_rate10: f32,
    pub soul_multiplier_rate11: f32,
    pub soul_multiplier_rate12: f32,
    pub soul_multiplier_rate13: f32,
    pub soul_multiplier_rate14: f32,
    pub soul_multiplier_rate15: f32,
    pub pad1: [u8; 4],
}

impl RenderableParam for MultiSoulBonusRateParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.soul_multiplier_rate0;
        if ui.input_float("soulMultiplierRate0", &mut i).build() {
            self.soul_multiplier_rate0 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate1;
        if ui.input_float("soulMultiplierRate1", &mut i).build() {
            self.soul_multiplier_rate1 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate2;
        if ui.input_float("soulMultiplierRate2", &mut i).build() {
            self.soul_multiplier_rate2 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate3;
        if ui.input_float("soulMultiplierRate3", &mut i).build() {
            self.soul_multiplier_rate3 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate4;
        if ui.input_float("soulMultiplierRate4", &mut i).build() {
            self.soul_multiplier_rate4 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate5;
        if ui.input_float("soulMultiplierRate5", &mut i).build() {
            self.soul_multiplier_rate5 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate6;
        if ui.input_float("soulMultiplierRate6", &mut i).build() {
            self.soul_multiplier_rate6 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate7;
        if ui.input_float("soulMultiplierRate7", &mut i).build() {
            self.soul_multiplier_rate7 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate8;
        if ui.input_float("soulMultiplierRate8", &mut i).build() {
            self.soul_multiplier_rate8 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate9;
        if ui.input_float("soulMultiplierRate9", &mut i).build() {
            self.soul_multiplier_rate9 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate10;
        if ui.input_float("soulMultiplierRate10", &mut i).build() {
            self.soul_multiplier_rate10 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate11;
        if ui.input_float("soulMultiplierRate11", &mut i).build() {
            self.soul_multiplier_rate11 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate12;
        if ui.input_float("soulMultiplierRate12", &mut i).build() {
            self.soul_multiplier_rate12 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate13;
        if ui.input_float("soulMultiplierRate13", &mut i).build() {
            self.soul_multiplier_rate13 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate14;
        if ui.input_float("soulMultiplierRate14", &mut i).build() {
            self.soul_multiplier_rate14 = i;
        }

        let mut i: f32 = self.soul_multiplier_rate15;
        if ui.input_float("soulMultiplierRate15", &mut i).build() {
            self.soul_multiplier_rate15 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NetworkAreaParam {
    pub limitation_time0: f32,
    pub limitation_time1: f32,
    pub limitation_time2: f32,
    pub pad1: [u8; 12],
    pub bitfield0: u8,
    pub pad2: [u8; 3],
}

impl NetworkAreaParam {
    #[allow(unused)]
    pub fn set_is_enable00(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enable00(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enable01(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enable01(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enable02(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enable02(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unkb5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unkb5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for NetworkAreaParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.limitation_time0;
        if ui.input_float("LimitationTime0", &mut i).build() {
            self.limitation_time0 = i;
        }

        let mut i: f32 = self.limitation_time1;
        if ui.input_float("LimitationTime1", &mut i).build() {
            self.limitation_time1 = i;
        }

        let mut i: f32 = self.limitation_time2;
        if ui.input_float("LimitationTime2", &mut i).build() {
            self.limitation_time2 = i;
        }

        let mut b: bool = self.is_enable00();
        if ui.checkbox("isEnable00", &mut b) {
            self.set_is_enable00(b);
        }

        let mut b: bool = self.is_enable01();
        if ui.checkbox("isEnable01", &mut b) {
            self.set_is_enable01(b);
        }

        let mut b: bool = self.is_enable02();
        if ui.checkbox("isEnable02", &mut b) {
            self.set_is_enable02(b);
        }

        let mut b: bool = self.unkb1();
        if ui.checkbox("unkb1", &mut b) {
            self.set_unkb1(b);
        }

        let mut b: bool = self.unkb2();
        if ui.checkbox("unkb2", &mut b) {
            self.set_unkb2(b);
        }

        let mut b: bool = self.unkb3();
        if ui.checkbox("unkb3", &mut b) {
            self.set_unkb3(b);
        }

        let mut b: bool = self.unkb4();
        if ui.checkbox("unkb4", &mut b) {
            self.set_unkb4(b);
        }

        let mut b: bool = self.unkb5();
        if ui.checkbox("unkb5", &mut b) {
            self.set_unkb5(b);
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NetworkMsgParam {
    pub msg_type0: u8,
    pub msg_type1: u8,
    pub msg_type2: u8,
    pub msg_type3: u8,
    pub msg_id0: i32,
    pub msg_id1: i32,
    pub msg_id2: i32,
    pub msg_id3: i32,
    pub msg_id4: i32,
    pub msg_id5: i32,
    pub msg_id6: i32,
    pub msg_id7: i32,
    pub msg_id8: i32,
    pub msg_id9: i32,
    pub msg_id10: i32,
    pub msg_id11: i32,
    pub msg_id12: i32,
    pub msg_id13: i32,
    pub msg_id14: i32,
    pub msg_id15: i32,
    pub msg_id16: i32,
    pub msg_id17: i32,
    pub msg_id18: i32,
    pub msg_id19: i32,
    pub msg_id20: i32,
    pub msg_id21: i32,
    pub msg_id22: i32,
    pub pad1: [u8; 48],
}

impl RenderableParam for NetworkMsgParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.msg_type0 as _;
        if ui.input_int("MsgType0", &mut i).build() {
            self.msg_type0 = i as _;
        }

        let mut i: i32 = self.msg_type1 as _;
        if ui.input_int("MsgType1", &mut i).build() {
            self.msg_type1 = i as _;
        }

        let mut i: i32 = self.msg_type2 as _;
        if ui.input_int("MsgType2", &mut i).build() {
            self.msg_type2 = i as _;
        }

        let mut i: i32 = self.msg_type3 as _;
        if ui.input_int("MsgType3", &mut i).build() {
            self.msg_type3 = i as _;
        }

        let mut i: i32 = self.msg_id0 as _;
        if ui.input_int("MsgId0", &mut i).build() {
            self.msg_id0 = i as _;
        }

        let mut i: i32 = self.msg_id1 as _;
        if ui.input_int("MsgId1", &mut i).build() {
            self.msg_id1 = i as _;
        }

        let mut i: i32 = self.msg_id2 as _;
        if ui.input_int("MsgId2", &mut i).build() {
            self.msg_id2 = i as _;
        }

        let mut i: i32 = self.msg_id3 as _;
        if ui.input_int("MsgId3", &mut i).build() {
            self.msg_id3 = i as _;
        }

        let mut i: i32 = self.msg_id4 as _;
        if ui.input_int("MsgId4", &mut i).build() {
            self.msg_id4 = i as _;
        }

        let mut i: i32 = self.msg_id5 as _;
        if ui.input_int("MsgId5", &mut i).build() {
            self.msg_id5 = i as _;
        }

        let mut i: i32 = self.msg_id6 as _;
        if ui.input_int("MsgId6", &mut i).build() {
            self.msg_id6 = i as _;
        }

        let mut i: i32 = self.msg_id7 as _;
        if ui.input_int("MsgId7", &mut i).build() {
            self.msg_id7 = i as _;
        }

        let mut i: i32 = self.msg_id8 as _;
        if ui.input_int("MsgId8", &mut i).build() {
            self.msg_id8 = i as _;
        }

        let mut i: i32 = self.msg_id9 as _;
        if ui.input_int("MsgId9", &mut i).build() {
            self.msg_id9 = i as _;
        }

        let mut i: i32 = self.msg_id10 as _;
        if ui.input_int("MsgId10", &mut i).build() {
            self.msg_id10 = i as _;
        }

        let mut i: i32 = self.msg_id11 as _;
        if ui.input_int("MsgId11", &mut i).build() {
            self.msg_id11 = i as _;
        }

        let mut i: i32 = self.msg_id12 as _;
        if ui.input_int("MsgId12", &mut i).build() {
            self.msg_id12 = i as _;
        }

        let mut i: i32 = self.msg_id13 as _;
        if ui.input_int("MsgId13", &mut i).build() {
            self.msg_id13 = i as _;
        }

        let mut i: i32 = self.msg_id14 as _;
        if ui.input_int("MsgId14", &mut i).build() {
            self.msg_id14 = i as _;
        }

        let mut i: i32 = self.msg_id15 as _;
        if ui.input_int("MsgId15", &mut i).build() {
            self.msg_id15 = i as _;
        }

        let mut i: i32 = self.msg_id16 as _;
        if ui.input_int("MsgId16", &mut i).build() {
            self.msg_id16 = i as _;
        }

        let mut i: i32 = self.msg_id17 as _;
        if ui.input_int("MsgId17", &mut i).build() {
            self.msg_id17 = i as _;
        }

        let mut i: i32 = self.msg_id18 as _;
        if ui.input_int("MsgId18", &mut i).build() {
            self.msg_id18 = i as _;
        }

        let mut i: i32 = self.msg_id19 as _;
        if ui.input_int("MsgId19", &mut i).build() {
            self.msg_id19 = i as _;
        }

        let mut i: i32 = self.msg_id20 as _;
        if ui.input_int("MsgId20", &mut i).build() {
            self.msg_id20 = i as _;
        }

        let mut i: i32 = self.msg_id21 as _;
        if ui.input_int("MsgId21", &mut i).build() {
            self.msg_id21 = i as _;
        }

        let mut i: i32 = self.msg_id22 as _;
        if ui.input_int("MsgId22", &mut i).build() {
            self.msg_id22 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NetworkParam {
    pub network_data: [u8; 632],
}

impl RenderableParam for NetworkParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {}
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NewMenuColorTableParam {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}

impl RenderableParam for NewMenuColorTableParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.r as _;
        if ui.input_int("R", &mut i).build() {
            self.r = i as _;
        }

        let mut i: i32 = self.g as _;
        if ui.input_int("G", &mut i).build() {
            self.g = i as _;
        }

        let mut i: i32 = self.b as _;
        if ui.input_int("B", &mut i).build() {
            self.b = i as _;
        }

        let mut i: i32 = self.a as _;
        if ui.input_int("A", &mut i).build() {
            self.a = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NpcAiActionParam {
    pub direction_movement_id: u8,
    pub act_id0: u8,
    pub act_id1: u8,
    pub act_id2: u8,
    pub is_disable_direction_movement: u8,
    pub is_disable_act0: u8,
    pub is_disable_act1: u8,
    pub is_disable_act2: u8,
    pub act_type: i32,
    pub is_disable_ai_check: u8,
    pub pad1: [u8; 3],
}

impl RenderableParam for NpcAiActionParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.direction_movement_id as _;
        if ui.input_int("directionMovementId", &mut i).build() {
            self.direction_movement_id = i as _;
        }

        let mut i: i32 = self.act_id0 as _;
        if ui.input_int("actId0", &mut i).build() {
            self.act_id0 = i as _;
        }

        let mut i: i32 = self.act_id1 as _;
        if ui.input_int("actId1", &mut i).build() {
            self.act_id1 = i as _;
        }

        let mut i: i32 = self.act_id2 as _;
        if ui.input_int("actId2", &mut i).build() {
            self.act_id2 = i as _;
        }

        let mut i: i32 = self.is_disable_direction_movement as _;
        if ui.input_int("isDisableDirectionMovement", &mut i).build() {
            self.is_disable_direction_movement = i as _;
        }

        let mut i: i32 = self.is_disable_act0 as _;
        if ui.input_int("isDisableAct0", &mut i).build() {
            self.is_disable_act0 = i as _;
        }

        let mut i: i32 = self.is_disable_act1 as _;
        if ui.input_int("isDisableAct1", &mut i).build() {
            self.is_disable_act1 = i as _;
        }

        let mut i: i32 = self.is_disable_act2 as _;
        if ui.input_int("isDisableAct2", &mut i).build() {
            self.is_disable_act2 = i as _;
        }

        let mut i: i32 = self.act_type as _;
        if ui.input_int("actType", &mut i).build() {
            self.act_type = i as _;
        }

        let mut i: i32 = self.is_disable_ai_check as _;
        if ui.input_int("isDisableAiCheck", &mut i).build() {
            self.is_disable_ai_check = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NpcParam {
    pub behavior_variation_id: i32,
    pub ai_think_id: i32,
    pub name_id: i32,
    pub turn_vellocity: f32,
    pub hit_height: f32,
    pub hit_radius: f32,
    pub weight: i32,
    pub hit_offset: f32,
    pub hp: i32,
    pub mp: i32,
    pub get_soul: i32,
    pub item_lot_id1: i32,
    pub item_lot_id2: i32,
    pub item_lot_id3: i32,
    pub item_lot_id4: i32,
    pub item_lot_id5: i32,
    pub item_lot_id6: i32,
    pub humanity_lot_id: i32,
    pub sp_effect_id0: i32,
    pub sp_effect_id1: i32,
    pub sp_effect_id2: i32,
    pub sp_effect_id3: i32,
    pub sp_effect_id4: i32,
    pub sp_effect_id5: i32,
    pub sp_effect_id6: i32,
    pub sp_effect_id7: i32,
    pub game_clear_sp_effect_id: i32,
    pub phys_guard_cut_rate: f32,
    pub mag_guard_cut_rate: f32,
    pub fire_guard_cut_rate: f32,
    pub thun_guard_cut_rate: f32,
    pub animid_offset: i32,
    pub move_anim_id: i32,
    pub sp_move_anim_id1: i32,
    pub sp_move_anim_id2: i32,
    pub network_warp_disp: f32,
    pub dbg_behavior_r1: i32,
    pub dbg_behavior_l1: i32,
    pub dbg_behavior_r2: i32,
    pub dbg_behavior_l2: i32,
    pub dbg_behavior_rl: i32,
    pub dbg_behavior_rr: i32,
    pub dbg_behavior_rd: i32,
    pub dbg_behavior_ru: i32,
    pub dbg_behavior_ll: i32,
    pub dbg_behavior_lr: i32,
    pub dbg_behavior_ld: i32,
    pub dbg_behavior_lu: i32,
    pub anim_id_offset: i32,
    pub parts_damage_rate1: f32,
    pub parts_damage_rate2: f32,
    pub parts_damage_rate3: f32,
    pub parts_damage_rate4: f32,
    pub parts_damage_rate5: f32,
    pub parts_damage_rate6: f32,
    pub parts_damage_rate7: f32,
    pub parts_damage_rate8: f32,
    pub weak_parts_damage_rate: f32,
    pub super_armor_recover_correction: f32,
    pub super_armor_brake_knockback_dist: f32,
    pub stamina: i16,
    pub stamina_recover_base_val: i16,
    pub def_phys: i16,
    pub def_slash: i16,
    pub def_blow: i16,
    pub def_thrust: i16,
    pub def_mag: i16,
    pub def_fire: i16,
    pub def_thunder: i16,
    pub def_flick_power: i16,
    pub resist_poison: i16,
    pub resist_toxic: i16,
    pub resist_blood: i16,
    pub resist_curse: i16,
    pub ghost_model_id: i16,
    pub normal_change_resource_id: i16,
    pub guard_angle: i16,
    pub slash_guard_cut_rate: i16,
    pub blow_guard_cut_rate: i16,
    pub thrust_guard_cut_rate: i16,
    pub super_armor_durability: i16,
    pub normal_change_tex_chr_id: i16,
    pub drop_type: i16,
    pub knockback_rate: u8,
    pub knockback_param_id: u8,
    pub fall_damage_damp: u8,
    pub stamina_guard_def: u8,
    pub pc_attr_b: u8,
    pub pc_attr_w: u8,
    pub pc_attr_l: u8,
    pub pc_attr_r: u8,
    pub area_attr_b: u8,
    pub area_attr_w: u8,
    pub area_attr_l: u8,
    pub area_attr_r: u8,
    pub mp_recover_base_val: u8,
    pub flick_damage_cut_rate: u8,
    pub default_lod_param_id: i8,
    pub draw_type: u8,
    pub npc_type: u8,
    pub team_type: u8,
    pub move_type: u8,
    pub lock_dist: u8,
    pub material: i16,
    pub material_sfx: i16,
    pub parts_damage_type: u8,
    pub max_unduration_ang: u8,
    pub guard_level: u8,
    pub burnsfx_type: u8,
    pub poison_guard_resist: u8,
    pub toxic_guard_resist: u8,
    pub blood_guard_resist: u8,
    pub curse_guard_resist: u8,
    pub parry_attack: u8,
    pub parry_defense: u8,
    pub sfx_size: u8,
    pub push_out_cam_region_radius: u8,
    pub hit_stop_type: u8,
    pub ladder_end_chk_offset_top: u8,
    pub ladder_end_chk_offset_low: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub bitfield3: u8,
    pub bitfield4: u8,
    pub bitfield5: u8,
    pub bitfield6: u8,
    pub item_search_radius: f32,
    pub sub_hit_height: f32,
    pub sub_hit_radius: f32,
    pub turn_velocity_type: u8,
    pub bitfield7: u8,
    pub def_dark: i16,
    pub sub_turn_velocity: f32,
    pub foot_step_id: i32,
    pub sub_material: i16,
    pub sub_material_sfx: i16,
    pub material_weak: i16,
    pub material_sfx_weak: i16,
    pub sub_material_weak: i16,
    pub sub_material_sfx_weak: i16,
    pub sp_effect_id8: i32,
    pub sp_effect_id9: i32,
    pub sp_effect_id10: i32,
    pub sp_effect_id11: i32,
    pub sp_effect_id12: i32,
    pub sp_effect_id13: i32,
    pub sp_effect_id14: i32,
    pub sp_effect_id15: i32,
    pub tentative_player_id: i32,
    pub basic_toughness_value: i32,
    pub game_system_param_correction: f32,
    pub regain_rate_phys_neutral: f32,
    pub regain_rate_phys_slash: f32,
    pub regain_rate_phys_blow: f32,
    pub regain_rate_phys_thrust: f32,
    pub regain_rate_magic: f32,
    pub regain_rate_fire: f32,
    pub regain_rate_thunder: f32,
    pub regain_rate_dark: f32,
    pub max_ankle_angle: f32,
    pub cloth_update_offset: i8,
    pub sp_npc_type: u8,
    pub normal_change_model_id: i16,
    pub normal_change_anim_chr_id: i16,
    pub stamina_guard_def_val: i16,
    pub cult_setting_id: i32,
    pub phantom_param_id: i32,
    pub multi_play_correction_id: i32,
    pub foot_ankle: f32,
    pub resist_frost: i16,
    pub sub_npc_type: u8,
    pub sub_team_type: u8,
    pub lock_cam_param_id: i32,
    pub sp_effect_id16: i32,
    pub sp_effect_id17: i32,
    pub sp_effect_id18: i32,
    pub sp_effect_id19: i32,
    pub sp_effect_id20: i32,
    pub sp_effect_id21: i32,
    pub sp_effect_id22: i32,
    pub sp_effect_id23: i32,
    pub sp_effect_id24: i32,
    pub sp_effect_id25: i32,
    pub sp_effect_id26: i32,
    pub sp_effect_id27: i32,
    pub sp_effect_id28: i32,
    pub sp_effect_id29: i32,
    pub sp_effect_id30: i32,
    pub sp_effect_id31: i32,
    pub lock_correction: f32,
    pub sub_cloth_update_offset: i8,
    pub pad1: [u8; 1],
    pub estus_flask_param_id: i16,
    pub text_id: i32,
    pub h_p: i16,
    pub h_p_restore_id0: i16,
    pub m_p_restore_id0: i16,
    pub h_p_0: i16,
    pub h_p_restore_id1: i16,
    pub m_p_restore_id1: i16,
    pub sub_phantom_param_id: i32,
    pub activate_distance: i16,
    pub deactivate_distance: i16,
    pub pad2: [u8; 4],
}

impl NpcParam {
    #[allow(unused)]
    pub fn set_use_ragdoll_cam_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_ragdoll_cam_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_cloth_rigid_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_cloth_rigid_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_ragdoll(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_ragdoll(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_demon(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_demon(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ghost(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ghost(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_no_damage_motion(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_no_damage_motion(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_unduration(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_unduration(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_change_wander_ghost(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_change_wander_ghost(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask8(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask8(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask9(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask9(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask10(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask10(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask11(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask11(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask12(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask12(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask15(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask15(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enable_neck_turn(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enable_neck_turn(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_respawn(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_respawn(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_move_anim_wait(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_move_anim_wait(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_crowd(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_crowd(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_weak_saint(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_weak_saint(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_weak_a(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_weak_a(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_weak_b(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_weak_b(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_enable_drop_soul_capture(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enable_drop_soul_capture(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_intiliaze_dead(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_intiliaze_dead(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_soul_get_by_boss(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_soul_get_by_boss(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_multilingual(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_multilingual(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask16(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask16(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask17(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask17(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask18(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask18(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask19(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask19(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask20(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask20(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask21(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask21(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask22(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask22(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask23(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask23(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask24(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask24(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask25(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask25(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask26(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask26(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask27(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask27(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask28(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask28(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask29(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask29(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask30(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask30(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_model_disp_mask31(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn model_disp_mask31(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_mult_mode_boss(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_mult_mode_boss(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_beh_mem_size(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn beh_mem_size(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_use_feet_data(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_use_feet_data(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield7 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for NpcParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.behavior_variation_id as _;
        if ui.input_int("behaviorVariationId", &mut i).build() {
            self.behavior_variation_id = i as _;
        }

        let mut i: i32 = self.ai_think_id as _;
        if ui.input_int("AiThinkId", &mut i).build() {
            self.ai_think_id = i as _;
        }

        let mut i: i32 = self.name_id as _;
        if ui.input_int("NameId", &mut i).build() {
            self.name_id = i as _;
        }

        let mut i: f32 = self.turn_vellocity;
        if ui.input_float("turnVellocity", &mut i).build() {
            self.turn_vellocity = i;
        }

        let mut i: f32 = self.hit_height;
        if ui.input_float("hitHeight", &mut i).build() {
            self.hit_height = i;
        }

        let mut i: f32 = self.hit_radius;
        if ui.input_float("hitRadius", &mut i).build() {
            self.hit_radius = i;
        }

        let mut i: i32 = self.weight as _;
        if ui.input_int("weight", &mut i).build() {
            self.weight = i as _;
        }

        let mut i: f32 = self.hit_offset;
        if ui.input_float("hitOffset", &mut i).build() {
            self.hit_offset = i;
        }

        let mut i: i32 = self.hp as _;
        if ui.input_int("Hp", &mut i).build() {
            self.hp = i as _;
        }

        let mut i: i32 = self.mp as _;
        if ui.input_int("Mp", &mut i).build() {
            self.mp = i as _;
        }

        let mut i: i32 = self.get_soul as _;
        if ui.input_int("getSoul", &mut i).build() {
            self.get_soul = i as _;
        }

        let mut i: i32 = self.item_lot_id1 as _;
        if ui.input_int("ItemLotId1", &mut i).build() {
            self.item_lot_id1 = i as _;
        }

        let mut i: i32 = self.item_lot_id2 as _;
        if ui.input_int("ItemLotId2", &mut i).build() {
            self.item_lot_id2 = i as _;
        }

        let mut i: i32 = self.item_lot_id3 as _;
        if ui.input_int("ItemLotId3", &mut i).build() {
            self.item_lot_id3 = i as _;
        }

        let mut i: i32 = self.item_lot_id4 as _;
        if ui.input_int("ItemLotId4", &mut i).build() {
            self.item_lot_id4 = i as _;
        }

        let mut i: i32 = self.item_lot_id5 as _;
        if ui.input_int("ItemLotId5", &mut i).build() {
            self.item_lot_id5 = i as _;
        }

        let mut i: i32 = self.item_lot_id6 as _;
        if ui.input_int("ItemLotId6", &mut i).build() {
            self.item_lot_id6 = i as _;
        }

        let mut i: i32 = self.humanity_lot_id as _;
        if ui.input_int("humanityLotId", &mut i).build() {
            self.humanity_lot_id = i as _;
        }

        let mut i: i32 = self.sp_effect_id0 as _;
        if ui.input_int("spEffectId0", &mut i).build() {
            self.sp_effect_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_id1 as _;
        if ui.input_int("spEffectId1", &mut i).build() {
            self.sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.sp_effect_id2 as _;
        if ui.input_int("spEffectId2", &mut i).build() {
            self.sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.sp_effect_id3 as _;
        if ui.input_int("spEffectId3", &mut i).build() {
            self.sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.sp_effect_id4 as _;
        if ui.input_int("spEffectId4", &mut i).build() {
            self.sp_effect_id4 = i as _;
        }

        let mut i: i32 = self.sp_effect_id5 as _;
        if ui.input_int("spEffectId5", &mut i).build() {
            self.sp_effect_id5 = i as _;
        }

        let mut i: i32 = self.sp_effect_id6 as _;
        if ui.input_int("spEffectId6", &mut i).build() {
            self.sp_effect_id6 = i as _;
        }

        let mut i: i32 = self.sp_effect_id7 as _;
        if ui.input_int("spEffectId7", &mut i).build() {
            self.sp_effect_id7 = i as _;
        }

        let mut i: i32 = self.game_clear_sp_effect_id as _;
        if ui.input_int("GameClearSpEffectID", &mut i).build() {
            self.game_clear_sp_effect_id = i as _;
        }

        let mut i: f32 = self.phys_guard_cut_rate;
        if ui.input_float("physGuardCutRate", &mut i).build() {
            self.phys_guard_cut_rate = i;
        }

        let mut i: f32 = self.mag_guard_cut_rate;
        if ui.input_float("magGuardCutRate", &mut i).build() {
            self.mag_guard_cut_rate = i;
        }

        let mut i: f32 = self.fire_guard_cut_rate;
        if ui.input_float("fireGuardCutRate", &mut i).build() {
            self.fire_guard_cut_rate = i;
        }

        let mut i: f32 = self.thun_guard_cut_rate;
        if ui.input_float("thunGuardCutRate", &mut i).build() {
            self.thun_guard_cut_rate = i;
        }

        let mut i: i32 = self.animid_offset as _;
        if ui.input_int("animidOffset", &mut i).build() {
            self.animid_offset = i as _;
        }

        let mut i: i32 = self.move_anim_id as _;
        if ui.input_int("moveAnimId", &mut i).build() {
            self.move_anim_id = i as _;
        }

        let mut i: i32 = self.sp_move_anim_id1 as _;
        if ui.input_int("spMoveAnimId1", &mut i).build() {
            self.sp_move_anim_id1 = i as _;
        }

        let mut i: i32 = self.sp_move_anim_id2 as _;
        if ui.input_int("spMoveAnimId2", &mut i).build() {
            self.sp_move_anim_id2 = i as _;
        }

        let mut i: f32 = self.network_warp_disp;
        if ui.input_float("networkWarpDisp", &mut i).build() {
            self.network_warp_disp = i;
        }

        let mut i: i32 = self.dbg_behavior_r1 as _;
        if ui.input_int("dbgBehaviorR1", &mut i).build() {
            self.dbg_behavior_r1 = i as _;
        }

        let mut i: i32 = self.dbg_behavior_l1 as _;
        if ui.input_int("dbgBehaviorL1", &mut i).build() {
            self.dbg_behavior_l1 = i as _;
        }

        let mut i: i32 = self.dbg_behavior_r2 as _;
        if ui.input_int("dbgBehaviorR2", &mut i).build() {
            self.dbg_behavior_r2 = i as _;
        }

        let mut i: i32 = self.dbg_behavior_l2 as _;
        if ui.input_int("dbgBehaviorL2", &mut i).build() {
            self.dbg_behavior_l2 = i as _;
        }

        let mut i: i32 = self.dbg_behavior_rl as _;
        if ui.input_int("dbgBehaviorRL", &mut i).build() {
            self.dbg_behavior_rl = i as _;
        }

        let mut i: i32 = self.dbg_behavior_rr as _;
        if ui.input_int("dbgBehaviorRR", &mut i).build() {
            self.dbg_behavior_rr = i as _;
        }

        let mut i: i32 = self.dbg_behavior_rd as _;
        if ui.input_int("dbgBehaviorRD", &mut i).build() {
            self.dbg_behavior_rd = i as _;
        }

        let mut i: i32 = self.dbg_behavior_ru as _;
        if ui.input_int("dbgBehaviorRU", &mut i).build() {
            self.dbg_behavior_ru = i as _;
        }

        let mut i: i32 = self.dbg_behavior_ll as _;
        if ui.input_int("dbgBehaviorLL", &mut i).build() {
            self.dbg_behavior_ll = i as _;
        }

        let mut i: i32 = self.dbg_behavior_lr as _;
        if ui.input_int("dbgBehaviorLR", &mut i).build() {
            self.dbg_behavior_lr = i as _;
        }

        let mut i: i32 = self.dbg_behavior_ld as _;
        if ui.input_int("dbgBehaviorLD", &mut i).build() {
            self.dbg_behavior_ld = i as _;
        }

        let mut i: i32 = self.dbg_behavior_lu as _;
        if ui.input_int("dbgBehaviorLU", &mut i).build() {
            self.dbg_behavior_lu = i as _;
        }

        let mut i: i32 = self.anim_id_offset as _;
        if ui.input_int("animIdOffset", &mut i).build() {
            self.anim_id_offset = i as _;
        }

        let mut i: f32 = self.parts_damage_rate1;
        if ui.input_float("partsDamageRate1", &mut i).build() {
            self.parts_damage_rate1 = i;
        }

        let mut i: f32 = self.parts_damage_rate2;
        if ui.input_float("partsDamageRate2", &mut i).build() {
            self.parts_damage_rate2 = i;
        }

        let mut i: f32 = self.parts_damage_rate3;
        if ui.input_float("partsDamageRate3", &mut i).build() {
            self.parts_damage_rate3 = i;
        }

        let mut i: f32 = self.parts_damage_rate4;
        if ui.input_float("partsDamageRate4", &mut i).build() {
            self.parts_damage_rate4 = i;
        }

        let mut i: f32 = self.parts_damage_rate5;
        if ui.input_float("partsDamageRate5", &mut i).build() {
            self.parts_damage_rate5 = i;
        }

        let mut i: f32 = self.parts_damage_rate6;
        if ui.input_float("partsDamageRate6", &mut i).build() {
            self.parts_damage_rate6 = i;
        }

        let mut i: f32 = self.parts_damage_rate7;
        if ui.input_float("partsDamageRate7", &mut i).build() {
            self.parts_damage_rate7 = i;
        }

        let mut i: f32 = self.parts_damage_rate8;
        if ui.input_float("partsDamageRate8", &mut i).build() {
            self.parts_damage_rate8 = i;
        }

        let mut i: f32 = self.weak_parts_damage_rate;
        if ui.input_float("weakPartsDamageRate", &mut i).build() {
            self.weak_parts_damage_rate = i;
        }

        let mut i: f32 = self.super_armor_recover_correction;
        if ui
            .input_float("SuperArmorRecoverCorrection", &mut i)
            .build()
        {
            self.super_armor_recover_correction = i;
        }

        let mut i: f32 = self.super_armor_brake_knockback_dist;
        if ui
            .input_float("SuperArmorBrakeKnockbackDist", &mut i)
            .build()
        {
            self.super_armor_brake_knockback_dist = i;
        }

        let mut i: i32 = self.stamina as _;
        if ui.input_int("stamina", &mut i).build() {
            self.stamina = i as _;
        }

        let mut i: i32 = self.stamina_recover_base_val as _;
        if ui.input_int("staminaRecoverBaseVal", &mut i).build() {
            self.stamina_recover_base_val = i as _;
        }

        let mut i: i32 = self.def_phys as _;
        if ui.input_int("defPhys", &mut i).build() {
            self.def_phys = i as _;
        }

        let mut i: i32 = self.def_slash as _;
        if ui.input_int("defSlash", &mut i).build() {
            self.def_slash = i as _;
        }

        let mut i: i32 = self.def_blow as _;
        if ui.input_int("defBlow", &mut i).build() {
            self.def_blow = i as _;
        }

        let mut i: i32 = self.def_thrust as _;
        if ui.input_int("defThrust", &mut i).build() {
            self.def_thrust = i as _;
        }

        let mut i: i32 = self.def_mag as _;
        if ui.input_int("defMag", &mut i).build() {
            self.def_mag = i as _;
        }

        let mut i: i32 = self.def_fire as _;
        if ui.input_int("defFire", &mut i).build() {
            self.def_fire = i as _;
        }

        let mut i: i32 = self.def_thunder as _;
        if ui.input_int("defThunder", &mut i).build() {
            self.def_thunder = i as _;
        }

        let mut i: i32 = self.def_flick_power as _;
        if ui.input_int("defFlickPower", &mut i).build() {
            self.def_flick_power = i as _;
        }

        let mut i: i32 = self.resist_poison as _;
        if ui.input_int("resistPoison", &mut i).build() {
            self.resist_poison = i as _;
        }

        let mut i: i32 = self.resist_toxic as _;
        if ui.input_int("resistToxic", &mut i).build() {
            self.resist_toxic = i as _;
        }

        let mut i: i32 = self.resist_blood as _;
        if ui.input_int("resistBlood", &mut i).build() {
            self.resist_blood = i as _;
        }

        let mut i: i32 = self.resist_curse as _;
        if ui.input_int("resistCurse", &mut i).build() {
            self.resist_curse = i as _;
        }

        let mut i: i32 = self.ghost_model_id as _;
        if ui.input_int("ghostModelId", &mut i).build() {
            self.ghost_model_id = i as _;
        }

        let mut i: i32 = self.normal_change_resource_id as _;
        if ui.input_int("normalChangeResourceId", &mut i).build() {
            self.normal_change_resource_id = i as _;
        }

        let mut i: i32 = self.guard_angle as _;
        if ui.input_int("guardAngle", &mut i).build() {
            self.guard_angle = i as _;
        }

        let mut i: i32 = self.slash_guard_cut_rate as _;
        if ui.input_int("slashGuardCutRate", &mut i).build() {
            self.slash_guard_cut_rate = i as _;
        }

        let mut i: i32 = self.blow_guard_cut_rate as _;
        if ui.input_int("blowGuardCutRate", &mut i).build() {
            self.blow_guard_cut_rate = i as _;
        }

        let mut i: i32 = self.thrust_guard_cut_rate as _;
        if ui.input_int("thrustGuardCutRate", &mut i).build() {
            self.thrust_guard_cut_rate = i as _;
        }

        let mut i: i32 = self.super_armor_durability as _;
        if ui.input_int("superArmorDurability", &mut i).build() {
            self.super_armor_durability = i as _;
        }

        let mut i: i32 = self.normal_change_tex_chr_id as _;
        if ui.input_int("normalChangeTexChrId", &mut i).build() {
            self.normal_change_tex_chr_id = i as _;
        }

        let mut i: i32 = self.drop_type as _;
        if ui.input_int("dropType", &mut i).build() {
            self.drop_type = i as _;
        }

        let mut i: i32 = self.knockback_rate as _;
        if ui.input_int("knockbackRate", &mut i).build() {
            self.knockback_rate = i as _;
        }

        let mut i: i32 = self.knockback_param_id as _;
        if ui.input_int("knockbackParamId", &mut i).build() {
            self.knockback_param_id = i as _;
        }

        let mut i: i32 = self.fall_damage_damp as _;
        if ui.input_int("fallDamageDamp", &mut i).build() {
            self.fall_damage_damp = i as _;
        }

        let mut i: i32 = self.stamina_guard_def as _;
        if ui.input_int("staminaGuardDef", &mut i).build() {
            self.stamina_guard_def = i as _;
        }

        let mut i: i32 = self.pc_attr_b as _;
        if ui.input_int("pcAttrB", &mut i).build() {
            self.pc_attr_b = i as _;
        }

        let mut i: i32 = self.pc_attr_w as _;
        if ui.input_int("pcAttrW", &mut i).build() {
            self.pc_attr_w = i as _;
        }

        let mut i: i32 = self.pc_attr_l as _;
        if ui.input_int("pcAttrL", &mut i).build() {
            self.pc_attr_l = i as _;
        }

        let mut i: i32 = self.pc_attr_r as _;
        if ui.input_int("pcAttrR", &mut i).build() {
            self.pc_attr_r = i as _;
        }

        let mut i: i32 = self.area_attr_b as _;
        if ui.input_int("areaAttrB", &mut i).build() {
            self.area_attr_b = i as _;
        }

        let mut i: i32 = self.area_attr_w as _;
        if ui.input_int("areaAttrW", &mut i).build() {
            self.area_attr_w = i as _;
        }

        let mut i: i32 = self.area_attr_l as _;
        if ui.input_int("areaAttrL", &mut i).build() {
            self.area_attr_l = i as _;
        }

        let mut i: i32 = self.area_attr_r as _;
        if ui.input_int("areaAttrR", &mut i).build() {
            self.area_attr_r = i as _;
        }

        let mut i: i32 = self.mp_recover_base_val as _;
        if ui.input_int("mpRecoverBaseVal", &mut i).build() {
            self.mp_recover_base_val = i as _;
        }

        let mut i: i32 = self.flick_damage_cut_rate as _;
        if ui.input_int("flickDamageCutRate", &mut i).build() {
            self.flick_damage_cut_rate = i as _;
        }

        let mut i: i32 = self.default_lod_param_id as _;
        if ui.input_int("defaultLodParamId", &mut i).build() {
            self.default_lod_param_id = i as _;
        }

        let mut i: i32 = self.draw_type as _;
        if ui.input_int("drawType", &mut i).build() {
            self.draw_type = i as _;
        }

        let mut i: i32 = self.npc_type as _;
        if ui.input_int("npcType", &mut i).build() {
            self.npc_type = i as _;
        }

        let mut i: i32 = self.team_type as _;
        if ui.input_int("teamType", &mut i).build() {
            self.team_type = i as _;
        }

        let mut i: i32 = self.move_type as _;
        if ui.input_int("moveType", &mut i).build() {
            self.move_type = i as _;
        }

        let mut i: i32 = self.lock_dist as _;
        if ui.input_int("lockDist", &mut i).build() {
            self.lock_dist = i as _;
        }

        let mut i: i32 = self.material as _;
        if ui.input_int("material", &mut i).build() {
            self.material = i as _;
        }

        let mut i: i32 = self.material_sfx as _;
        if ui.input_int("materialSfx", &mut i).build() {
            self.material_sfx = i as _;
        }

        let mut i: i32 = self.parts_damage_type as _;
        if ui.input_int("partsDamageType", &mut i).build() {
            self.parts_damage_type = i as _;
        }

        let mut i: i32 = self.max_unduration_ang as _;
        if ui.input_int("maxUndurationAng", &mut i).build() {
            self.max_unduration_ang = i as _;
        }

        let mut i: i32 = self.guard_level as _;
        if ui.input_int("guardLevel", &mut i).build() {
            self.guard_level = i as _;
        }

        let mut i: i32 = self.burnsfx_type as _;
        if ui.input_int("burnsfxType", &mut i).build() {
            self.burnsfx_type = i as _;
        }

        let mut i: i32 = self.poison_guard_resist as _;
        if ui.input_int("poisonGuardResist", &mut i).build() {
            self.poison_guard_resist = i as _;
        }

        let mut i: i32 = self.toxic_guard_resist as _;
        if ui.input_int("toxicGuardResist", &mut i).build() {
            self.toxic_guard_resist = i as _;
        }

        let mut i: i32 = self.blood_guard_resist as _;
        if ui.input_int("bloodGuardResist", &mut i).build() {
            self.blood_guard_resist = i as _;
        }

        let mut i: i32 = self.curse_guard_resist as _;
        if ui.input_int("curseGuardResist", &mut i).build() {
            self.curse_guard_resist = i as _;
        }

        let mut i: i32 = self.parry_attack as _;
        if ui.input_int("parryAttack", &mut i).build() {
            self.parry_attack = i as _;
        }

        let mut i: i32 = self.parry_defense as _;
        if ui.input_int("parryDefense", &mut i).build() {
            self.parry_defense = i as _;
        }

        let mut i: i32 = self.sfx_size as _;
        if ui.input_int("sfxSize", &mut i).build() {
            self.sfx_size = i as _;
        }

        let mut i: i32 = self.push_out_cam_region_radius as _;
        if ui.input_int("pushOutCamRegionRadius", &mut i).build() {
            self.push_out_cam_region_radius = i as _;
        }

        let mut i: i32 = self.hit_stop_type as _;
        if ui.input_int("hitStopType", &mut i).build() {
            self.hit_stop_type = i as _;
        }

        let mut i: i32 = self.ladder_end_chk_offset_top as _;
        if ui.input_int("ladderEndChkOffsetTop", &mut i).build() {
            self.ladder_end_chk_offset_top = i as _;
        }

        let mut i: i32 = self.ladder_end_chk_offset_low as _;
        if ui.input_int("ladderEndChkOffsetLow", &mut i).build() {
            self.ladder_end_chk_offset_low = i as _;
        }

        let mut b: bool = self.use_ragdoll_cam_hit();
        if ui.checkbox("UseRagdollCamHit", &mut b) {
            self.set_use_ragdoll_cam_hit(b);
        }

        let mut b: bool = self.disable_cloth_rigid_hit();
        if ui.checkbox("disableClothRigidHit", &mut b) {
            self.set_disable_cloth_rigid_hit(b);
        }

        let mut b: bool = self.use_ragdoll();
        if ui.checkbox("UseRagdoll", &mut b) {
            self.set_use_ragdoll(b);
        }

        let mut b: bool = self.is_demon();
        if ui.checkbox("isDemon", &mut b) {
            self.set_is_demon(b);
        }

        let mut b: bool = self.is_ghost();
        if ui.checkbox("isGhost", &mut b) {
            self.set_is_ghost(b);
        }

        let mut b: bool = self.is_no_damage_motion();
        if ui.checkbox("isNoDamageMotion", &mut b) {
            self.set_is_no_damage_motion(b);
        }

        let mut b: bool = self.is_unduration();
        if ui.checkbox("isUnduration", &mut b) {
            self.set_is_unduration(b);
        }

        let mut b: bool = self.is_change_wander_ghost();
        if ui.checkbox("isChangeWanderGhost", &mut b) {
            self.set_is_change_wander_ghost(b);
        }

        let mut b: bool = self.model_disp_mask0();
        if ui.checkbox("ModelDispMask0", &mut b) {
            self.set_model_disp_mask0(b);
        }

        let mut b: bool = self.model_disp_mask1();
        if ui.checkbox("ModelDispMask1", &mut b) {
            self.set_model_disp_mask1(b);
        }

        let mut b: bool = self.model_disp_mask2();
        if ui.checkbox("ModelDispMask2", &mut b) {
            self.set_model_disp_mask2(b);
        }

        let mut b: bool = self.model_disp_mask3();
        if ui.checkbox("ModelDispMask3", &mut b) {
            self.set_model_disp_mask3(b);
        }

        let mut b: bool = self.model_disp_mask4();
        if ui.checkbox("ModelDispMask4", &mut b) {
            self.set_model_disp_mask4(b);
        }

        let mut b: bool = self.model_disp_mask5();
        if ui.checkbox("ModelDispMask5", &mut b) {
            self.set_model_disp_mask5(b);
        }

        let mut b: bool = self.model_disp_mask6();
        if ui.checkbox("ModelDispMask6", &mut b) {
            self.set_model_disp_mask6(b);
        }

        let mut b: bool = self.model_disp_mask7();
        if ui.checkbox("ModelDispMask7", &mut b) {
            self.set_model_disp_mask7(b);
        }

        let mut b: bool = self.model_disp_mask8();
        if ui.checkbox("ModelDispMask8", &mut b) {
            self.set_model_disp_mask8(b);
        }

        let mut b: bool = self.model_disp_mask9();
        if ui.checkbox("ModelDispMask9", &mut b) {
            self.set_model_disp_mask9(b);
        }

        let mut b: bool = self.model_disp_mask10();
        if ui.checkbox("ModelDispMask10", &mut b) {
            self.set_model_disp_mask10(b);
        }

        let mut b: bool = self.model_disp_mask11();
        if ui.checkbox("ModelDispMask11", &mut b) {
            self.set_model_disp_mask11(b);
        }

        let mut b: bool = self.model_disp_mask12();
        if ui.checkbox("ModelDispMask12", &mut b) {
            self.set_model_disp_mask12(b);
        }

        let mut b: bool = self.model_disp_mask13();
        if ui.checkbox("ModelDispMask13", &mut b) {
            self.set_model_disp_mask13(b);
        }

        let mut b: bool = self.model_disp_mask14();
        if ui.checkbox("ModelDispMask14", &mut b) {
            self.set_model_disp_mask14(b);
        }

        let mut b: bool = self.model_disp_mask15();
        if ui.checkbox("ModelDispMask15", &mut b) {
            self.set_model_disp_mask15(b);
        }

        let mut b: bool = self.is_enable_neck_turn();
        if ui.checkbox("isEnableNeckTurn", &mut b) {
            self.set_is_enable_neck_turn(b);
        }

        let mut b: bool = self.disable_respawn();
        if ui.checkbox("disableRespawn", &mut b) {
            self.set_disable_respawn(b);
        }

        let mut b: bool = self.is_move_anim_wait();
        if ui.checkbox("isMoveAnimWait", &mut b) {
            self.set_is_move_anim_wait(b);
        }

        let mut b: bool = self.is_crowd();
        if ui.checkbox("isCrowd", &mut b) {
            self.set_is_crowd(b);
        }

        let mut b: bool = self.is_weak_saint();
        if ui.checkbox("isWeakSaint", &mut b) {
            self.set_is_weak_saint(b);
        }

        let mut b: bool = self.is_weak_a();
        if ui.checkbox("isWeakA", &mut b) {
            self.set_is_weak_a(b);
        }

        let mut b: bool = self.is_weak_b();
        if ui.checkbox("isWeakB", &mut b) {
            self.set_is_weak_b(b);
        }

        let mut b: bool = self.is_enable_drop_soul_capture();
        if ui.checkbox("isEnableDropSoulCapture", &mut b) {
            self.set_is_enable_drop_soul_capture(b);
        }

        let mut b: bool = self.vow_type0();
        if ui.checkbox("VowType0", &mut b) {
            self.set_vow_type0(b);
        }

        let mut b: bool = self.vow_type1();
        if ui.checkbox("VowType1", &mut b) {
            self.set_vow_type1(b);
        }

        let mut b: bool = self.vow_type2();
        if ui.checkbox("VowType2", &mut b) {
            self.set_vow_type2(b);
        }

        let mut b: bool = self.disable_intiliaze_dead();
        if ui.checkbox("disableIntiliazeDead", &mut b) {
            self.set_disable_intiliaze_dead(b);
        }

        let mut b: bool = self.is_soul_get_by_boss();
        if ui.checkbox("isSoulGetByBoss", &mut b) {
            self.set_is_soul_get_by_boss(b);
        }

        let mut b: bool = self.is_multilingual();
        if ui.checkbox("isMultilingual", &mut b) {
            self.set_is_multilingual(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.model_disp_mask16();
        if ui.checkbox("ModelDispMask16", &mut b) {
            self.set_model_disp_mask16(b);
        }

        let mut b: bool = self.model_disp_mask17();
        if ui.checkbox("ModelDispMask17", &mut b) {
            self.set_model_disp_mask17(b);
        }

        let mut b: bool = self.model_disp_mask18();
        if ui.checkbox("ModelDispMask18", &mut b) {
            self.set_model_disp_mask18(b);
        }

        let mut b: bool = self.model_disp_mask19();
        if ui.checkbox("ModelDispMask19", &mut b) {
            self.set_model_disp_mask19(b);
        }

        let mut b: bool = self.model_disp_mask20();
        if ui.checkbox("ModelDispMask20", &mut b) {
            self.set_model_disp_mask20(b);
        }

        let mut b: bool = self.model_disp_mask21();
        if ui.checkbox("ModelDispMask21", &mut b) {
            self.set_model_disp_mask21(b);
        }

        let mut b: bool = self.model_disp_mask22();
        if ui.checkbox("ModelDispMask22", &mut b) {
            self.set_model_disp_mask22(b);
        }

        let mut b: bool = self.model_disp_mask23();
        if ui.checkbox("ModelDispMask23", &mut b) {
            self.set_model_disp_mask23(b);
        }

        let mut b: bool = self.model_disp_mask24();
        if ui.checkbox("ModelDispMask24", &mut b) {
            self.set_model_disp_mask24(b);
        }

        let mut b: bool = self.model_disp_mask25();
        if ui.checkbox("ModelDispMask25", &mut b) {
            self.set_model_disp_mask25(b);
        }

        let mut b: bool = self.model_disp_mask26();
        if ui.checkbox("ModelDispMask26", &mut b) {
            self.set_model_disp_mask26(b);
        }

        let mut b: bool = self.model_disp_mask27();
        if ui.checkbox("ModelDispMask27", &mut b) {
            self.set_model_disp_mask27(b);
        }

        let mut b: bool = self.model_disp_mask28();
        if ui.checkbox("ModelDispMask28", &mut b) {
            self.set_model_disp_mask28(b);
        }

        let mut b: bool = self.model_disp_mask29();
        if ui.checkbox("ModelDispMask29", &mut b) {
            self.set_model_disp_mask29(b);
        }

        let mut b: bool = self.model_disp_mask30();
        if ui.checkbox("ModelDispMask30", &mut b) {
            self.set_model_disp_mask30(b);
        }

        let mut b: bool = self.model_disp_mask31();
        if ui.checkbox("ModelDispMask31", &mut b) {
            self.set_model_disp_mask31(b);
        }

        let mut i: f32 = self.item_search_radius;
        if ui.input_float("itemSearchRadius", &mut i).build() {
            self.item_search_radius = i;
        }

        let mut i: f32 = self.sub_hit_height;
        if ui.input_float("subHitHeight", &mut i).build() {
            self.sub_hit_height = i;
        }

        let mut i: f32 = self.sub_hit_radius;
        if ui.input_float("subHitRadius", &mut i).build() {
            self.sub_hit_radius = i;
        }

        let mut i: i32 = self.turn_velocity_type as _;
        if ui.input_int("turnVelocityType", &mut i).build() {
            self.turn_velocity_type = i as _;
        }

        let mut b: bool = self.is_mult_mode_boss();
        if ui.checkbox("isMultModeBoss", &mut b) {
            self.set_is_mult_mode_boss(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.beh_mem_size();
        if ui.checkbox("behMemSize", &mut b) {
            self.set_beh_mem_size(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.is_use_feet_data();
        if ui.checkbox("isUseFeetData", &mut b) {
            self.set_is_use_feet_data(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut b: bool = self.unk6();
        if ui.checkbox("Unk6", &mut b) {
            self.set_unk6(b);
        }

        let mut b: bool = self.unk7();
        if ui.checkbox("Unk7", &mut b) {
            self.set_unk7(b);
        }

        let mut i: i32 = self.def_dark as _;
        if ui.input_int("defDark", &mut i).build() {
            self.def_dark = i as _;
        }

        let mut i: f32 = self.sub_turn_velocity;
        if ui.input_float("subTurnVelocity", &mut i).build() {
            self.sub_turn_velocity = i;
        }

        let mut i: i32 = self.foot_step_id as _;
        if ui.input_int("footStepId", &mut i).build() {
            self.foot_step_id = i as _;
        }

        let mut i: i32 = self.sub_material as _;
        if ui.input_int("subMaterial", &mut i).build() {
            self.sub_material = i as _;
        }

        let mut i: i32 = self.sub_material_sfx as _;
        if ui.input_int("subMaterialSfx", &mut i).build() {
            self.sub_material_sfx = i as _;
        }

        let mut i: i32 = self.material_weak as _;
        if ui.input_int("material_Weak", &mut i).build() {
            self.material_weak = i as _;
        }

        let mut i: i32 = self.material_sfx_weak as _;
        if ui.input_int("materialSfx_Weak", &mut i).build() {
            self.material_sfx_weak = i as _;
        }

        let mut i: i32 = self.sub_material_weak as _;
        if ui.input_int("subMaterial_weak", &mut i).build() {
            self.sub_material_weak = i as _;
        }

        let mut i: i32 = self.sub_material_sfx_weak as _;
        if ui.input_int("subMaterialSfx_weak", &mut i).build() {
            self.sub_material_sfx_weak = i as _;
        }

        let mut i: i32 = self.sp_effect_id8 as _;
        if ui.input_int("spEffectId8", &mut i).build() {
            self.sp_effect_id8 = i as _;
        }

        let mut i: i32 = self.sp_effect_id9 as _;
        if ui.input_int("spEffectId9", &mut i).build() {
            self.sp_effect_id9 = i as _;
        }

        let mut i: i32 = self.sp_effect_id10 as _;
        if ui.input_int("spEffectId10", &mut i).build() {
            self.sp_effect_id10 = i as _;
        }

        let mut i: i32 = self.sp_effect_id11 as _;
        if ui.input_int("spEffectId11", &mut i).build() {
            self.sp_effect_id11 = i as _;
        }

        let mut i: i32 = self.sp_effect_id12 as _;
        if ui.input_int("spEffectId12", &mut i).build() {
            self.sp_effect_id12 = i as _;
        }

        let mut i: i32 = self.sp_effect_id13 as _;
        if ui.input_int("spEffectId13", &mut i).build() {
            self.sp_effect_id13 = i as _;
        }

        let mut i: i32 = self.sp_effect_id14 as _;
        if ui.input_int("spEffectId14", &mut i).build() {
            self.sp_effect_id14 = i as _;
        }

        let mut i: i32 = self.sp_effect_id15 as _;
        if ui.input_int("spEffectId15", &mut i).build() {
            self.sp_effect_id15 = i as _;
        }

        let mut i: i32 = self.tentative_player_id as _;
        if ui.input_int("TentativePlayerId", &mut i).build() {
            self.tentative_player_id = i as _;
        }

        let mut i: i32 = self.basic_toughness_value as _;
        if ui.input_int("basicToughnessValue", &mut i).build() {
            self.basic_toughness_value = i as _;
        }

        let mut i: f32 = self.game_system_param_correction;
        if ui.input_float("gameSystemParamCorrection", &mut i).build() {
            self.game_system_param_correction = i;
        }

        let mut i: f32 = self.regain_rate_phys_neutral;
        if ui.input_float("regainRate_PhysNeutral", &mut i).build() {
            self.regain_rate_phys_neutral = i;
        }

        let mut i: f32 = self.regain_rate_phys_slash;
        if ui.input_float("regainRate_PhysSlash", &mut i).build() {
            self.regain_rate_phys_slash = i;
        }

        let mut i: f32 = self.regain_rate_phys_blow;
        if ui.input_float("regainRate_PhysBlow", &mut i).build() {
            self.regain_rate_phys_blow = i;
        }

        let mut i: f32 = self.regain_rate_phys_thrust;
        if ui.input_float("regainRate_PhysThrust", &mut i).build() {
            self.regain_rate_phys_thrust = i;
        }

        let mut i: f32 = self.regain_rate_magic;
        if ui.input_float("regainRate_Magic", &mut i).build() {
            self.regain_rate_magic = i;
        }

        let mut i: f32 = self.regain_rate_fire;
        if ui.input_float("regainRate_Fire", &mut i).build() {
            self.regain_rate_fire = i;
        }

        let mut i: f32 = self.regain_rate_thunder;
        if ui.input_float("regainRate_Thunder", &mut i).build() {
            self.regain_rate_thunder = i;
        }

        let mut i: f32 = self.regain_rate_dark;
        if ui.input_float("regainRate_Dark", &mut i).build() {
            self.regain_rate_dark = i;
        }

        let mut i: f32 = self.max_ankle_angle;
        if ui.input_float("maxAnkleAngle", &mut i).build() {
            self.max_ankle_angle = i;
        }

        let mut i: i32 = self.cloth_update_offset as _;
        if ui.input_int("clothUpdateOffset", &mut i).build() {
            self.cloth_update_offset = i as _;
        }

        let mut i: i32 = self.sp_npc_type as _;
        if ui.input_int("spNpcType", &mut i).build() {
            self.sp_npc_type = i as _;
        }

        let mut i: i32 = self.normal_change_model_id as _;
        if ui.input_int("normalChangeModelId", &mut i).build() {
            self.normal_change_model_id = i as _;
        }

        let mut i: i32 = self.normal_change_anim_chr_id as _;
        if ui.input_int("normalChangeAnimChrId", &mut i).build() {
            self.normal_change_anim_chr_id = i as _;
        }

        let mut i: i32 = self.stamina_guard_def_val as _;
        if ui.input_int("staminaGuardDefVal", &mut i).build() {
            self.stamina_guard_def_val = i as _;
        }

        let mut i: i32 = self.cult_setting_id as _;
        if ui.input_int("CultSettingId", &mut i).build() {
            self.cult_setting_id = i as _;
        }

        let mut i: i32 = self.phantom_param_id as _;
        if ui.input_int("PhantomParamId", &mut i).build() {
            self.phantom_param_id = i as _;
        }

        let mut i: i32 = self.multi_play_correction_id as _;
        if ui.input_int("MultiPlayCorrectionId", &mut i).build() {
            self.multi_play_correction_id = i as _;
        }

        let mut i: f32 = self.foot_ankle;
        if ui.input_float("FootAnkle", &mut i).build() {
            self.foot_ankle = i;
        }

        let mut i: i32 = self.resist_frost as _;
        if ui.input_int("resistFrost", &mut i).build() {
            self.resist_frost = i as _;
        }

        let mut i: i32 = self.sub_npc_type as _;
        if ui.input_int("subNpcType", &mut i).build() {
            self.sub_npc_type = i as _;
        }

        let mut i: i32 = self.sub_team_type as _;
        if ui.input_int("subTeamType", &mut i).build() {
            self.sub_team_type = i as _;
        }

        let mut i: i32 = self.lock_cam_param_id as _;
        if ui.input_int("lockCamParamId", &mut i).build() {
            self.lock_cam_param_id = i as _;
        }

        let mut i: i32 = self.sp_effect_id16 as _;
        if ui.input_int("spEffectId16", &mut i).build() {
            self.sp_effect_id16 = i as _;
        }

        let mut i: i32 = self.sp_effect_id17 as _;
        if ui.input_int("spEffectId17", &mut i).build() {
            self.sp_effect_id17 = i as _;
        }

        let mut i: i32 = self.sp_effect_id18 as _;
        if ui.input_int("spEffectId18", &mut i).build() {
            self.sp_effect_id18 = i as _;
        }

        let mut i: i32 = self.sp_effect_id19 as _;
        if ui.input_int("spEffectId19", &mut i).build() {
            self.sp_effect_id19 = i as _;
        }

        let mut i: i32 = self.sp_effect_id20 as _;
        if ui.input_int("spEffectId20", &mut i).build() {
            self.sp_effect_id20 = i as _;
        }

        let mut i: i32 = self.sp_effect_id21 as _;
        if ui.input_int("spEffectId21", &mut i).build() {
            self.sp_effect_id21 = i as _;
        }

        let mut i: i32 = self.sp_effect_id22 as _;
        if ui.input_int("spEffectId22", &mut i).build() {
            self.sp_effect_id22 = i as _;
        }

        let mut i: i32 = self.sp_effect_id23 as _;
        if ui.input_int("spEffectId23", &mut i).build() {
            self.sp_effect_id23 = i as _;
        }

        let mut i: i32 = self.sp_effect_id24 as _;
        if ui.input_int("spEffectId24", &mut i).build() {
            self.sp_effect_id24 = i as _;
        }

        let mut i: i32 = self.sp_effect_id25 as _;
        if ui.input_int("spEffectId25", &mut i).build() {
            self.sp_effect_id25 = i as _;
        }

        let mut i: i32 = self.sp_effect_id26 as _;
        if ui.input_int("spEffectId26", &mut i).build() {
            self.sp_effect_id26 = i as _;
        }

        let mut i: i32 = self.sp_effect_id27 as _;
        if ui.input_int("spEffectId27", &mut i).build() {
            self.sp_effect_id27 = i as _;
        }

        let mut i: i32 = self.sp_effect_id28 as _;
        if ui.input_int("spEffectId28", &mut i).build() {
            self.sp_effect_id28 = i as _;
        }

        let mut i: i32 = self.sp_effect_id29 as _;
        if ui.input_int("spEffectId29", &mut i).build() {
            self.sp_effect_id29 = i as _;
        }

        let mut i: i32 = self.sp_effect_id30 as _;
        if ui.input_int("spEffectId30", &mut i).build() {
            self.sp_effect_id30 = i as _;
        }

        let mut i: i32 = self.sp_effect_id31 as _;
        if ui.input_int("spEffectId31", &mut i).build() {
            self.sp_effect_id31 = i as _;
        }

        let mut i: f32 = self.lock_correction;
        if ui.input_float("lockCorrection", &mut i).build() {
            self.lock_correction = i;
        }

        let mut i: i32 = self.sub_cloth_update_offset as _;
        if ui.input_int("subClothUpdateOffset", &mut i).build() {
            self.sub_cloth_update_offset = i as _;
        }

        let mut i: i32 = self.estus_flask_param_id as _;
        if ui.input_int("EstusFlaskParamId", &mut i).build() {
            self.estus_flask_param_id = i as _;
        }

        let mut i: i32 = self.text_id as _;
        if ui.input_int("TextId", &mut i).build() {
            self.text_id = i as _;
        }

        let mut i: i32 = self.h_p as _;
        if ui.input_int("HP", &mut i).build() {
            self.h_p = i as _;
        }

        let mut i: i32 = self.h_p_restore_id0 as _;
        if ui.input_int("HP_RestoreId0", &mut i).build() {
            self.h_p_restore_id0 = i as _;
        }

        let mut i: i32 = self.m_p_restore_id0 as _;
        if ui.input_int("MP_RestoreId0", &mut i).build() {
            self.m_p_restore_id0 = i as _;
        }

        let mut i: i32 = self.h_p_0 as _;
        if ui.input_int("HP_0", &mut i).build() {
            self.h_p_0 = i as _;
        }

        let mut i: i32 = self.h_p_restore_id1 as _;
        if ui.input_int("HP_RestoreId1", &mut i).build() {
            self.h_p_restore_id1 = i as _;
        }

        let mut i: i32 = self.m_p_restore_id1 as _;
        if ui.input_int("MP_RestoreId1", &mut i).build() {
            self.m_p_restore_id1 = i as _;
        }

        let mut i: i32 = self.sub_phantom_param_id as _;
        if ui.input_int("subPhantomParamId", &mut i).build() {
            self.sub_phantom_param_id = i as _;
        }

        let mut i: i32 = self.activate_distance as _;
        if ui.input_int("activateDistance", &mut i).build() {
            self.activate_distance = i as _;
        }

        let mut i: i32 = self.deactivate_distance as _;
        if ui.input_int("DeactivateDistance", &mut i).build() {
            self.deactivate_distance = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct NpcThinkParam {
    pub logic_id: i32,
    pub battle_goal_id: i32,
    pub near_dist: f32,
    pub mid_dist: f32,
    pub far_dist: f32,
    pub out_dist: f32,
    pub back_home_life_on_hit_ene_wal: f32,
    pub goal_id_to_caution: f32,
    pub id_attack_cannot_move: i32,
    pub goal_id_to_find: f32,
    pub call_help_action_anim_id: i32,
    pub call_help_call_action_id: i32,
    pub eye_dist: i16,
    pub ear_dist: i16,
    pub ear_soundcut_dist: i16,
    pub nose_dist: i16,
    pub max_backhome_dist: i16,
    pub backhome_dist: i16,
    pub backhome_battle_dist: i16,
    pub non_battle_act_life: i16,
    pub back_home_look_target_time: i16,
    pub back_home_look_target_dist: i16,
    pub sight_target_forget_time: i16,
    pub sound_target_forget_time: i16,
    pub battle_start_dist: i16,
    pub call_help_my_peer_id: i16,
    pub call_help_call_peer_id: i16,
    pub target_sys_dmg_effect_rate: i16,
    pub team_attack_effectivity: u8,
    pub eye_ang_x: u8,
    pub eye_ang_y: u8,
    pub state0: u8,
    pub state1: u8,
    pub call_help_call_valid_min_dist_target: u8,
    pub call_help_call_valid_range: u8,
    pub call_help_forget_time_by_arrival: u8,
    pub call_help_min_wait_time: u8,
    pub call_help_max_wait_time: u8,
    pub goal_action_to_caution: u8,
    pub goal_action_to_find: u8,
    pub call_help_reply_behavior_type: u8,
    pub disable_path_move: u8,
    pub skip_arrival_visible_check: u8,
    pub think_attr_do_admirer: u8,
    pub bitfield0: u8,
    pub enable_navi_flag_reserve: [u8; 3],
    pub eye_dist_for_dark: i16,
    pub battle_start_dist_for_dark: i16,
    pub eye_dist_for_pitch_dark: i16,
    pub battle_start_dist_for_pitch_dark: i16,
    pub platoon_reply_time: f32,
    pub platoon_reply_add_random_time: f32,
    pub eye_back_offset_dist: i16,
    pub eye_begin_dist: i16,
    pub target_arrive_dist: f32,
    pub point_arrive_dist: f32,
    pub change_state_action_to_find: u8,
    pub change_state_action_to_caution: u8,
    pub change_state_action_to_battle: u8,
    pub goal_action_to_disappear: u8,
    pub disable_local_steering: u8,
    pub act_type_on_failed_path: u8,
    pub interest_category: u8,
    pub goal_action_to_interest: u8,
    pub unk1: i16,
    pub ear_ang_x: i16,
    pub ear_ang_y: i16,
    pub change_state_action_to_interest: u8,
    pub change_state_action_to_normal: u8,
    pub unk2: f32,
    pub unk3: f32,
    pub unk4: i16,
    pub unk5: u8,
    pub unk6: u8,
    pub unk7: f32,
    pub pad: [u8; 12],
}

impl NpcThinkParam {
    #[allow(unused)]
    pub fn set_enable_navi_flg_edge(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_edge(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_large_space(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_large_space(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_ladder(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_ladder(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_hole(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_hole(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_door(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_door(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_in_side_wall(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_in_side_wall(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_edge_ordinary(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_edge_ordinary(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_navi_flg_reserve0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_navi_flg_reserve0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for NpcThinkParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.logic_id as _;
        if ui.input_int("logicId", &mut i).build() {
            self.logic_id = i as _;
        }

        let mut i: i32 = self.battle_goal_id as _;
        if ui.input_int("battleGoalId", &mut i).build() {
            self.battle_goal_id = i as _;
        }

        let mut i: f32 = self.near_dist;
        if ui.input_float("nearDist", &mut i).build() {
            self.near_dist = i;
        }

        let mut i: f32 = self.mid_dist;
        if ui.input_float("midDist", &mut i).build() {
            self.mid_dist = i;
        }

        let mut i: f32 = self.far_dist;
        if ui.input_float("farDist", &mut i).build() {
            self.far_dist = i;
        }

        let mut i: f32 = self.out_dist;
        if ui.input_float("OutDist", &mut i).build() {
            self.out_dist = i;
        }

        let mut i: f32 = self.back_home_life_on_hit_ene_wal;
        if ui.input_float("BackHomeLife_OnHitEneWal", &mut i).build() {
            self.back_home_life_on_hit_ene_wal = i;
        }

        let mut i: f32 = self.goal_id_to_caution;
        if ui.input_float("goalID_ToCaution", &mut i).build() {
            self.goal_id_to_caution = i;
        }

        let mut i: i32 = self.id_attack_cannot_move as _;
        if ui.input_int("idAttackCannotMove", &mut i).build() {
            self.id_attack_cannot_move = i as _;
        }

        let mut i: f32 = self.goal_id_to_find;
        if ui.input_float("goalID_toFind", &mut i).build() {
            self.goal_id_to_find = i;
        }

        let mut i: i32 = self.call_help_action_anim_id as _;
        if ui.input_int("callHelp_ActionAnimId", &mut i).build() {
            self.call_help_action_anim_id = i as _;
        }

        let mut i: i32 = self.call_help_call_action_id as _;
        if ui.input_int("callHelp_CallActionId", &mut i).build() {
            self.call_help_call_action_id = i as _;
        }

        let mut i: i32 = self.eye_dist as _;
        if ui.input_int("eye_dist", &mut i).build() {
            self.eye_dist = i as _;
        }

        let mut i: i32 = self.ear_dist as _;
        if ui.input_int("ear_dist", &mut i).build() {
            self.ear_dist = i as _;
        }

        let mut i: i32 = self.ear_soundcut_dist as _;
        if ui.input_int("ear_soundcutDist", &mut i).build() {
            self.ear_soundcut_dist = i as _;
        }

        let mut i: i32 = self.nose_dist as _;
        if ui.input_int("nose_dist", &mut i).build() {
            self.nose_dist = i as _;
        }

        let mut i: i32 = self.max_backhome_dist as _;
        if ui.input_int("maxBackhomeDist", &mut i).build() {
            self.max_backhome_dist = i as _;
        }

        let mut i: i32 = self.backhome_dist as _;
        if ui.input_int("backhomeDist", &mut i).build() {
            self.backhome_dist = i as _;
        }

        let mut i: i32 = self.backhome_battle_dist as _;
        if ui.input_int("backhomeBattleDist", &mut i).build() {
            self.backhome_battle_dist = i as _;
        }

        let mut i: i32 = self.non_battle_act_life as _;
        if ui.input_int("nonBattleActLife", &mut i).build() {
            self.non_battle_act_life = i as _;
        }

        let mut i: i32 = self.back_home_look_target_time as _;
        if ui.input_int("BackHome_LookTargetTime", &mut i).build() {
            self.back_home_look_target_time = i as _;
        }

        let mut i: i32 = self.back_home_look_target_dist as _;
        if ui.input_int("BackHome_LookTargetDist", &mut i).build() {
            self.back_home_look_target_dist = i as _;
        }

        let mut i: i32 = self.sight_target_forget_time as _;
        if ui.input_int("SightTargetForgetTime", &mut i).build() {
            self.sight_target_forget_time = i as _;
        }

        let mut i: i32 = self.sound_target_forget_time as _;
        if ui.input_int("SoundTargetForgetTime", &mut i).build() {
            self.sound_target_forget_time = i as _;
        }

        let mut i: i32 = self.battle_start_dist as _;
        if ui.input_int("BattleStartDist", &mut i).build() {
            self.battle_start_dist = i as _;
        }

        let mut i: i32 = self.call_help_my_peer_id as _;
        if ui.input_int("callHelp_MyPeerId", &mut i).build() {
            self.call_help_my_peer_id = i as _;
        }

        let mut i: i32 = self.call_help_call_peer_id as _;
        if ui.input_int("callHelp_CallPeerId", &mut i).build() {
            self.call_help_call_peer_id = i as _;
        }

        let mut i: i32 = self.target_sys_dmg_effect_rate as _;
        if ui.input_int("targetSys_DmgEffectRate", &mut i).build() {
            self.target_sys_dmg_effect_rate = i as _;
        }

        let mut i: i32 = self.team_attack_effectivity as _;
        if ui.input_int("teamAttackEffectivity", &mut i).build() {
            self.team_attack_effectivity = i as _;
        }

        let mut i: i32 = self.eye_ang_x as _;
        if ui.input_int("eye_angX", &mut i).build() {
            self.eye_ang_x = i as _;
        }

        let mut i: i32 = self.eye_ang_y as _;
        if ui.input_int("eye_angY", &mut i).build() {
            self.eye_ang_y = i as _;
        }

        let mut i: i32 = self.state0 as _;
        if ui.input_int("State0", &mut i).build() {
            self.state0 = i as _;
        }

        let mut i: i32 = self.state1 as _;
        if ui.input_int("State1", &mut i).build() {
            self.state1 = i as _;
        }

        let mut i: i32 = self.call_help_call_valid_min_dist_target as _;
        if ui
            .input_int("callHelp_CallValidMinDistTarget", &mut i)
            .build()
        {
            self.call_help_call_valid_min_dist_target = i as _;
        }

        let mut i: i32 = self.call_help_call_valid_range as _;
        if ui.input_int("callHelp_CallValidRange", &mut i).build() {
            self.call_help_call_valid_range = i as _;
        }

        let mut i: i32 = self.call_help_forget_time_by_arrival as _;
        if ui.input_int("callHelp_ForgetTimeByArrival", &mut i).build() {
            self.call_help_forget_time_by_arrival = i as _;
        }

        let mut i: i32 = self.call_help_min_wait_time as _;
        if ui.input_int("callHelp_MinWaitTime", &mut i).build() {
            self.call_help_min_wait_time = i as _;
        }

        let mut i: i32 = self.call_help_max_wait_time as _;
        if ui.input_int("callHelp_MaxWaitTime", &mut i).build() {
            self.call_help_max_wait_time = i as _;
        }

        let mut i: i32 = self.goal_action_to_caution as _;
        if ui.input_int("goalAction_ToCaution", &mut i).build() {
            self.goal_action_to_caution = i as _;
        }

        let mut i: i32 = self.goal_action_to_find as _;
        if ui.input_int("goalAction_ToFind", &mut i).build() {
            self.goal_action_to_find = i as _;
        }

        let mut i: i32 = self.call_help_reply_behavior_type as _;
        if ui.input_int("callHelp_ReplyBehaviorType", &mut i).build() {
            self.call_help_reply_behavior_type = i as _;
        }

        let mut i: i32 = self.disable_path_move as _;
        if ui.input_int("disablePathMove", &mut i).build() {
            self.disable_path_move = i as _;
        }

        let mut i: i32 = self.skip_arrival_visible_check as _;
        if ui.input_int("skipArrivalVisibleCheck", &mut i).build() {
            self.skip_arrival_visible_check = i as _;
        }

        let mut i: i32 = self.think_attr_do_admirer as _;
        if ui.input_int("thinkAttrDoAdmirer", &mut i).build() {
            self.think_attr_do_admirer = i as _;
        }

        let mut b: bool = self.enable_navi_flg_edge();
        if ui.checkbox("enableNaviFlg_Edge", &mut b) {
            self.set_enable_navi_flg_edge(b);
        }

        let mut b: bool = self.enable_navi_flg_large_space();
        if ui.checkbox("enableNaviFlg_LargeSpace", &mut b) {
            self.set_enable_navi_flg_large_space(b);
        }

        let mut b: bool = self.enable_navi_flg_ladder();
        if ui.checkbox("enableNaviFlg_Ladder", &mut b) {
            self.set_enable_navi_flg_ladder(b);
        }

        let mut b: bool = self.enable_navi_flg_hole();
        if ui.checkbox("enableNaviFlg_Hole", &mut b) {
            self.set_enable_navi_flg_hole(b);
        }

        let mut b: bool = self.enable_navi_flg_door();
        if ui.checkbox("enableNaviFlg_Door", &mut b) {
            self.set_enable_navi_flg_door(b);
        }

        let mut b: bool = self.enable_navi_flg_in_side_wall();
        if ui.checkbox("enableNaviFlg_InSideWall", &mut b) {
            self.set_enable_navi_flg_in_side_wall(b);
        }

        let mut b: bool = self.enable_navi_flg_edge_ordinary();
        if ui.checkbox("enableNaviFlg_EdgeOrdinary", &mut b) {
            self.set_enable_navi_flg_edge_ordinary(b);
        }

        let mut b: bool = self.enable_navi_flg_reserve0();
        if ui.checkbox("enableNaviFlg_reserve0", &mut b) {
            self.set_enable_navi_flg_reserve0(b);
        }

        let mut i: i32 = self.eye_dist_for_dark as _;
        if ui.input_int("eyeDist_ForDark", &mut i).build() {
            self.eye_dist_for_dark = i as _;
        }

        let mut i: i32 = self.battle_start_dist_for_dark as _;
        if ui.input_int("battleStartDist_forDark", &mut i).build() {
            self.battle_start_dist_for_dark = i as _;
        }

        let mut i: i32 = self.eye_dist_for_pitch_dark as _;
        if ui.input_int("eyeDist_ForPitchDark", &mut i).build() {
            self.eye_dist_for_pitch_dark = i as _;
        }

        let mut i: i32 = self.battle_start_dist_for_pitch_dark as _;
        if ui.input_int("battleStartDist_forPitchDark", &mut i).build() {
            self.battle_start_dist_for_pitch_dark = i as _;
        }

        let mut i: f32 = self.platoon_reply_time;
        if ui.input_float("platoonReplyTime", &mut i).build() {
            self.platoon_reply_time = i;
        }

        let mut i: f32 = self.platoon_reply_add_random_time;
        if ui.input_float("platoonReplyAddRandomTime", &mut i).build() {
            self.platoon_reply_add_random_time = i;
        }

        let mut i: i32 = self.eye_back_offset_dist as _;
        if ui.input_int("eye_BackOffsetDist", &mut i).build() {
            self.eye_back_offset_dist = i as _;
        }

        let mut i: i32 = self.eye_begin_dist as _;
        if ui.input_int("eye_BeginDist", &mut i).build() {
            self.eye_begin_dist = i as _;
        }

        let mut i: f32 = self.target_arrive_dist;
        if ui.input_float("targetArriveDist", &mut i).build() {
            self.target_arrive_dist = i;
        }

        let mut i: f32 = self.point_arrive_dist;
        if ui.input_float("pointArriveDist", &mut i).build() {
            self.point_arrive_dist = i;
        }

        let mut i: i32 = self.change_state_action_to_find as _;
        if ui.input_int("changeStateAction_ToFind", &mut i).build() {
            self.change_state_action_to_find = i as _;
        }

        let mut i: i32 = self.change_state_action_to_caution as _;
        if ui.input_int("changeStateAction_ToCaution", &mut i).build() {
            self.change_state_action_to_caution = i as _;
        }

        let mut i: i32 = self.change_state_action_to_battle as _;
        if ui.input_int("changeStateAction_ToBattle", &mut i).build() {
            self.change_state_action_to_battle = i as _;
        }

        let mut i: i32 = self.goal_action_to_disappear as _;
        if ui.input_int("goalAction_ToDisappear", &mut i).build() {
            self.goal_action_to_disappear = i as _;
        }

        let mut i: i32 = self.disable_local_steering as _;
        if ui.input_int("disableLocalSteering", &mut i).build() {
            self.disable_local_steering = i as _;
        }

        let mut i: i32 = self.act_type_on_failed_path as _;
        if ui.input_int("actTypeOnFailedPath", &mut i).build() {
            self.act_type_on_failed_path = i as _;
        }

        let mut i: i32 = self.interest_category as _;
        if ui.input_int("interestCategory", &mut i).build() {
            self.interest_category = i as _;
        }

        let mut i: i32 = self.goal_action_to_interest as _;
        if ui.input_int("goalAction_ToInterest", &mut i).build() {
            self.goal_action_to_interest = i as _;
        }

        let mut i: i32 = self.unk1 as _;
        if ui.input_int("Unk1", &mut i).build() {
            self.unk1 = i as _;
        }

        let mut i: i32 = self.ear_ang_x as _;
        if ui.input_int("ear_angX", &mut i).build() {
            self.ear_ang_x = i as _;
        }

        let mut i: i32 = self.ear_ang_y as _;
        if ui.input_int("ear_angY", &mut i).build() {
            self.ear_ang_y = i as _;
        }

        let mut i: i32 = self.change_state_action_to_interest as _;
        if ui.input_int("changeStateAction_ToInterest", &mut i).build() {
            self.change_state_action_to_interest = i as _;
        }

        let mut i: i32 = self.change_state_action_to_normal as _;
        if ui.input_int("changeStateAction_ToNormal", &mut i).build() {
            self.change_state_action_to_normal = i as _;
        }

        let mut i: f32 = self.unk2;
        if ui.input_float("Unk2", &mut i).build() {
            self.unk2 = i;
        }

        let mut i: f32 = self.unk3;
        if ui.input_float("Unk3", &mut i).build() {
            self.unk3 = i;
        }

        let mut i: i32 = self.unk4 as _;
        if ui.input_int("Unk4", &mut i).build() {
            self.unk4 = i as _;
        }

        let mut i: i32 = self.unk5 as _;
        if ui.input_int("Unk5", &mut i).build() {
            self.unk5 = i as _;
        }

        let mut i: i32 = self.unk6 as _;
        if ui.input_int("Unk6", &mut i).build() {
            self.unk6 = i as _;
        }

        let mut i: f32 = self.unk7;
        if ui.input_float("Unk7", &mut i).build() {
            self.unk7 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ObjActParam {
    pub action_enable_msg_id: i32,
    pub action_failed_msg_id: i32,
    pub sp_qualified_pass_event_flag: i32,
    pub player_anim_id: i32,
    pub chr_anim_id: i32,
    pub valid_dist: i16,
    pub sp_qualified_id: i16,
    pub sp_qualified_id2: i16,
    pub obj_dummy_id: u8,
    pub pad1: [u8; 1],
    pub obj_anim_id: i32,
    pub valid_player_angle: u8,
    pub sp_qualified_type: u8,
    pub sp_qualified_type2: u8,
    pub valid_obj_angle: u8,
    pub chr_sorb_type: u8,
    pub event_kick_timing: u8,
    pub pad2: [u8; 2],
    pub action_button_param_id: i32,
    pub action_success_msg_id: i32,
}

impl RenderableParam for ObjActParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.action_enable_msg_id as _;
        if ui.input_int("actionEnableMsgId", &mut i).build() {
            self.action_enable_msg_id = i as _;
        }

        let mut i: i32 = self.action_failed_msg_id as _;
        if ui.input_int("actionFailedMsgId", &mut i).build() {
            self.action_failed_msg_id = i as _;
        }

        let mut i: i32 = self.sp_qualified_pass_event_flag as _;
        if ui.input_int("spQualifiedPassEventFlag", &mut i).build() {
            self.sp_qualified_pass_event_flag = i as _;
        }

        let mut i: i32 = self.player_anim_id as _;
        if ui.input_int("playerAnimId", &mut i).build() {
            self.player_anim_id = i as _;
        }

        let mut i: i32 = self.chr_anim_id as _;
        if ui.input_int("chrAnimId", &mut i).build() {
            self.chr_anim_id = i as _;
        }

        let mut i: i32 = self.valid_dist as _;
        if ui.input_int("validDist", &mut i).build() {
            self.valid_dist = i as _;
        }

        let mut i: i32 = self.sp_qualified_id as _;
        if ui.input_int("spQualifiedId", &mut i).build() {
            self.sp_qualified_id = i as _;
        }

        let mut i: i32 = self.sp_qualified_id2 as _;
        if ui.input_int("spQualifiedId2", &mut i).build() {
            self.sp_qualified_id2 = i as _;
        }

        let mut i: i32 = self.obj_dummy_id as _;
        if ui.input_int("ObjDummyId", &mut i).build() {
            self.obj_dummy_id = i as _;
        }

        let mut i: i32 = self.obj_anim_id as _;
        if ui.input_int("ObjAnimId", &mut i).build() {
            self.obj_anim_id = i as _;
        }

        let mut i: i32 = self.valid_player_angle as _;
        if ui.input_int("ValidPlayerAngle", &mut i).build() {
            self.valid_player_angle = i as _;
        }

        let mut i: i32 = self.sp_qualified_type as _;
        if ui.input_int("spQualifiedType", &mut i).build() {
            self.sp_qualified_type = i as _;
        }

        let mut i: i32 = self.sp_qualified_type2 as _;
        if ui.input_int("spQualifiedType2", &mut i).build() {
            self.sp_qualified_type2 = i as _;
        }

        let mut i: i32 = self.valid_obj_angle as _;
        if ui.input_int("ValidObjAngle", &mut i).build() {
            self.valid_obj_angle = i as _;
        }

        let mut i: i32 = self.chr_sorb_type as _;
        if ui.input_int("ChrSorbType", &mut i).build() {
            self.chr_sorb_type = i as _;
        }

        let mut i: i32 = self.event_kick_timing as _;
        if ui.input_int("eventKickTiming", &mut i).build() {
            self.event_kick_timing = i as _;
        }

        let mut i: i32 = self.action_button_param_id as _;
        if ui.input_int("actionButtonParamId", &mut i).build() {
            self.action_button_param_id = i as _;
        }

        let mut i: i32 = self.action_success_msg_id as _;
        if ui.input_int("actionSuccessMsgId", &mut i).build() {
            self.action_success_msg_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ObjectMaterialSfxParam {
    pub mtrl_vfx_id0: i32,
    pub mtrl_vfx_id1: i32,
    pub mtrl_vfx_id2: i32,
    pub mtrl_vfx_id3: i32,
    pub mtrl_vfx_id4: i32,
    pub mtrl_vfx_id5: i32,
    pub mtrl_vfx_id6: i32,
    pub mtrl_vfx_id7: i32,
    pub mtrl_vfx_id8: i32,
    pub mtrl_vfx_id9: i32,
    pub mtrl_vfx_id10: i32,
    pub mtrl_vfx_id11: i32,
    pub mtrl_vfx_id12: i32,
    pub mtrl_vfx_id13: i32,
    pub mtrl_vfx_id14: i32,
    pub mtrl_vfx_id15: i32,
    pub mtrl_vfx_id16: i32,
    pub mtrl_vfx_id17: i32,
    pub mtrl_vfx_id18: i32,
    pub mtrl_vfx_id19: i32,
    pub mtrl_vfx_id20: i32,
    pub mtrl_vfx_id21: i32,
    pub mtrl_vfx_id22: i32,
    pub mtrl_vfx_id23: i32,
    pub mtrl_vfx_id24: i32,
    pub mtrl_vfx_id25: i32,
    pub mtrl_vfx_id26: i32,
    pub mtrl_vfx_id27: i32,
    pub mtrl_vfx_id28: i32,
    pub mtrl_vfx_id29: i32,
    pub mtrl_vfx_id30: i32,
    pub mtrl_vfx_id31: i32,
}

impl RenderableParam for ObjectMaterialSfxParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.mtrl_vfx_id0 as _;
        if ui.input_int("MtrlVfxId0", &mut i).build() {
            self.mtrl_vfx_id0 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id1 as _;
        if ui.input_int("MtrlVfxId1", &mut i).build() {
            self.mtrl_vfx_id1 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id2 as _;
        if ui.input_int("MtrlVfxId2", &mut i).build() {
            self.mtrl_vfx_id2 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id3 as _;
        if ui.input_int("MtrlVfxId3", &mut i).build() {
            self.mtrl_vfx_id3 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id4 as _;
        if ui.input_int("MtrlVfxId4", &mut i).build() {
            self.mtrl_vfx_id4 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id5 as _;
        if ui.input_int("MtrlVfxId5", &mut i).build() {
            self.mtrl_vfx_id5 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id6 as _;
        if ui.input_int("MtrlVfxId6", &mut i).build() {
            self.mtrl_vfx_id6 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id7 as _;
        if ui.input_int("MtrlVfxId7", &mut i).build() {
            self.mtrl_vfx_id7 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id8 as _;
        if ui.input_int("MtrlVfxId8", &mut i).build() {
            self.mtrl_vfx_id8 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id9 as _;
        if ui.input_int("MtrlVfxId9", &mut i).build() {
            self.mtrl_vfx_id9 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id10 as _;
        if ui.input_int("MtrlVfxId10", &mut i).build() {
            self.mtrl_vfx_id10 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id11 as _;
        if ui.input_int("MtrlVfxId11", &mut i).build() {
            self.mtrl_vfx_id11 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id12 as _;
        if ui.input_int("MtrlVfxId12", &mut i).build() {
            self.mtrl_vfx_id12 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id13 as _;
        if ui.input_int("MtrlVfxId13", &mut i).build() {
            self.mtrl_vfx_id13 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id14 as _;
        if ui.input_int("MtrlVfxId14", &mut i).build() {
            self.mtrl_vfx_id14 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id15 as _;
        if ui.input_int("MtrlVfxId15", &mut i).build() {
            self.mtrl_vfx_id15 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id16 as _;
        if ui.input_int("MtrlVfxId16", &mut i).build() {
            self.mtrl_vfx_id16 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id17 as _;
        if ui.input_int("MtrlVfxId17", &mut i).build() {
            self.mtrl_vfx_id17 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id18 as _;
        if ui.input_int("MtrlVfxId18", &mut i).build() {
            self.mtrl_vfx_id18 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id19 as _;
        if ui.input_int("MtrlVfxId19", &mut i).build() {
            self.mtrl_vfx_id19 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id20 as _;
        if ui.input_int("MtrlVfxId20", &mut i).build() {
            self.mtrl_vfx_id20 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id21 as _;
        if ui.input_int("MtrlVfxId21", &mut i).build() {
            self.mtrl_vfx_id21 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id22 as _;
        if ui.input_int("MtrlVfxId22", &mut i).build() {
            self.mtrl_vfx_id22 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id23 as _;
        if ui.input_int("MtrlVfxId23", &mut i).build() {
            self.mtrl_vfx_id23 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id24 as _;
        if ui.input_int("MtrlVfxId24", &mut i).build() {
            self.mtrl_vfx_id24 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id25 as _;
        if ui.input_int("MtrlVfxId25", &mut i).build() {
            self.mtrl_vfx_id25 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id26 as _;
        if ui.input_int("MtrlVfxId26", &mut i).build() {
            self.mtrl_vfx_id26 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id27 as _;
        if ui.input_int("MtrlVfxId27", &mut i).build() {
            self.mtrl_vfx_id27 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id28 as _;
        if ui.input_int("MtrlVfxId28", &mut i).build() {
            self.mtrl_vfx_id28 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id29 as _;
        if ui.input_int("MtrlVfxId29", &mut i).build() {
            self.mtrl_vfx_id29 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id30 as _;
        if ui.input_int("MtrlVfxId30", &mut i).build() {
            self.mtrl_vfx_id30 = i as _;
        }

        let mut i: i32 = self.mtrl_vfx_id31 as _;
        if ui.input_int("MtrlVfxId31", &mut i).build() {
            self.mtrl_vfx_id31 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ObjectParam {
    pub h_p: i16,
    pub defense: u16,
    pub ext_ref_tex_id: i16,
    pub material_id: i16,
    pub anim_break_id_max: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub default_lod_param_id: i8,
    pub break_sfx_id: i32,
    pub beh_param_id0: i32,
    pub beh_param_id1: i32,
    pub beh_param_id2: i32,
    pub unk2: u8,
    pub havok_system_wind: u8,
    pub havok_system_break_obj: u8,
    pub unk5: u8,
    pub wind_effect_rate: f32,
    pub unk7: f32,
    pub break_obj_rate: f32,
    pub burn_life_time: f32,
    pub break_update: f32,
    pub burn_vfx_id0: i32,
    pub burn_vfx_id1: i32,
    pub burn_vfx_id2: i32,
    pub burn_vfx_id3: i32,
    pub burn_behavior_id0: i32,
    pub burn_behavior_id1: i32,
    pub burn_behavior_id2: i32,
    pub burn_behavior_id3: i32,
    pub burn_interval: u16,
    pub unk20: u8,
    pub unk22: u8,
    pub burn_behavior_time: f32,
    pub burn_time_begin0: f32,
    pub burn_time_begin1: f32,
    pub burn_time_begin2: f32,
    pub burn_time_begin3: f32,
    pub burn_time_end0: f32,
    pub burn_time_end1: f32,
    pub burn_time_end2: f32,
    pub burn_time_end3: f32,
    pub ai_sound_param_id: i32,
    pub unk32: f32,
    pub unk33: f32,
    pub unk34: f32,
    pub unk35: f32,
    pub unk36: f32,
    pub unk37: f32,
    pub unk38: f32,
    pub unk39: f32,
    pub unk40: f32,
    pub unk41: i32,
    pub unk42: i16,
    pub spawn_param: i16,
    pub auto_destroy_timer: f32,
    pub unk44: f32,
    pub sound_id: i32,
    pub object_material_sfx_index: i32,
    pub pad1: [u8; 68],
}

impl ObjectParam {
    #[allow(unused)]
    pub fn set_is_cam_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_cam_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_break_by_player_collide(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_break_by_player_collide(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_anim_break(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_anim_break(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_penetration_bullet_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_penetration_bullet_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_chr_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_chr_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_attack_backlash(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_attack_backlash(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_disable_break_for_first_appear(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_disable_break_for_first_appear(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_ladder(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_ladder(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_anim_pause_on_remo_play(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_anim_pause_on_remo_play(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_damage_no_hit(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_damage_no_hit(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_move_obj(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_move_obj(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk_bool1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk_bool1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk_bool2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk_bool2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk_bool3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk_bool3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_map_related(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn map_related(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_break_by_collide2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_break_by_collide2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for ObjectParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.h_p as _;
        if ui.input_int("HP", &mut i).build() {
            self.h_p = i as _;
        }

        let mut i: i32 = self.defense as _;
        if ui.input_int("Defense", &mut i).build() {
            self.defense = i as _;
        }

        let mut i: i32 = self.ext_ref_tex_id as _;
        if ui.input_int("extRefTexId", &mut i).build() {
            self.ext_ref_tex_id = i as _;
        }

        let mut i: i32 = self.material_id as _;
        if ui.input_int("materialId", &mut i).build() {
            self.material_id = i as _;
        }

        let mut i: i32 = self.anim_break_id_max as _;
        if ui.input_int("animBreakIdMax", &mut i).build() {
            self.anim_break_id_max = i as _;
        }

        let mut b: bool = self.is_cam_hit();
        if ui.checkbox("isCamHit", &mut b) {
            self.set_is_cam_hit(b);
        }

        let mut b: bool = self.is_break_by_player_collide();
        if ui.checkbox("isBreakByPlayerCollide", &mut b) {
            self.set_is_break_by_player_collide(b);
        }

        let mut b: bool = self.is_anim_break();
        if ui.checkbox("isAnimBreak", &mut b) {
            self.set_is_anim_break(b);
        }

        let mut b: bool = self.is_penetration_bullet_hit();
        if ui.checkbox("isPenetrationBulletHit", &mut b) {
            self.set_is_penetration_bullet_hit(b);
        }

        let mut b: bool = self.is_chr_hit();
        if ui.checkbox("isChrHit", &mut b) {
            self.set_is_chr_hit(b);
        }

        let mut b: bool = self.is_attack_backlash();
        if ui.checkbox("isAttackBacklash", &mut b) {
            self.set_is_attack_backlash(b);
        }

        let mut b: bool = self.is_disable_break_for_first_appear();
        if ui.checkbox("isDisableBreakForFirstAppear", &mut b) {
            self.set_is_disable_break_for_first_appear(b);
        }

        let mut b: bool = self.is_ladder();
        if ui.checkbox("isLadder", &mut b) {
            self.set_is_ladder(b);
        }

        let mut b: bool = self.is_anim_pause_on_remo_play();
        if ui.checkbox("isAnimPauseOnRemoPlay", &mut b) {
            self.set_is_anim_pause_on_remo_play(b);
        }

        let mut b: bool = self.is_damage_no_hit();
        if ui.checkbox("isDamageNoHit", &mut b) {
            self.set_is_damage_no_hit(b);
        }

        let mut b: bool = self.is_move_obj();
        if ui.checkbox("isMoveObj", &mut b) {
            self.set_is_move_obj(b);
        }

        let mut b: bool = self.unk_bool1();
        if ui.checkbox("UnkBool1", &mut b) {
            self.set_unk_bool1(b);
        }

        let mut b: bool = self.unk_bool2();
        if ui.checkbox("UnkBool2", &mut b) {
            self.set_unk_bool2(b);
        }

        let mut b: bool = self.unk_bool3();
        if ui.checkbox("UnkBool3", &mut b) {
            self.set_unk_bool3(b);
        }

        let mut b: bool = self.map_related();
        if ui.checkbox("mapRelated", &mut b) {
            self.set_map_related(b);
        }

        let mut b: bool = self.is_break_by_collide2();
        if ui.checkbox("IsBreakByCollide2", &mut b) {
            self.set_is_break_by_collide2(b);
        }

        let mut i: i32 = self.default_lod_param_id as _;
        if ui.input_int("defaultLodParamId", &mut i).build() {
            self.default_lod_param_id = i as _;
        }

        let mut i: i32 = self.break_sfx_id as _;
        if ui.input_int("breakSfxId", &mut i).build() {
            self.break_sfx_id = i as _;
        }

        let mut i: i32 = self.beh_param_id0 as _;
        if ui.input_int("behParamId0", &mut i).build() {
            self.beh_param_id0 = i as _;
        }

        let mut i: i32 = self.beh_param_id1 as _;
        if ui.input_int("behParamId1", &mut i).build() {
            self.beh_param_id1 = i as _;
        }

        let mut i: i32 = self.beh_param_id2 as _;
        if ui.input_int("behParamId2", &mut i).build() {
            self.beh_param_id2 = i as _;
        }

        let mut i: i32 = self.unk2 as _;
        if ui.input_int("Unk2", &mut i).build() {
            self.unk2 = i as _;
        }

        let mut i: i32 = self.havok_system_wind as _;
        if ui.input_int("HavokSystem_Wind", &mut i).build() {
            self.havok_system_wind = i as _;
        }

        let mut i: i32 = self.havok_system_break_obj as _;
        if ui.input_int("HavokSystem_BreakObj", &mut i).build() {
            self.havok_system_break_obj = i as _;
        }

        let mut i: i32 = self.unk5 as _;
        if ui.input_int("Unk5", &mut i).build() {
            self.unk5 = i as _;
        }

        let mut i: f32 = self.wind_effect_rate;
        if ui.input_float("WindEffectRate", &mut i).build() {
            self.wind_effect_rate = i;
        }

        let mut i: f32 = self.unk7;
        if ui.input_float("Unk7", &mut i).build() {
            self.unk7 = i;
        }

        let mut i: f32 = self.break_obj_rate;
        if ui.input_float("breakObjRate", &mut i).build() {
            self.break_obj_rate = i;
        }

        let mut i: f32 = self.burn_life_time;
        if ui.input_float("burnLifeTime", &mut i).build() {
            self.burn_life_time = i;
        }

        let mut i: f32 = self.break_update;
        if ui.input_float("breakUpdate", &mut i).build() {
            self.break_update = i;
        }

        let mut i: i32 = self.burn_vfx_id0 as _;
        if ui.input_int("burnVfxId0", &mut i).build() {
            self.burn_vfx_id0 = i as _;
        }

        let mut i: i32 = self.burn_vfx_id1 as _;
        if ui.input_int("burnVfxId1", &mut i).build() {
            self.burn_vfx_id1 = i as _;
        }

        let mut i: i32 = self.burn_vfx_id2 as _;
        if ui.input_int("burnVfxId2", &mut i).build() {
            self.burn_vfx_id2 = i as _;
        }

        let mut i: i32 = self.burn_vfx_id3 as _;
        if ui.input_int("burnVfxId3", &mut i).build() {
            self.burn_vfx_id3 = i as _;
        }

        let mut i: i32 = self.burn_behavior_id0 as _;
        if ui.input_int("burnBehaviorId0", &mut i).build() {
            self.burn_behavior_id0 = i as _;
        }

        let mut i: i32 = self.burn_behavior_id1 as _;
        if ui.input_int("burnBehaviorId1", &mut i).build() {
            self.burn_behavior_id1 = i as _;
        }

        let mut i: i32 = self.burn_behavior_id2 as _;
        if ui.input_int("burnBehaviorId2", &mut i).build() {
            self.burn_behavior_id2 = i as _;
        }

        let mut i: i32 = self.burn_behavior_id3 as _;
        if ui.input_int("burnBehaviorId3", &mut i).build() {
            self.burn_behavior_id3 = i as _;
        }

        let mut i: i32 = self.burn_interval as _;
        if ui.input_int("burnInterval", &mut i).build() {
            self.burn_interval = i as _;
        }

        let mut i: i32 = self.unk20 as _;
        if ui.input_int("Unk20", &mut i).build() {
            self.unk20 = i as _;
        }

        let mut i: i32 = self.unk22 as _;
        if ui.input_int("Unk22", &mut i).build() {
            self.unk22 = i as _;
        }

        let mut i: f32 = self.burn_behavior_time;
        if ui.input_float("BurnBehaviorTime", &mut i).build() {
            self.burn_behavior_time = i;
        }

        let mut i: f32 = self.burn_time_begin0;
        if ui.input_float("BurnTimeBegin0", &mut i).build() {
            self.burn_time_begin0 = i;
        }

        let mut i: f32 = self.burn_time_begin1;
        if ui.input_float("BurnTimeBegin1", &mut i).build() {
            self.burn_time_begin1 = i;
        }

        let mut i: f32 = self.burn_time_begin2;
        if ui.input_float("BurnTimeBegin2", &mut i).build() {
            self.burn_time_begin2 = i;
        }

        let mut i: f32 = self.burn_time_begin3;
        if ui.input_float("BurnTimeBegin3", &mut i).build() {
            self.burn_time_begin3 = i;
        }

        let mut i: f32 = self.burn_time_end0;
        if ui.input_float("BurnTimeEnd0", &mut i).build() {
            self.burn_time_end0 = i;
        }

        let mut i: f32 = self.burn_time_end1;
        if ui.input_float("BurnTimeEnd1", &mut i).build() {
            self.burn_time_end1 = i;
        }

        let mut i: f32 = self.burn_time_end2;
        if ui.input_float("BurnTimeEnd2", &mut i).build() {
            self.burn_time_end2 = i;
        }

        let mut i: f32 = self.burn_time_end3;
        if ui.input_float("BurnTimeEnd3", &mut i).build() {
            self.burn_time_end3 = i;
        }

        let mut i: i32 = self.ai_sound_param_id as _;
        if ui.input_int("aiSoundParamId", &mut i).build() {
            self.ai_sound_param_id = i as _;
        }

        let mut i: f32 = self.unk32;
        if ui.input_float("Unk32", &mut i).build() {
            self.unk32 = i;
        }

        let mut i: f32 = self.unk33;
        if ui.input_float("Unk33", &mut i).build() {
            self.unk33 = i;
        }

        let mut i: f32 = self.unk34;
        if ui.input_float("Unk34", &mut i).build() {
            self.unk34 = i;
        }

        let mut i: f32 = self.unk35;
        if ui.input_float("Unk35", &mut i).build() {
            self.unk35 = i;
        }

        let mut i: f32 = self.unk36;
        if ui.input_float("Unk36", &mut i).build() {
            self.unk36 = i;
        }

        let mut i: f32 = self.unk37;
        if ui.input_float("Unk37", &mut i).build() {
            self.unk37 = i;
        }

        let mut i: f32 = self.unk38;
        if ui.input_float("Unk38", &mut i).build() {
            self.unk38 = i;
        }

        let mut i: f32 = self.unk39;
        if ui.input_float("Unk39", &mut i).build() {
            self.unk39 = i;
        }

        let mut i: f32 = self.unk40;
        if ui.input_float("Unk40", &mut i).build() {
            self.unk40 = i;
        }

        let mut i: i32 = self.unk41 as _;
        if ui.input_int("Unk41", &mut i).build() {
            self.unk41 = i as _;
        }

        let mut i: i32 = self.unk42 as _;
        if ui.input_int("Unk42", &mut i).build() {
            self.unk42 = i as _;
        }

        let mut i: i32 = self.spawn_param as _;
        if ui.input_int("SpawnParam", &mut i).build() {
            self.spawn_param = i as _;
        }

        let mut i: f32 = self.auto_destroy_timer;
        if ui.input_float("autoDestroyTimer", &mut i).build() {
            self.auto_destroy_timer = i;
        }

        let mut i: f32 = self.unk44;
        if ui.input_float("Unk44", &mut i).build() {
            self.unk44 = i;
        }

        let mut i: i32 = self.sound_id as _;
        if ui.input_int("SoundId", &mut i).build() {
            self.sound_id = i as _;
        }

        let mut i: i32 = self.object_material_sfx_index as _;
        if ui.input_int("ObjectMaterialSfxIndex", &mut i).build() {
            self.object_material_sfx_index = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct PhantomParam {
    pub alpha1: f32,
    pub alpha2: f32,
    pub alpha3: f32,
    pub alpha4: f32,
    pub alpha5: f32,
    pub r1: u8,
    pub g1: u8,
    pub b1: u8,
    pub r2: u8,
    pub g2: u8,
    pub b2: u8,
    pub r3: u8,
    pub g3: u8,
    pub b3: u8,
    pub r4: u8,
    pub g4: u8,
    pub b4: u8,
    pub r5: u8,
    pub g5: u8,
    pub b5: u8,
    pub unk1: u8,
    pub ghost_alpha1: f32,
    pub ghost_alpha2: f32,
    pub ghost_type: u8,
    pub pad1: [u8; 3],
}

impl RenderableParam for PhantomParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.alpha1;
        if ui.input_float("Alpha1", &mut i).build() {
            self.alpha1 = i;
        }

        let mut i: f32 = self.alpha2;
        if ui.input_float("Alpha2", &mut i).build() {
            self.alpha2 = i;
        }

        let mut i: f32 = self.alpha3;
        if ui.input_float("Alpha3", &mut i).build() {
            self.alpha3 = i;
        }

        let mut i: f32 = self.alpha4;
        if ui.input_float("Alpha4", &mut i).build() {
            self.alpha4 = i;
        }

        let mut i: f32 = self.alpha5;
        if ui.input_float("Alpha5", &mut i).build() {
            self.alpha5 = i;
        }

        let mut i: i32 = self.r1 as _;
        if ui.input_int("R1", &mut i).build() {
            self.r1 = i as _;
        }

        let mut i: i32 = self.g1 as _;
        if ui.input_int("G1", &mut i).build() {
            self.g1 = i as _;
        }

        let mut i: i32 = self.b1 as _;
        if ui.input_int("B1", &mut i).build() {
            self.b1 = i as _;
        }

        let mut i: i32 = self.r2 as _;
        if ui.input_int("R2", &mut i).build() {
            self.r2 = i as _;
        }

        let mut i: i32 = self.g2 as _;
        if ui.input_int("G2", &mut i).build() {
            self.g2 = i as _;
        }

        let mut i: i32 = self.b2 as _;
        if ui.input_int("B2", &mut i).build() {
            self.b2 = i as _;
        }

        let mut i: i32 = self.r3 as _;
        if ui.input_int("R3", &mut i).build() {
            self.r3 = i as _;
        }

        let mut i: i32 = self.g3 as _;
        if ui.input_int("G3", &mut i).build() {
            self.g3 = i as _;
        }

        let mut i: i32 = self.b3 as _;
        if ui.input_int("B3", &mut i).build() {
            self.b3 = i as _;
        }

        let mut i: i32 = self.r4 as _;
        if ui.input_int("R4", &mut i).build() {
            self.r4 = i as _;
        }

        let mut i: i32 = self.g4 as _;
        if ui.input_int("G4", &mut i).build() {
            self.g4 = i as _;
        }

        let mut i: i32 = self.b4 as _;
        if ui.input_int("B4", &mut i).build() {
            self.b4 = i as _;
        }

        let mut i: i32 = self.r5 as _;
        if ui.input_int("R5", &mut i).build() {
            self.r5 = i as _;
        }

        let mut i: i32 = self.g5 as _;
        if ui.input_int("G5", &mut i).build() {
            self.g5 = i as _;
        }

        let mut i: i32 = self.b5 as _;
        if ui.input_int("B5", &mut i).build() {
            self.b5 = i as _;
        }

        let mut i: i32 = self.unk1 as _;
        if ui.input_int("Unk1", &mut i).build() {
            self.unk1 = i as _;
        }

        let mut i: f32 = self.ghost_alpha1;
        if ui.input_float("GhostAlpha1", &mut i).build() {
            self.ghost_alpha1 = i;
        }

        let mut i: f32 = self.ghost_alpha2;
        if ui.input_float("GhostAlpha2", &mut i).build() {
            self.ghost_alpha2 = i;
        }

        let mut i: i32 = self.ghost_type as _;
        if ui.input_int("GhostType", &mut i).build() {
            self.ghost_type = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct PlayRegionParam {
    pub play_region_sp_id: i32,
    pub event_flag_id0: i32,
    pub limitation_time: f32,
    pub event_flag_id1: i32,
    pub event_flag_id2: i32,
    pub disolved_event_flag: i16,
    pub load_of_cinder: u8,
    pub bitfield0: u8,
    pub bonfire_event_id0: i32,
    pub bonfire_event_id1: i32,
    pub bonfire_event_id2: i32,
    pub bonfire_event_id3: i32,
    pub bonfire_event_id4: i32,
    pub bonfire_event_id5: i32,
    pub bonfire_event_id6: i32,
    pub bonfire_event_id7: i32,
    pub bonfire_event_id8: i32,
    pub bonfire_event_id9: i32,
    pub bitfield1: u8,
    pub pad1: [u8; 31],
}

impl PlayRegionParam {
    #[allow(unused)]
    pub fn set_is_enable_event(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_enable_event(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk8(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk8(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk9(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk9(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk10(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk10(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk11(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk11(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk12(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk12(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk15(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk15(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for PlayRegionParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.play_region_sp_id as _;
        if ui.input_int("playRegionSpId", &mut i).build() {
            self.play_region_sp_id = i as _;
        }

        let mut i: i32 = self.event_flag_id0 as _;
        if ui.input_int("EventFlagId0", &mut i).build() {
            self.event_flag_id0 = i as _;
        }

        let mut i: f32 = self.limitation_time;
        if ui.input_float("LimitationTime", &mut i).build() {
            self.limitation_time = i;
        }

        let mut i: i32 = self.event_flag_id1 as _;
        if ui.input_int("EventFlagId1", &mut i).build() {
            self.event_flag_id1 = i as _;
        }

        let mut i: i32 = self.event_flag_id2 as _;
        if ui.input_int("EventFlagId2", &mut i).build() {
            self.event_flag_id2 = i as _;
        }

        let mut i: i32 = self.disolved_event_flag as _;
        if ui.input_int("DisolvedEventFlag", &mut i).build() {
            self.disolved_event_flag = i as _;
        }

        let mut i: i32 = self.load_of_cinder as _;
        if ui.input_int("LoadOfCinder", &mut i).build() {
            self.load_of_cinder = i as _;
        }

        let mut b: bool = self.is_enable_event();
        if ui.checkbox("IsEnableEvent", &mut b) {
            self.set_is_enable_event(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut b: bool = self.unk6();
        if ui.checkbox("Unk6", &mut b) {
            self.set_unk6(b);
        }

        let mut b: bool = self.unk7();
        if ui.checkbox("Unk7", &mut b) {
            self.set_unk7(b);
        }

        let mut i: i32 = self.bonfire_event_id0 as _;
        if ui.input_int("BonfireEventId0", &mut i).build() {
            self.bonfire_event_id0 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id1 as _;
        if ui.input_int("BonfireEventId1", &mut i).build() {
            self.bonfire_event_id1 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id2 as _;
        if ui.input_int("BonfireEventId2", &mut i).build() {
            self.bonfire_event_id2 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id3 as _;
        if ui.input_int("BonfireEventId3", &mut i).build() {
            self.bonfire_event_id3 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id4 as _;
        if ui.input_int("BonfireEventId4", &mut i).build() {
            self.bonfire_event_id4 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id5 as _;
        if ui.input_int("BonfireEventId5", &mut i).build() {
            self.bonfire_event_id5 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id6 as _;
        if ui.input_int("BonfireEventId6", &mut i).build() {
            self.bonfire_event_id6 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id7 as _;
        if ui.input_int("BonfireEventId7", &mut i).build() {
            self.bonfire_event_id7 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id8 as _;
        if ui.input_int("BonfireEventId8", &mut i).build() {
            self.bonfire_event_id8 = i as _;
        }

        let mut i: i32 = self.bonfire_event_id9 as _;
        if ui.input_int("BonfireEventId9", &mut i).build() {
            self.bonfire_event_id9 = i as _;
        }

        let mut b: bool = self.unk8();
        if ui.checkbox("Unk8", &mut b) {
            self.set_unk8(b);
        }

        let mut b: bool = self.unk9();
        if ui.checkbox("Unk9", &mut b) {
            self.set_unk9(b);
        }

        let mut b: bool = self.unk10();
        if ui.checkbox("Unk10", &mut b) {
            self.set_unk10(b);
        }

        let mut b: bool = self.unk11();
        if ui.checkbox("Unk11", &mut b) {
            self.set_unk11(b);
        }

        let mut b: bool = self.unk12();
        if ui.checkbox("Unk12", &mut b) {
            self.set_unk12(b);
        }

        let mut b: bool = self.unk13();
        if ui.checkbox("Unk13", &mut b) {
            self.set_unk13(b);
        }

        let mut b: bool = self.unk14();
        if ui.checkbox("Unk14", &mut b) {
            self.set_unk14(b);
        }

        let mut b: bool = self.unk15();
        if ui.checkbox("Unk15", &mut b) {
            self.set_unk15(b);
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ProtectorGenParam {
    pub pro_param_id: i32,
    pub gem_slot_type_0: u32,
    pub gem_gen_id_0: i32,
    pub gem_slot_type_1: u32,
    pub gem_gen_id_1: i32,
    pub gem_slot_type_2: u32,
    pub gem_gen_id_2: i32,
    pub gem_slot_type_3: u32,
    pub gem_gen_id_3: i32,
    pub gem_slot_type_4: u32,
    pub gem_gen_id_4: i32,
}

impl RenderableParam for ProtectorGenParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.pro_param_id as _;
        if ui.input_int("proParamId", &mut i).build() {
            self.pro_param_id = i as _;
        }

        let mut i: i32 = self.gem_slot_type_0 as _;
        if ui.input_int("gemSlotType_0", &mut i).build() {
            self.gem_slot_type_0 = i as _;
        }

        let mut i: i32 = self.gem_gen_id_0 as _;
        if ui.input_int("gemGenId_0", &mut i).build() {
            self.gem_gen_id_0 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_1 as _;
        if ui.input_int("gemSlotType_1", &mut i).build() {
            self.gem_slot_type_1 = i as _;
        }

        let mut i: i32 = self.gem_gen_id_1 as _;
        if ui.input_int("gemGenId_1", &mut i).build() {
            self.gem_gen_id_1 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_2 as _;
        if ui.input_int("gemSlotType_2", &mut i).build() {
            self.gem_slot_type_2 = i as _;
        }

        let mut i: i32 = self.gem_gen_id_2 as _;
        if ui.input_int("gemGenId_2", &mut i).build() {
            self.gem_gen_id_2 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_3 as _;
        if ui.input_int("gemSlotType_3", &mut i).build() {
            self.gem_slot_type_3 = i as _;
        }

        let mut i: i32 = self.gem_gen_id_3 as _;
        if ui.input_int("gemGenId_3", &mut i).build() {
            self.gem_gen_id_3 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_4 as _;
        if ui.input_int("gemSlotType_4", &mut i).build() {
            self.gem_slot_type_4 = i as _;
        }

        let mut i: i32 = self.gem_gen_id_4 as _;
        if ui.input_int("gemGenId_4", &mut i).build() {
            self.gem_gen_id_4 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct RagdollParam {
    pub hierarch_gain: f32,
    pub velocity_damping: f32,
    pub accel_gain: f32,
    pub velocity_gain: f32,
    pub position_gain: f32,
    pub max_liner_velocity: f32,
    pub max_angular_velocity: f32,
    pub snap_gain: f32,
    pub enable: u8,
    pub parts_hit_mask_no: i8,
    pub pad1: [u8; 14],
}

impl RenderableParam for RagdollParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.hierarch_gain;
        if ui.input_float("hierarchGain", &mut i).build() {
            self.hierarch_gain = i;
        }

        let mut i: f32 = self.velocity_damping;
        if ui.input_float("velocityDamping", &mut i).build() {
            self.velocity_damping = i;
        }

        let mut i: f32 = self.accel_gain;
        if ui.input_float("accelGain", &mut i).build() {
            self.accel_gain = i;
        }

        let mut i: f32 = self.velocity_gain;
        if ui.input_float("velocityGain", &mut i).build() {
            self.velocity_gain = i;
        }

        let mut i: f32 = self.position_gain;
        if ui.input_float("positionGain", &mut i).build() {
            self.position_gain = i;
        }

        let mut i: f32 = self.max_liner_velocity;
        if ui.input_float("maxLinerVelocity", &mut i).build() {
            self.max_liner_velocity = i;
        }

        let mut i: f32 = self.max_angular_velocity;
        if ui.input_float("maxAngularVelocity", &mut i).build() {
            self.max_angular_velocity = i;
        }

        let mut i: f32 = self.snap_gain;
        if ui.input_float("snapGain", &mut i).build() {
            self.snap_gain = i;
        }

        let mut i: i32 = self.enable as _;
        if ui.input_int("enable", &mut i).build() {
            self.enable = i as _;
        }

        let mut i: i32 = self.parts_hit_mask_no as _;
        if ui.input_int("partsHitMaskNo", &mut i).build() {
            self.parts_hit_mask_no = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ReinforceParamProtector {
    pub physic_def_rate: f32,
    pub magic_def_rate: f32,
    pub fire_def_rate: f32,
    pub thunder_def_rate: f32,
    pub slash_def_rate: f32,
    pub blow_def_rate: f32,
    pub thrust_def_rate: f32,
    pub resist_poison_rate: f32,
    pub resist_toxic_rate: f32,
    pub resist_blood_rate: f32,
    pub resist_curse_rate: f32,
    pub resident_sp_effect_id1: u8,
    pub resident_sp_effect_id2: u8,
    pub resident_sp_effect_id3: u8,
    pub material_set_id: u8,
    pub dark_def_rate: f32,
    pub resist_frost: f32,
    pub pad1: [u8; 8],
}

impl RenderableParam for ReinforceParamProtector {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.physic_def_rate;
        if ui.input_float("physicDefRate", &mut i).build() {
            self.physic_def_rate = i;
        }

        let mut i: f32 = self.magic_def_rate;
        if ui.input_float("magicDefRate", &mut i).build() {
            self.magic_def_rate = i;
        }

        let mut i: f32 = self.fire_def_rate;
        if ui.input_float("fireDefRate", &mut i).build() {
            self.fire_def_rate = i;
        }

        let mut i: f32 = self.thunder_def_rate;
        if ui.input_float("thunderDefRate", &mut i).build() {
            self.thunder_def_rate = i;
        }

        let mut i: f32 = self.slash_def_rate;
        if ui.input_float("slashDefRate", &mut i).build() {
            self.slash_def_rate = i;
        }

        let mut i: f32 = self.blow_def_rate;
        if ui.input_float("blowDefRate", &mut i).build() {
            self.blow_def_rate = i;
        }

        let mut i: f32 = self.thrust_def_rate;
        if ui.input_float("thrustDefRate", &mut i).build() {
            self.thrust_def_rate = i;
        }

        let mut i: f32 = self.resist_poison_rate;
        if ui.input_float("resistPoisonRate", &mut i).build() {
            self.resist_poison_rate = i;
        }

        let mut i: f32 = self.resist_toxic_rate;
        if ui.input_float("resistToxicRate", &mut i).build() {
            self.resist_toxic_rate = i;
        }

        let mut i: f32 = self.resist_blood_rate;
        if ui.input_float("resistBloodRate", &mut i).build() {
            self.resist_blood_rate = i;
        }

        let mut i: f32 = self.resist_curse_rate;
        if ui.input_float("resistCurseRate", &mut i).build() {
            self.resist_curse_rate = i;
        }

        let mut i: i32 = self.resident_sp_effect_id1 as _;
        if ui.input_int("ResidentSpEffectId1", &mut i).build() {
            self.resident_sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id2 as _;
        if ui.input_int("ResidentSpEffectId2", &mut i).build() {
            self.resident_sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id3 as _;
        if ui.input_int("ResidentSpEffectId3", &mut i).build() {
            self.resident_sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.material_set_id as _;
        if ui.input_int("materialSetId", &mut i).build() {
            self.material_set_id = i as _;
        }

        let mut i: f32 = self.dark_def_rate;
        if ui.input_float("darkDefRate", &mut i).build() {
            self.dark_def_rate = i;
        }

        let mut i: f32 = self.resist_frost;
        if ui.input_float("resistFrost", &mut i).build() {
            self.resist_frost = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ReinforceParamWeapon {
    pub physics_atk_rate: f32,
    pub magic_atk_rate: f32,
    pub fire_atk_rate: f32,
    pub thunder_atk_rate: f32,
    pub stamina_atk_rate: f32,
    pub sa_weapon_atk_rate: f32,
    pub sa_durability_rate: f32,
    pub correct_strength_rate: f32,
    pub correct_agility_rate: f32,
    pub correct_magic_rate: f32,
    pub correct_faith_rate: f32,
    pub physics_guard_cut_rate: f32,
    pub magic_guard_cut_rate: f32,
    pub fire_guard_cut_rate: f32,
    pub thunder_guard_cut_rate: f32,
    pub poison_guard_resist_rate: f32,
    pub toxic_guard_resist_rate: f32,
    pub bleed_guard_resist_rate: f32,
    pub curse_guard_resist_rate: f32,
    pub stamina_guard_resist_rate: f32,
    pub sp_effect_id1: u8,
    pub sp_effect_id2: u8,
    pub sp_effect_id3: u8,
    pub resident_sp_effect_id1: u8,
    pub resident_sp_effect_id2: u8,
    pub resident_sp_effect_id3: u8,
    pub material_set_id: u8,
    pub pad1: [u8; 1],
    pub dark_atk_rate: f32,
    pub dark_cut_rate: f32,
    pub stability_atk_rate: f32,
    pub stability_cut_rate: f32,
    pub frost_guard_resist_rate: f32,
    pub unk1: f32,
    pub pad2: [u8; 16],
}

impl RenderableParam for ReinforceParamWeapon {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.physics_atk_rate;
        if ui.input_float("physicsAtkRate", &mut i).build() {
            self.physics_atk_rate = i;
        }

        let mut i: f32 = self.magic_atk_rate;
        if ui.input_float("magicAtkRate", &mut i).build() {
            self.magic_atk_rate = i;
        }

        let mut i: f32 = self.fire_atk_rate;
        if ui.input_float("fireAtkRate", &mut i).build() {
            self.fire_atk_rate = i;
        }

        let mut i: f32 = self.thunder_atk_rate;
        if ui.input_float("thunderAtkRate", &mut i).build() {
            self.thunder_atk_rate = i;
        }

        let mut i: f32 = self.stamina_atk_rate;
        if ui.input_float("staminaAtkRate", &mut i).build() {
            self.stamina_atk_rate = i;
        }

        let mut i: f32 = self.sa_weapon_atk_rate;
        if ui.input_float("saWeaponAtkRate", &mut i).build() {
            self.sa_weapon_atk_rate = i;
        }

        let mut i: f32 = self.sa_durability_rate;
        if ui.input_float("saDurabilityRate", &mut i).build() {
            self.sa_durability_rate = i;
        }

        let mut i: f32 = self.correct_strength_rate;
        if ui.input_float("correctStrengthRate", &mut i).build() {
            self.correct_strength_rate = i;
        }

        let mut i: f32 = self.correct_agility_rate;
        if ui.input_float("correctAgilityRate", &mut i).build() {
            self.correct_agility_rate = i;
        }

        let mut i: f32 = self.correct_magic_rate;
        if ui.input_float("correctMagicRate", &mut i).build() {
            self.correct_magic_rate = i;
        }

        let mut i: f32 = self.correct_faith_rate;
        if ui.input_float("correctFaithRate", &mut i).build() {
            self.correct_faith_rate = i;
        }

        let mut i: f32 = self.physics_guard_cut_rate;
        if ui.input_float("physicsGuardCutRate", &mut i).build() {
            self.physics_guard_cut_rate = i;
        }

        let mut i: f32 = self.magic_guard_cut_rate;
        if ui.input_float("magicGuardCutRate", &mut i).build() {
            self.magic_guard_cut_rate = i;
        }

        let mut i: f32 = self.fire_guard_cut_rate;
        if ui.input_float("fireGuardCutRate", &mut i).build() {
            self.fire_guard_cut_rate = i;
        }

        let mut i: f32 = self.thunder_guard_cut_rate;
        if ui.input_float("thunderGuardCutRate", &mut i).build() {
            self.thunder_guard_cut_rate = i;
        }

        let mut i: f32 = self.poison_guard_resist_rate;
        if ui.input_float("poisonGuardResistRate", &mut i).build() {
            self.poison_guard_resist_rate = i;
        }

        let mut i: f32 = self.toxic_guard_resist_rate;
        if ui.input_float("toxicGuardResistRate", &mut i).build() {
            self.toxic_guard_resist_rate = i;
        }

        let mut i: f32 = self.bleed_guard_resist_rate;
        if ui.input_float("bleedGuardResistRate", &mut i).build() {
            self.bleed_guard_resist_rate = i;
        }

        let mut i: f32 = self.curse_guard_resist_rate;
        if ui.input_float("curseGuardResistRate", &mut i).build() {
            self.curse_guard_resist_rate = i;
        }

        let mut i: f32 = self.stamina_guard_resist_rate;
        if ui.input_float("staminaGuardResistRate", &mut i).build() {
            self.stamina_guard_resist_rate = i;
        }

        let mut i: i32 = self.sp_effect_id1 as _;
        if ui.input_int("spEffectId1", &mut i).build() {
            self.sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.sp_effect_id2 as _;
        if ui.input_int("spEffectId2", &mut i).build() {
            self.sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.sp_effect_id3 as _;
        if ui.input_int("spEffectId3", &mut i).build() {
            self.sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id1 as _;
        if ui.input_int("ResidentSpEffectId1", &mut i).build() {
            self.resident_sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id2 as _;
        if ui.input_int("ResidentSpEffectId2", &mut i).build() {
            self.resident_sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.resident_sp_effect_id3 as _;
        if ui.input_int("ResidentSpEffectId3", &mut i).build() {
            self.resident_sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.material_set_id as _;
        if ui.input_int("materialSetId", &mut i).build() {
            self.material_set_id = i as _;
        }

        let mut i: f32 = self.dark_atk_rate;
        if ui.input_float("darkAtkRate", &mut i).build() {
            self.dark_atk_rate = i;
        }

        let mut i: f32 = self.dark_cut_rate;
        if ui.input_float("darkCutRate", &mut i).build() {
            self.dark_cut_rate = i;
        }

        let mut i: f32 = self.stability_atk_rate;
        if ui.input_float("StabilityAtkRate", &mut i).build() {
            self.stability_atk_rate = i;
        }

        let mut i: f32 = self.stability_cut_rate;
        if ui.input_float("StabilityCutRate", &mut i).build() {
            self.stability_cut_rate = i;
        }

        let mut i: f32 = self.frost_guard_resist_rate;
        if ui.input_float("frostGuardResistRate", &mut i).build() {
            self.frost_guard_resist_rate = i;
        }

        let mut i: f32 = self.unk1;
        if ui.input_float("unk1", &mut i).build() {
            self.unk1 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct RoleParam {
    pub team_type: u8,
    pub pad1: [u8; 3],
    pub phantom_param_id0: i32,
    pub sp_effect_id0: i32,
    pub sp_effect_id1: i32,
    pub sp_effect_id2: i32,
    pub sp_effect_id3: i32,
    pub sp_effect_id4: i32,
    pub sp_effect_id5: i32,
    pub sp_effect_id6: i32,
    pub sp_effect_id7: i32,
    pub sp_effect_id8: i32,
    pub sp_effect_id9: i32,
    pub sfx_id0: i32,
    pub sfx_id1: i32,
    pub stay_anim_id: i32,
    pub item_lot_id: i32,
    pub sp_effect_condition: u8,
    pub is_display_team_name: u8,
    pub pad2: [u8; 2],
    pub text_id: i32,
    pub sub_team_type: i32,
    pub phantom_param_id1: i32,
    pub phantom_param_id2: i32,
    pub phantom_param_id3: i32,
    pub sp_effect10: i32,
    pub sp_effect11: i32,
    pub sp_effect12: i32,
    pub sp_effect13: i32,
    pub phantom_param_id_for_debug: i32,
    pub pad3: [u8; 20],
}

impl RenderableParam for RoleParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.team_type as _;
        if ui.input_int("TeamType", &mut i).build() {
            self.team_type = i as _;
        }

        let mut i: i32 = self.phantom_param_id0 as _;
        if ui.input_int("PhantomParamId0", &mut i).build() {
            self.phantom_param_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_id0 as _;
        if ui.input_int("SpEffectId0", &mut i).build() {
            self.sp_effect_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_id1 as _;
        if ui.input_int("SpEffectId1", &mut i).build() {
            self.sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.sp_effect_id2 as _;
        if ui.input_int("SpEffectId2", &mut i).build() {
            self.sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.sp_effect_id3 as _;
        if ui.input_int("SpEffectId3", &mut i).build() {
            self.sp_effect_id3 = i as _;
        }

        let mut i: i32 = self.sp_effect_id4 as _;
        if ui.input_int("SpEffectId4", &mut i).build() {
            self.sp_effect_id4 = i as _;
        }

        let mut i: i32 = self.sp_effect_id5 as _;
        if ui.input_int("SpEffectId5", &mut i).build() {
            self.sp_effect_id5 = i as _;
        }

        let mut i: i32 = self.sp_effect_id6 as _;
        if ui.input_int("SpEffectId6", &mut i).build() {
            self.sp_effect_id6 = i as _;
        }

        let mut i: i32 = self.sp_effect_id7 as _;
        if ui.input_int("SpEffectId7", &mut i).build() {
            self.sp_effect_id7 = i as _;
        }

        let mut i: i32 = self.sp_effect_id8 as _;
        if ui.input_int("SpEffectId8", &mut i).build() {
            self.sp_effect_id8 = i as _;
        }

        let mut i: i32 = self.sp_effect_id9 as _;
        if ui.input_int("SpEffectId9", &mut i).build() {
            self.sp_effect_id9 = i as _;
        }

        let mut i: i32 = self.sfx_id0 as _;
        if ui.input_int("SfxId0", &mut i).build() {
            self.sfx_id0 = i as _;
        }

        let mut i: i32 = self.sfx_id1 as _;
        if ui.input_int("SfxId1", &mut i).build() {
            self.sfx_id1 = i as _;
        }

        let mut i: i32 = self.stay_anim_id as _;
        if ui.input_int("StayAnimId", &mut i).build() {
            self.stay_anim_id = i as _;
        }

        let mut i: i32 = self.item_lot_id as _;
        if ui.input_int("ItemLotId", &mut i).build() {
            self.item_lot_id = i as _;
        }

        let mut i: i32 = self.sp_effect_condition as _;
        if ui.input_int("spEffectCondition", &mut i).build() {
            self.sp_effect_condition = i as _;
        }

        let mut i: i32 = self.is_display_team_name as _;
        if ui.input_int("IsDisplayTeamName", &mut i).build() {
            self.is_display_team_name = i as _;
        }

        let mut i: i32 = self.text_id as _;
        if ui.input_int("TextId", &mut i).build() {
            self.text_id = i as _;
        }

        let mut i: i32 = self.sub_team_type as _;
        if ui.input_int("subTeamType", &mut i).build() {
            self.sub_team_type = i as _;
        }

        let mut i: i32 = self.phantom_param_id1 as _;
        if ui.input_int("PhantomParamId1", &mut i).build() {
            self.phantom_param_id1 = i as _;
        }

        let mut i: i32 = self.phantom_param_id2 as _;
        if ui.input_int("PhantomParamId2", &mut i).build() {
            self.phantom_param_id2 = i as _;
        }

        let mut i: i32 = self.phantom_param_id3 as _;
        if ui.input_int("PhantomParamId3", &mut i).build() {
            self.phantom_param_id3 = i as _;
        }

        let mut i: i32 = self.sp_effect10 as _;
        if ui.input_int("spEffect10", &mut i).build() {
            self.sp_effect10 = i as _;
        }

        let mut i: i32 = self.sp_effect11 as _;
        if ui.input_int("spEffect11", &mut i).build() {
            self.sp_effect11 = i as _;
        }

        let mut i: i32 = self.sp_effect12 as _;
        if ui.input_int("spEffect12", &mut i).build() {
            self.sp_effect12 = i as _;
        }

        let mut i: i32 = self.sp_effect13 as _;
        if ui.input_int("spEffect13", &mut i).build() {
            self.sp_effect13 = i as _;
        }

        let mut i: i32 = self.phantom_param_id_for_debug as _;
        if ui.input_int("PhantomParamIdForDebug", &mut i).build() {
            self.phantom_param_id_for_debug = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct SeMaterialConvertParam {
    pub material_id: i32,
}

impl RenderableParam for SeMaterialConvertParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.material_id as _;
        if ui.input_int("Material_Id", &mut i).build() {
            self.material_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ShopLineupParam {
    pub equip_id: i32,
    pub value: i32,
    pub mtrl_id: i32,
    pub event_flag: i32,
    pub qwc_id: i32,
    pub sell_quantity: i16,
    pub shop_type: u8,
    pub equip_type: u8,
    pub value_san: i16,
    pub pad1: [u8; 6],
    pub price_rate: f32,
}

impl RenderableParam for ShopLineupParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.equip_id as _;
        if ui.input_int("EquipId", &mut i).build() {
            self.equip_id = i as _;
        }

        let mut i: i32 = self.value as _;
        if ui.input_int("value", &mut i).build() {
            self.value = i as _;
        }

        let mut i: i32 = self.mtrl_id as _;
        if ui.input_int("mtrlId", &mut i).build() {
            self.mtrl_id = i as _;
        }

        let mut i: i32 = self.event_flag as _;
        if ui.input_int("EventFlag", &mut i).build() {
            self.event_flag = i as _;
        }

        let mut i: i32 = self.qwc_id as _;
        if ui.input_int("qwcID", &mut i).build() {
            self.qwc_id = i as _;
        }

        let mut i: i32 = self.sell_quantity as _;
        if ui.input_int("sellQuantity", &mut i).build() {
            self.sell_quantity = i as _;
        }

        let mut i: i32 = self.shop_type as _;
        if ui.input_int("shopType", &mut i).build() {
            self.shop_type = i as _;
        }

        let mut i: i32 = self.equip_type as _;
        if ui.input_int("equipType", &mut i).build() {
            self.equip_type = i as _;
        }

        let mut i: i32 = self.value_san as _;
        if ui.input_int("value_SAN", &mut i).build() {
            self.value_san = i as _;
        }

        let mut i: f32 = self.price_rate;
        if ui.input_float("PriceRate", &mut i).build() {
            self.price_rate = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct SkeletonParam {
    pub neck_turn_gain: f32,
    pub original_ground_height_ms: i16,
    pub min_ankle_height_ms: i16,
    pub max_ankle_height_ms: i16,
    pub cosine_max_knee_angle: i16,
    pub cosine_min_knee_angle: i16,
    pub foot_planted_ankle_height_ms: i16,
    pub foot_raised_ankle_height_ms: i16,
    pub raycast_distance_up: i16,
    pub raycast_distance_down: i16,
    pub foot_end_ls_x: i16,
    pub foot_end_ls_y: i16,
    pub foot_end_ls_z: i16,
    pub on_off_gain: i16,
    pub ground_acsending_gain: i16,
    pub ground_descending_gain: i16,
    pub foot_raised_gain: i16,
    pub foot_planted_gain: i16,
    pub foot_unlock_gain: i16,
    pub knee_axis_type: u8,
    pub use_foot_locking: u8,
    pub foot_placement_on: u8,
    pub twist_knee_axis_type: u8,
    pub neck_turn_priority: u8,
    pub neck_turn_max_angle: u8,
    pub pad1: [u8; 2],
}

impl RenderableParam for SkeletonParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.neck_turn_gain;
        if ui.input_float("neckTurnGain", &mut i).build() {
            self.neck_turn_gain = i;
        }

        let mut i: i32 = self.original_ground_height_ms as _;
        if ui.input_int("originalGroundHeightMS", &mut i).build() {
            self.original_ground_height_ms = i as _;
        }

        let mut i: i32 = self.min_ankle_height_ms as _;
        if ui.input_int("minAnkleHeightMS", &mut i).build() {
            self.min_ankle_height_ms = i as _;
        }

        let mut i: i32 = self.max_ankle_height_ms as _;
        if ui.input_int("maxAnkleHeightMS", &mut i).build() {
            self.max_ankle_height_ms = i as _;
        }

        let mut i: i32 = self.cosine_max_knee_angle as _;
        if ui.input_int("cosineMaxKneeAngle", &mut i).build() {
            self.cosine_max_knee_angle = i as _;
        }

        let mut i: i32 = self.cosine_min_knee_angle as _;
        if ui.input_int("cosineMinKneeAngle", &mut i).build() {
            self.cosine_min_knee_angle = i as _;
        }

        let mut i: i32 = self.foot_planted_ankle_height_ms as _;
        if ui.input_int("footPlantedAnkleHeightMS", &mut i).build() {
            self.foot_planted_ankle_height_ms = i as _;
        }

        let mut i: i32 = self.foot_raised_ankle_height_ms as _;
        if ui.input_int("footRaisedAnkleHeightMS", &mut i).build() {
            self.foot_raised_ankle_height_ms = i as _;
        }

        let mut i: i32 = self.raycast_distance_up as _;
        if ui.input_int("raycastDistanceUp", &mut i).build() {
            self.raycast_distance_up = i as _;
        }

        let mut i: i32 = self.raycast_distance_down as _;
        if ui.input_int("raycastDistanceDown", &mut i).build() {
            self.raycast_distance_down = i as _;
        }

        let mut i: i32 = self.foot_end_ls_x as _;
        if ui.input_int("footEndLS_X", &mut i).build() {
            self.foot_end_ls_x = i as _;
        }

        let mut i: i32 = self.foot_end_ls_y as _;
        if ui.input_int("footEndLS_Y", &mut i).build() {
            self.foot_end_ls_y = i as _;
        }

        let mut i: i32 = self.foot_end_ls_z as _;
        if ui.input_int("footEndLS_Z", &mut i).build() {
            self.foot_end_ls_z = i as _;
        }

        let mut i: i32 = self.on_off_gain as _;
        if ui.input_int("onOffGain", &mut i).build() {
            self.on_off_gain = i as _;
        }

        let mut i: i32 = self.ground_acsending_gain as _;
        if ui.input_int("groundAcsendingGain", &mut i).build() {
            self.ground_acsending_gain = i as _;
        }

        let mut i: i32 = self.ground_descending_gain as _;
        if ui.input_int("groundDescendingGain", &mut i).build() {
            self.ground_descending_gain = i as _;
        }

        let mut i: i32 = self.foot_raised_gain as _;
        if ui.input_int("footRaisedGain", &mut i).build() {
            self.foot_raised_gain = i as _;
        }

        let mut i: i32 = self.foot_planted_gain as _;
        if ui.input_int("footPlantedGain", &mut i).build() {
            self.foot_planted_gain = i as _;
        }

        let mut i: i32 = self.foot_unlock_gain as _;
        if ui.input_int("footUnlockGain", &mut i).build() {
            self.foot_unlock_gain = i as _;
        }

        let mut i: i32 = self.knee_axis_type as _;
        if ui.input_int("kneeAxisType", &mut i).build() {
            self.knee_axis_type = i as _;
        }

        let mut i: i32 = self.use_foot_locking as _;
        if ui.input_int("useFootLocking", &mut i).build() {
            self.use_foot_locking = i as _;
        }

        let mut i: i32 = self.foot_placement_on as _;
        if ui.input_int("footPlacementOn", &mut i).build() {
            self.foot_placement_on = i as _;
        }

        let mut i: i32 = self.twist_knee_axis_type as _;
        if ui.input_int("twistKneeAxisType", &mut i).build() {
            self.twist_knee_axis_type = i as _;
        }

        let mut i: i32 = self.neck_turn_priority as _;
        if ui.input_int("neckTurnPriority", &mut i).build() {
            self.neck_turn_priority = i as _;
        }

        let mut i: i32 = self.neck_turn_max_angle as _;
        if ui.input_int("neckTurnMaxAngle", &mut i).build() {
            self.neck_turn_max_angle = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct SpEffectParam {
    pub icon_id: i32,
    pub condition_hp: f32,
    pub effect_endurance: f32,
    pub motion_interval: f32,
    pub max_hp_rate: f32,
    pub max_mp_rate: f32,
    pub max_stamina_cut_rate: f32,
    pub slash_damage_cut_rate: f32,
    pub blow_damage_cut_rate: f32,
    pub thrust_damage_cut_rate: f32,
    pub neutral_damage_cut_rate: f32,
    pub magic_damage_cut_rate: f32,
    pub fire_damage_cut_rate: f32,
    pub thunder_damage_cut_rate: f32,
    pub phys_atk_rate: f32,
    pub magic_atk_rate: f32,
    pub fire_atk_rate: f32,
    pub thunder_atk_rate: f32,
    pub phys_atk_power_rate: f32,
    pub magic_atk_power_rate: f32,
    pub fire_atk_power_rate: f32,
    pub thunder_atk_power_rate: f32,
    pub phys_atk_power: i32,
    pub magic_atk_power: i32,
    pub fire_atk_power: i32,
    pub thunder_atk_power: i32,
    pub phys_def_rate: f32,
    pub magic_def_rate: f32,
    pub fire_def_rate: f32,
    pub thunder_def_rate: f32,
    pub phys_def: i32,
    pub magic_def: i32,
    pub fire_def: i32,
    pub thunder_def: i32,
    pub no_guard_damage_rate: f32,
    pub vital_spot_change_rate: f32,
    pub normal_spot_change_rate: f32,
    pub max_hp_change_rate: f32,
    pub behavior_id: i32,
    pub change_hp_rate: f32,
    pub change_hp_point: i32,
    pub change_mp_rate: f32,
    pub change_mp_point: i32,
    pub mp_recover_change_speed: i32,
    pub change_stamina_rate: f32,
    pub change_stamina_point: i32,
    pub stamina_recover_change_speed: i32,
    pub magic_effect_time_change: f32,
    pub inside_durability: i32,
    pub max_durability: i32,
    pub stamina_attack_rate: f32,
    pub regist_poison: i32,
    pub regist_toxic: i32,
    pub regist_blood: i32,
    pub regist_curse: i32,
    pub fall_damage_rate: f32,
    pub soul_rate: f32,
    pub equip_weight_change_rate: f32,
    pub all_item_weight_change_rate: f32,
    pub soul: i32,
    pub anim_id_offset: i32,
    pub have_soul_rate: f32,
    pub target_priority: f32,
    pub sight_search_enemy_cut: i32,
    pub hearing_search_enemy_cut: f32,
    pub gravity_rate: f32,
    pub regist_poison_change_rate: f32,
    pub regist_toxic_change_rate: f32,
    pub regist_blood_change_rate: f32,
    pub regist_curse_change_rate: f32,
    pub soul_steal_rate: f32,
    pub life_reduction_rate: f32,
    pub hp_recover_rate: f32,
    pub replace_sp_effect_id: i32,
    pub cycle_occurence_sp_effect_id: i32,
    pub atk_occurence_sp_effect_id: i32,
    pub guard_def_flick_power_rate: f32,
    pub guard_stamina_cut_rate: f32,
    pub ray_cast_passed_time: i16,
    pub change_super_armor_point: i16,
    pub bow_dist_rate: i16,
    pub sp_category: i16,
    pub category_priority: i8,
    pub save_category: i8,
    pub change_magic_slot: u8,
    pub change_miracle_slot: u8,
    pub hero_point_damage: u8,
    pub def_flick_power: u8,
    pub flick_damage_cut_rate: u8,
    pub blood_damage_rate: u8,
    pub dmg_lv_none: u8,
    pub dmg_lv_s: u8,
    pub dmg_lv_m: u8,
    pub dmg_lv_l: u8,
    pub dmg_lv_blow_m: u8,
    pub dmg_lv_push: u8,
    pub dmg_lv_strike: u8,
    pub dmg_lv_blow_s: u8,
    pub dmg_lv_min: u8,
    pub dmg_lv_uppercut: u8,
    pub dmg_lv_blow_ll: u8,
    pub dmg_lv_breath: u8,
    pub atk_attribute: u8,
    pub sp_attribute: u8,
    pub state_info: i16,
    pub wep_param_change: u8,
    pub move_type: u8,
    pub life_reduction_type: i16,
    pub throw_condition: u8,
    pub add_behavior_judge_id_condition: i8,
    pub add_behavior_judge_id_add: i8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub bitfield2: u8,
    pub bitfield3: u8,
    pub bitfield4: u8,
    pub bitfield5: u8,
    pub bitfield6: u8,
    pub bitfield7: u8,
    pub damage_change_state: u8,
    pub unk1: f32,
    pub bitfield8: u8,
    pub unk7: i8,
    pub unk8: i16,
    pub effect_vfx0: i32,
    pub state_sp_effect0: i32,
    pub state_sp_effect1: i32,
    pub state_sp_effect2: i32,
    pub state_sp_effect3: i32,
    pub stability_val: i32,
    pub unk9: i32,
    pub unk10: i16,
    pub unk11: i16,
    pub effect_vfx1: i32,
    pub effect_vfx2: i32,
    pub effect_vfx3: i32,
    pub effect_vfx4: i32,
    pub effect_vfx5: i32,
    pub effect_vfx6: i32,
    pub effect_vfx7: i32,
    pub regist_frost: i32,
    pub unk12: i32,
    pub unk13: i16,
    pub unk14: u8,
    pub unk15: u8,
    pub poise_rate: f32,
    pub phys_rate: f32,
    pub magic_rate: f32,
    pub fire_rate: f32,
    pub thunder_rate: f32,
    pub dark_rate: f32,
    pub stamina_rate: f32,
    pub dark_damage_cut_rate: f32,
    pub dark_def_rate: f32,
    pub unk16: f32,
    pub unk17: f32,
    pub dark_attack_power_rate: f32,
    pub dark_atk_power: i32,
    pub unk18: f32,
    pub unk19: i32,
    pub condition_max_hp: f32,
    pub unk20: f32,
    pub drop_rate: f32,
    pub unk21: f32,
    pub poison_resist_change: f32,
    pub toxic_resist_change: f32,
    pub bleed_resist_change: f32,
    pub curse_resist_change: f32,
    pub frost_resist_change: f32,
    pub unk_damage_rate0: f32,
    pub unk_damage_rate1: f32,
    pub unk_damage_rate2: f32,
    pub unk_damage_rate3: f32,
    pub poison_atk_rate: f32,
    pub toxic_atk_rate: f32,
    pub bleed_atk_rate: f32,
    pub toxic_atk_rate_0: f32,
    pub unk22: f32,
    pub slash_sp_attack_rate: f32,
    pub blow_sp_attack_rate: f32,
    pub thrust_sp_attack_rate: f32,
    pub phys_sp_attack_rate: f32,
    pub magic_sp_attack_rate: f32,
    pub fire_sp_attack_rate: f32,
    pub thunder_sp_attack_rate: f32,
    pub dark_sp_attack_rate: f32,
    pub player_base_val0: u8,
    pub player_base_val1: u8,
    pub player_base_val2: u8,
    pub player_base_val3: u8,
    pub unk23: u8,
    pub bitfield9: u8,
    pub unk28: u8,
    pub unk29: u8,
    pub unk30: f32,
    pub phys_def_cut_rate_mp: f32,
    pub magic_def_cut_rate_mp: f32,
    pub fire_def_cut_rate_mp: f32,
    pub thunder_def_cut_rate_mp: f32,
    pub dark_def_cut_rate_mp: f32,
    pub phys_def_cut_rate2: f32,
    pub magic_def_cut_rate2: f32,
    pub fire_def_cut_rate2: f32,
    pub thunder_def_cut_rate2: f32,
    pub dark_def_cut_rate2: f32,
    pub unk36: f32,
    pub phys_unk_rate: f32,
    pub magic_unk_rate: f32,
    pub fire_unk_rate: f32,
    pub thunder_unk_rate: f32,
    pub dark_unk_rate: f32,
    pub phys_damage_rate2: f32,
    pub magic_damage_rate2: f32,
    pub fire_damage_rate2: f32,
    pub thunder_damage_rate2: f32,
    pub dark_damage_rate2: f32,
    pub regist_frost_change_rate: f32,
    pub condition_hp_change0: i16,
    pub condition_hp_change1: i16,
    pub condition_hp_change2: i16,
    pub unk37: u8,
    pub fake_dexterity_cast_speed: u8,
    pub unk38: f32,
    pub sword_art_mp_change_rate: f32,
    pub magic_mp_change_rate: f32,
    pub pyro_mp_change_rate: f32,
    pub miracle_mp_change_rate: f32,
    pub sub_change_hp_rate: f32,
    pub sub_hp_point: i32,
    pub sub_change_mp_rate: f32,
    pub sub_mp_point: i32,
    pub sub_hp_restore_rate: f32,
    pub sub_mp_restore_rate: f32,
    pub death_occurence_sp_effect_id: i32,
    pub effect_endurance_rate: f32,
    pub unk39: f32,
    pub unk40: u8,
    pub unk41: u8,
    pub sub_sp_category: i16,
    pub unk42: f32,
    pub vigor: i8,
    pub attunement: i8,
    pub endurance: i8,
    pub vitality: i8,
    pub strength: i8,
    pub dexterity: i8,
    pub intelligence: i8,
    pub faith: i8,
    pub luck: i8,
    pub human_point: i8,
    pub pad: [u8; 14],
}

impl SpEffectParam {
    #[allow(unused)]
    pub fn set_effect_target_self(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_self(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_friend(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_friend(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_enemy(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_enemy(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_player(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_player(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_ai(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_ai(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_live(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_live(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_ghost(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_ghost(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_white_ghost(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_white_ghost(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_black_ghost(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_black_ghost(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_attacker(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_attacker(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disp_icon_nonactive(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disp_icon_nonactive(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_sp_effect_effect(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_sp_effect_effect(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_b_adjust_magic_ability(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn b_adjust_magic_ability(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_b_adjust_faith_ability(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn b_adjust_faith_ability(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_b_game_clear_bonus(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn b_game_clear_bonus(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_mag_param_change(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn mag_param_change(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_miracle_param_change(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn miracle_param_change(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_clear_soul(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn clear_soul(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_sos(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_sos(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_black_sos(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_black_sos(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_force_join_black_sos(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_force_join_black_sos(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_kick_session(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_kick_session(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_leave_session(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_leave_session(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_npc_invade(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield2;
        self.bitfield2 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_npc_invade(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield2 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_no_dead(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn no_dead(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_b_curr_hpindepende_max_hp(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn b_curr_hpindepende_max_hp(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_corrosion_ignore(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn corrosion_ignore(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_sight_search_cut_ignore(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn sight_search_cut_ignore(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_hearing_search_cut_ignore(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn hearing_search_cut_ignore(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_anti_magic_ignore(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn anti_magic_ignore(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_fake_target_ignore(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn fake_target_ignore(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_fake_target_ignore_undead(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield3;
        self.bitfield3 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn fake_target_ignore_undead(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield3 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_fake_target_ignore_animal(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn fake_target_ignore_animal(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_gravity_ignore(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn gravity_ignore(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_poison(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_poison(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_toxic(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_toxic(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_blood(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_blood(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_curse(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_curse(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_charm(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_charm(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_life_time(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield4;
        self.bitfield4 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_life_time(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield4 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_has_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn has_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_fire_damage_cancel(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_fire_damage_cancel(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_extend_sp_effect_life(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_extend_sp_effect_life(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_request_leave_coliseum_session(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn request_leave_coliseum_session(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_frost(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_frost(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_charge_attack_param_change(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn charge_attack_param_change(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_throw_attack_param_change(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn throw_attack_param_change(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_enable_equip_slot_check(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield5;
        self.bitfield5 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn enable_equip_slot_check(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield5 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type0(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type0(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type7(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield6;
        self.bitfield6 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type7(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield6 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type8(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type8(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type9(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type9(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type10(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type10(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type11(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type11(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type12(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type12(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type13(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type13(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type14(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type14(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_vow_type15(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield7;
        self.bitfield7 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn vow_type15(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield7 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_oppose_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_oppose_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_friendly_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_friendly_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_effect_target_self_target(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn effect_target_self_target(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk6(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield8;
        self.bitfield8 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk6(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield8 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk24(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk24(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_sp_val_correction(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_sp_val_correction(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_different_val(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_different_val(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_insta_death(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn insta_death(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk25(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk25(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk26(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk26(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk27(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk27(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield9 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_disable_multi_play_use(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield9;
        self.bitfield9 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn disable_multi_play_use(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield9 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for SpEffectParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.icon_id as _;
        if ui.input_int("iconId", &mut i).build() {
            self.icon_id = i as _;
        }

        let mut i: f32 = self.condition_hp;
        if ui.input_float("conditionHp", &mut i).build() {
            self.condition_hp = i;
        }

        let mut i: f32 = self.effect_endurance;
        if ui.input_float("effectEndurance", &mut i).build() {
            self.effect_endurance = i;
        }

        let mut i: f32 = self.motion_interval;
        if ui.input_float("motionInterval", &mut i).build() {
            self.motion_interval = i;
        }

        let mut i: f32 = self.max_hp_rate;
        if ui.input_float("maxHpRate", &mut i).build() {
            self.max_hp_rate = i;
        }

        let mut i: f32 = self.max_mp_rate;
        if ui.input_float("maxMpRate", &mut i).build() {
            self.max_mp_rate = i;
        }

        let mut i: f32 = self.max_stamina_cut_rate;
        if ui.input_float("maxStaminaCutRate", &mut i).build() {
            self.max_stamina_cut_rate = i;
        }

        let mut i: f32 = self.slash_damage_cut_rate;
        if ui.input_float("slashDamageCutRate", &mut i).build() {
            self.slash_damage_cut_rate = i;
        }

        let mut i: f32 = self.blow_damage_cut_rate;
        if ui.input_float("blowDamageCutRate", &mut i).build() {
            self.blow_damage_cut_rate = i;
        }

        let mut i: f32 = self.thrust_damage_cut_rate;
        if ui.input_float("thrustDamageCutRate", &mut i).build() {
            self.thrust_damage_cut_rate = i;
        }

        let mut i: f32 = self.neutral_damage_cut_rate;
        if ui.input_float("neutralDamageCutRate", &mut i).build() {
            self.neutral_damage_cut_rate = i;
        }

        let mut i: f32 = self.magic_damage_cut_rate;
        if ui.input_float("magicDamageCutRate", &mut i).build() {
            self.magic_damage_cut_rate = i;
        }

        let mut i: f32 = self.fire_damage_cut_rate;
        if ui.input_float("fireDamageCutRate", &mut i).build() {
            self.fire_damage_cut_rate = i;
        }

        let mut i: f32 = self.thunder_damage_cut_rate;
        if ui.input_float("thunderDamageCutRate", &mut i).build() {
            self.thunder_damage_cut_rate = i;
        }

        let mut i: f32 = self.phys_atk_rate;
        if ui.input_float("physAtkRate", &mut i).build() {
            self.phys_atk_rate = i;
        }

        let mut i: f32 = self.magic_atk_rate;
        if ui.input_float("magicAtkRate", &mut i).build() {
            self.magic_atk_rate = i;
        }

        let mut i: f32 = self.fire_atk_rate;
        if ui.input_float("fireAtkRate", &mut i).build() {
            self.fire_atk_rate = i;
        }

        let mut i: f32 = self.thunder_atk_rate;
        if ui.input_float("thunderAtkRate", &mut i).build() {
            self.thunder_atk_rate = i;
        }

        let mut i: f32 = self.phys_atk_power_rate;
        if ui.input_float("physAtkPowerRate", &mut i).build() {
            self.phys_atk_power_rate = i;
        }

        let mut i: f32 = self.magic_atk_power_rate;
        if ui.input_float("magicAtkPowerRate", &mut i).build() {
            self.magic_atk_power_rate = i;
        }

        let mut i: f32 = self.fire_atk_power_rate;
        if ui.input_float("fireAtkPowerRate", &mut i).build() {
            self.fire_atk_power_rate = i;
        }

        let mut i: f32 = self.thunder_atk_power_rate;
        if ui.input_float("thunderAtkPowerRate", &mut i).build() {
            self.thunder_atk_power_rate = i;
        }

        let mut i: i32 = self.phys_atk_power as _;
        if ui.input_int("physAtkPower", &mut i).build() {
            self.phys_atk_power = i as _;
        }

        let mut i: i32 = self.magic_atk_power as _;
        if ui.input_int("magicAtkPower", &mut i).build() {
            self.magic_atk_power = i as _;
        }

        let mut i: i32 = self.fire_atk_power as _;
        if ui.input_int("fireAtkPower", &mut i).build() {
            self.fire_atk_power = i as _;
        }

        let mut i: i32 = self.thunder_atk_power as _;
        if ui.input_int("thunderAtkPower", &mut i).build() {
            self.thunder_atk_power = i as _;
        }

        let mut i: f32 = self.phys_def_rate;
        if ui.input_float("physDefRate", &mut i).build() {
            self.phys_def_rate = i;
        }

        let mut i: f32 = self.magic_def_rate;
        if ui.input_float("magicDefRate", &mut i).build() {
            self.magic_def_rate = i;
        }

        let mut i: f32 = self.fire_def_rate;
        if ui.input_float("fireDefRate", &mut i).build() {
            self.fire_def_rate = i;
        }

        let mut i: f32 = self.thunder_def_rate;
        if ui.input_float("thunderDefRate", &mut i).build() {
            self.thunder_def_rate = i;
        }

        let mut i: i32 = self.phys_def as _;
        if ui.input_int("physDef", &mut i).build() {
            self.phys_def = i as _;
        }

        let mut i: i32 = self.magic_def as _;
        if ui.input_int("magicDef", &mut i).build() {
            self.magic_def = i as _;
        }

        let mut i: i32 = self.fire_def as _;
        if ui.input_int("fireDef", &mut i).build() {
            self.fire_def = i as _;
        }

        let mut i: i32 = self.thunder_def as _;
        if ui.input_int("thunderDef", &mut i).build() {
            self.thunder_def = i as _;
        }

        let mut i: f32 = self.no_guard_damage_rate;
        if ui.input_float("noGuardDamageRate", &mut i).build() {
            self.no_guard_damage_rate = i;
        }

        let mut i: f32 = self.vital_spot_change_rate;
        if ui.input_float("vitalSpotChangeRate", &mut i).build() {
            self.vital_spot_change_rate = i;
        }

        let mut i: f32 = self.normal_spot_change_rate;
        if ui.input_float("normalSpotChangeRate", &mut i).build() {
            self.normal_spot_change_rate = i;
        }

        let mut i: f32 = self.max_hp_change_rate;
        if ui.input_float("maxHpChangeRate", &mut i).build() {
            self.max_hp_change_rate = i;
        }

        let mut i: i32 = self.behavior_id as _;
        if ui.input_int("behaviorId", &mut i).build() {
            self.behavior_id = i as _;
        }

        let mut i: f32 = self.change_hp_rate;
        if ui.input_float("changeHpRate", &mut i).build() {
            self.change_hp_rate = i;
        }

        let mut i: i32 = self.change_hp_point as _;
        if ui.input_int("changeHpPoint", &mut i).build() {
            self.change_hp_point = i as _;
        }

        let mut i: f32 = self.change_mp_rate;
        if ui.input_float("changeMpRate", &mut i).build() {
            self.change_mp_rate = i;
        }

        let mut i: i32 = self.change_mp_point as _;
        if ui.input_int("changeMpPoint", &mut i).build() {
            self.change_mp_point = i as _;
        }

        let mut i: i32 = self.mp_recover_change_speed as _;
        if ui.input_int("mpRecoverChangeSpeed", &mut i).build() {
            self.mp_recover_change_speed = i as _;
        }

        let mut i: f32 = self.change_stamina_rate;
        if ui.input_float("changeStaminaRate", &mut i).build() {
            self.change_stamina_rate = i;
        }

        let mut i: i32 = self.change_stamina_point as _;
        if ui.input_int("changeStaminaPoint", &mut i).build() {
            self.change_stamina_point = i as _;
        }

        let mut i: i32 = self.stamina_recover_change_speed as _;
        if ui.input_int("staminaRecoverChangeSpeed", &mut i).build() {
            self.stamina_recover_change_speed = i as _;
        }

        let mut i: f32 = self.magic_effect_time_change;
        if ui.input_float("magicEffectTimeChange", &mut i).build() {
            self.magic_effect_time_change = i;
        }

        let mut i: i32 = self.inside_durability as _;
        if ui.input_int("insideDurability", &mut i).build() {
            self.inside_durability = i as _;
        }

        let mut i: i32 = self.max_durability as _;
        if ui.input_int("maxDurability", &mut i).build() {
            self.max_durability = i as _;
        }

        let mut i: f32 = self.stamina_attack_rate;
        if ui.input_float("staminaAttackRate", &mut i).build() {
            self.stamina_attack_rate = i;
        }

        let mut i: i32 = self.regist_poison as _;
        if ui.input_int("registPoison", &mut i).build() {
            self.regist_poison = i as _;
        }

        let mut i: i32 = self.regist_toxic as _;
        if ui.input_int("registToxic", &mut i).build() {
            self.regist_toxic = i as _;
        }

        let mut i: i32 = self.regist_blood as _;
        if ui.input_int("registBlood", &mut i).build() {
            self.regist_blood = i as _;
        }

        let mut i: i32 = self.regist_curse as _;
        if ui.input_int("registCurse", &mut i).build() {
            self.regist_curse = i as _;
        }

        let mut i: f32 = self.fall_damage_rate;
        if ui.input_float("fallDamageRate", &mut i).build() {
            self.fall_damage_rate = i;
        }

        let mut i: f32 = self.soul_rate;
        if ui.input_float("soulRate", &mut i).build() {
            self.soul_rate = i;
        }

        let mut i: f32 = self.equip_weight_change_rate;
        if ui.input_float("equipWeightChangeRate", &mut i).build() {
            self.equip_weight_change_rate = i;
        }

        let mut i: f32 = self.all_item_weight_change_rate;
        if ui.input_float("allItemWeightChangeRate", &mut i).build() {
            self.all_item_weight_change_rate = i;
        }

        let mut i: i32 = self.soul as _;
        if ui.input_int("soul", &mut i).build() {
            self.soul = i as _;
        }

        let mut i: i32 = self.anim_id_offset as _;
        if ui.input_int("animIdOffset", &mut i).build() {
            self.anim_id_offset = i as _;
        }

        let mut i: f32 = self.have_soul_rate;
        if ui.input_float("haveSoulRate", &mut i).build() {
            self.have_soul_rate = i;
        }

        let mut i: f32 = self.target_priority;
        if ui.input_float("targetPriority", &mut i).build() {
            self.target_priority = i;
        }

        let mut i: i32 = self.sight_search_enemy_cut as _;
        if ui.input_int("sightSearchEnemyCut", &mut i).build() {
            self.sight_search_enemy_cut = i as _;
        }

        let mut i: f32 = self.hearing_search_enemy_cut;
        if ui.input_float("hearingSearchEnemyCut", &mut i).build() {
            self.hearing_search_enemy_cut = i;
        }

        let mut i: f32 = self.gravity_rate;
        if ui.input_float("gravityRate", &mut i).build() {
            self.gravity_rate = i;
        }

        let mut i: f32 = self.regist_poison_change_rate;
        if ui.input_float("registPoisonChangeRate", &mut i).build() {
            self.regist_poison_change_rate = i;
        }

        let mut i: f32 = self.regist_toxic_change_rate;
        if ui.input_float("registToxicChangeRate", &mut i).build() {
            self.regist_toxic_change_rate = i;
        }

        let mut i: f32 = self.regist_blood_change_rate;
        if ui.input_float("registBloodChangeRate", &mut i).build() {
            self.regist_blood_change_rate = i;
        }

        let mut i: f32 = self.regist_curse_change_rate;
        if ui.input_float("registCurseChangeRate", &mut i).build() {
            self.regist_curse_change_rate = i;
        }

        let mut i: f32 = self.soul_steal_rate;
        if ui.input_float("soulStealRate", &mut i).build() {
            self.soul_steal_rate = i;
        }

        let mut i: f32 = self.life_reduction_rate;
        if ui.input_float("lifeReductionRate", &mut i).build() {
            self.life_reduction_rate = i;
        }

        let mut i: f32 = self.hp_recover_rate;
        if ui.input_float("hpRecoverRate", &mut i).build() {
            self.hp_recover_rate = i;
        }

        let mut i: i32 = self.replace_sp_effect_id as _;
        if ui.input_int("replaceSpEffectId", &mut i).build() {
            self.replace_sp_effect_id = i as _;
        }

        let mut i: i32 = self.cycle_occurence_sp_effect_id as _;
        if ui.input_int("cycleOccurenceSpEffectId", &mut i).build() {
            self.cycle_occurence_sp_effect_id = i as _;
        }

        let mut i: i32 = self.atk_occurence_sp_effect_id as _;
        if ui.input_int("atkOccurenceSpEffectId", &mut i).build() {
            self.atk_occurence_sp_effect_id = i as _;
        }

        let mut i: f32 = self.guard_def_flick_power_rate;
        if ui.input_float("guardDefFlickPowerRate", &mut i).build() {
            self.guard_def_flick_power_rate = i;
        }

        let mut i: f32 = self.guard_stamina_cut_rate;
        if ui.input_float("guardStaminaCutRate", &mut i).build() {
            self.guard_stamina_cut_rate = i;
        }

        let mut i: i32 = self.ray_cast_passed_time as _;
        if ui.input_int("rayCastPassedTime", &mut i).build() {
            self.ray_cast_passed_time = i as _;
        }

        let mut i: i32 = self.change_super_armor_point as _;
        if ui.input_int("changeSuperArmorPoint", &mut i).build() {
            self.change_super_armor_point = i as _;
        }

        let mut i: i32 = self.bow_dist_rate as _;
        if ui.input_int("bowDistRate", &mut i).build() {
            self.bow_dist_rate = i as _;
        }

        let mut i: i32 = self.sp_category as _;
        if ui.input_int("spCategory", &mut i).build() {
            self.sp_category = i as _;
        }

        let mut i: i32 = self.category_priority as _;
        if ui.input_int("categoryPriority", &mut i).build() {
            self.category_priority = i as _;
        }

        let mut i: i32 = self.save_category as _;
        if ui.input_int("saveCategory", &mut i).build() {
            self.save_category = i as _;
        }

        let mut i: i32 = self.change_magic_slot as _;
        if ui.input_int("changeMagicSlot", &mut i).build() {
            self.change_magic_slot = i as _;
        }

        let mut i: i32 = self.change_miracle_slot as _;
        if ui.input_int("changeMiracleSlot", &mut i).build() {
            self.change_miracle_slot = i as _;
        }

        let mut i: i32 = self.hero_point_damage as _;
        if ui.input_int("heroPointDamage", &mut i).build() {
            self.hero_point_damage = i as _;
        }

        let mut i: i32 = self.def_flick_power as _;
        if ui.input_int("defFlickPower", &mut i).build() {
            self.def_flick_power = i as _;
        }

        let mut i: i32 = self.flick_damage_cut_rate as _;
        if ui.input_int("flickDamageCutRate", &mut i).build() {
            self.flick_damage_cut_rate = i as _;
        }

        let mut i: i32 = self.blood_damage_rate as _;
        if ui.input_int("bloodDamageRate", &mut i).build() {
            self.blood_damage_rate = i as _;
        }

        let mut i: i32 = self.dmg_lv_none as _;
        if ui.input_int("dmgLv_None", &mut i).build() {
            self.dmg_lv_none = i as _;
        }

        let mut i: i32 = self.dmg_lv_s as _;
        if ui.input_int("dmgLv_S", &mut i).build() {
            self.dmg_lv_s = i as _;
        }

        let mut i: i32 = self.dmg_lv_m as _;
        if ui.input_int("dmgLv_M", &mut i).build() {
            self.dmg_lv_m = i as _;
        }

        let mut i: i32 = self.dmg_lv_l as _;
        if ui.input_int("dmgLv_L", &mut i).build() {
            self.dmg_lv_l = i as _;
        }

        let mut i: i32 = self.dmg_lv_blow_m as _;
        if ui.input_int("dmgLv_BlowM", &mut i).build() {
            self.dmg_lv_blow_m = i as _;
        }

        let mut i: i32 = self.dmg_lv_push as _;
        if ui.input_int("dmgLv_Push", &mut i).build() {
            self.dmg_lv_push = i as _;
        }

        let mut i: i32 = self.dmg_lv_strike as _;
        if ui.input_int("dmgLv_Strike", &mut i).build() {
            self.dmg_lv_strike = i as _;
        }

        let mut i: i32 = self.dmg_lv_blow_s as _;
        if ui.input_int("dmgLv_BlowS", &mut i).build() {
            self.dmg_lv_blow_s = i as _;
        }

        let mut i: i32 = self.dmg_lv_min as _;
        if ui.input_int("dmgLv_Min", &mut i).build() {
            self.dmg_lv_min = i as _;
        }

        let mut i: i32 = self.dmg_lv_uppercut as _;
        if ui.input_int("dmgLv_Uppercut", &mut i).build() {
            self.dmg_lv_uppercut = i as _;
        }

        let mut i: i32 = self.dmg_lv_blow_ll as _;
        if ui.input_int("dmgLv_BlowLL", &mut i).build() {
            self.dmg_lv_blow_ll = i as _;
        }

        let mut i: i32 = self.dmg_lv_breath as _;
        if ui.input_int("dmgLv_Breath", &mut i).build() {
            self.dmg_lv_breath = i as _;
        }

        let mut i: i32 = self.atk_attribute as _;
        if ui.input_int("atkAttribute", &mut i).build() {
            self.atk_attribute = i as _;
        }

        let mut i: i32 = self.sp_attribute as _;
        if ui.input_int("spAttribute", &mut i).build() {
            self.sp_attribute = i as _;
        }

        let mut i: i32 = self.state_info as _;
        if ui.input_int("stateInfo", &mut i).build() {
            self.state_info = i as _;
        }

        let mut i: i32 = self.wep_param_change as _;
        if ui.input_int("wepParamChange", &mut i).build() {
            self.wep_param_change = i as _;
        }

        let mut i: i32 = self.move_type as _;
        if ui.input_int("moveType", &mut i).build() {
            self.move_type = i as _;
        }

        let mut i: i32 = self.life_reduction_type as _;
        if ui.input_int("lifeReductionType", &mut i).build() {
            self.life_reduction_type = i as _;
        }

        let mut i: i32 = self.throw_condition as _;
        if ui.input_int("throwCondition", &mut i).build() {
            self.throw_condition = i as _;
        }

        let mut i: i32 = self.add_behavior_judge_id_condition as _;
        if ui.input_int("addBehaviorJudgeId_condition", &mut i).build() {
            self.add_behavior_judge_id_condition = i as _;
        }

        let mut i: i32 = self.add_behavior_judge_id_add as _;
        if ui.input_int("addBehaviorJudgeId_add", &mut i).build() {
            self.add_behavior_judge_id_add = i as _;
        }

        let mut b: bool = self.effect_target_self();
        if ui.checkbox("effectTargetSelf", &mut b) {
            self.set_effect_target_self(b);
        }

        let mut b: bool = self.effect_target_friend();
        if ui.checkbox("effectTargetFriend", &mut b) {
            self.set_effect_target_friend(b);
        }

        let mut b: bool = self.effect_target_enemy();
        if ui.checkbox("effectTargetEnemy", &mut b) {
            self.set_effect_target_enemy(b);
        }

        let mut b: bool = self.effect_target_player();
        if ui.checkbox("effectTargetPlayer", &mut b) {
            self.set_effect_target_player(b);
        }

        let mut b: bool = self.effect_target_ai();
        if ui.checkbox("effectTargetAI", &mut b) {
            self.set_effect_target_ai(b);
        }

        let mut b: bool = self.effect_target_live();
        if ui.checkbox("effectTargetLive", &mut b) {
            self.set_effect_target_live(b);
        }

        let mut b: bool = self.effect_target_ghost();
        if ui.checkbox("effectTargetGhost", &mut b) {
            self.set_effect_target_ghost(b);
        }

        let mut b: bool = self.effect_target_white_ghost();
        if ui.checkbox("effectTargetWhiteGhost", &mut b) {
            self.set_effect_target_white_ghost(b);
        }

        let mut b: bool = self.effect_target_black_ghost();
        if ui.checkbox("effectTargetBlackGhost", &mut b) {
            self.set_effect_target_black_ghost(b);
        }

        let mut b: bool = self.effect_target_attacker();
        if ui.checkbox("effectTargetAttacker", &mut b) {
            self.set_effect_target_attacker(b);
        }

        let mut b: bool = self.disp_icon_nonactive();
        if ui.checkbox("dispIconNonactive", &mut b) {
            self.set_disp_icon_nonactive(b);
        }

        let mut b: bool = self.use_sp_effect_effect();
        if ui.checkbox("useSpEffectEffect", &mut b) {
            self.set_use_sp_effect_effect(b);
        }

        let mut b: bool = self.b_adjust_magic_ability();
        if ui.checkbox("bAdjustMagicAbility", &mut b) {
            self.set_b_adjust_magic_ability(b);
        }

        let mut b: bool = self.b_adjust_faith_ability();
        if ui.checkbox("bAdjustFaithAbility", &mut b) {
            self.set_b_adjust_faith_ability(b);
        }

        let mut b: bool = self.b_game_clear_bonus();
        if ui.checkbox("bGameClearBonus", &mut b) {
            self.set_b_game_clear_bonus(b);
        }

        let mut b: bool = self.mag_param_change();
        if ui.checkbox("magParamChange", &mut b) {
            self.set_mag_param_change(b);
        }

        let mut b: bool = self.miracle_param_change();
        if ui.checkbox("miracleParamChange", &mut b) {
            self.set_miracle_param_change(b);
        }

        let mut b: bool = self.clear_soul();
        if ui.checkbox("clearSoul", &mut b) {
            self.set_clear_soul(b);
        }

        let mut b: bool = self.request_sos();
        if ui.checkbox("requestSos", &mut b) {
            self.set_request_sos(b);
        }

        let mut b: bool = self.request_black_sos();
        if ui.checkbox("requestBlackSos", &mut b) {
            self.set_request_black_sos(b);
        }

        let mut b: bool = self.request_force_join_black_sos();
        if ui.checkbox("requestForceJoinBlackSos", &mut b) {
            self.set_request_force_join_black_sos(b);
        }

        let mut b: bool = self.request_kick_session();
        if ui.checkbox("requestKickSession", &mut b) {
            self.set_request_kick_session(b);
        }

        let mut b: bool = self.request_leave_session();
        if ui.checkbox("requestLeaveSession", &mut b) {
            self.set_request_leave_session(b);
        }

        let mut b: bool = self.request_npc_invade();
        if ui.checkbox("requestNpcInvade", &mut b) {
            self.set_request_npc_invade(b);
        }

        let mut b: bool = self.no_dead();
        if ui.checkbox("noDead", &mut b) {
            self.set_no_dead(b);
        }

        let mut b: bool = self.b_curr_hpindepende_max_hp();
        if ui.checkbox("bCurrHPIndependeMaxHP", &mut b) {
            self.set_b_curr_hpindepende_max_hp(b);
        }

        let mut b: bool = self.corrosion_ignore();
        if ui.checkbox("corrosionIgnore", &mut b) {
            self.set_corrosion_ignore(b);
        }

        let mut b: bool = self.sight_search_cut_ignore();
        if ui.checkbox("sightSearchCutIgnore", &mut b) {
            self.set_sight_search_cut_ignore(b);
        }

        let mut b: bool = self.hearing_search_cut_ignore();
        if ui.checkbox("hearingSearchCutIgnore", &mut b) {
            self.set_hearing_search_cut_ignore(b);
        }

        let mut b: bool = self.anti_magic_ignore();
        if ui.checkbox("antiMagicIgnore", &mut b) {
            self.set_anti_magic_ignore(b);
        }

        let mut b: bool = self.fake_target_ignore();
        if ui.checkbox("fakeTargetIgnore", &mut b) {
            self.set_fake_target_ignore(b);
        }

        let mut b: bool = self.fake_target_ignore_undead();
        if ui.checkbox("fakeTargetIgnoreUndead", &mut b) {
            self.set_fake_target_ignore_undead(b);
        }

        let mut b: bool = self.fake_target_ignore_animal();
        if ui.checkbox("fakeTargetIgnoreAnimal", &mut b) {
            self.set_fake_target_ignore_animal(b);
        }

        let mut b: bool = self.gravity_ignore();
        if ui.checkbox("gravityIgnore", &mut b) {
            self.set_gravity_ignore(b);
        }

        let mut b: bool = self.disable_poison();
        if ui.checkbox("disablePoison", &mut b) {
            self.set_disable_poison(b);
        }

        let mut b: bool = self.disable_toxic();
        if ui.checkbox("disableToxic", &mut b) {
            self.set_disable_toxic(b);
        }

        let mut b: bool = self.disable_blood();
        if ui.checkbox("disableBlood", &mut b) {
            self.set_disable_blood(b);
        }

        let mut b: bool = self.disable_curse();
        if ui.checkbox("disableCurse", &mut b) {
            self.set_disable_curse(b);
        }

        let mut b: bool = self.enable_charm();
        if ui.checkbox("enableCharm", &mut b) {
            self.set_enable_charm(b);
        }

        let mut b: bool = self.enable_life_time();
        if ui.checkbox("enableLifeTime", &mut b) {
            self.set_enable_life_time(b);
        }

        let mut b: bool = self.has_target();
        if ui.checkbox("hasTarget", &mut b) {
            self.set_has_target(b);
        }

        let mut b: bool = self.is_fire_damage_cancel();
        if ui.checkbox("isFireDamageCancel", &mut b) {
            self.set_is_fire_damage_cancel(b);
        }

        let mut b: bool = self.is_extend_sp_effect_life();
        if ui.checkbox("isExtendSpEffectLife", &mut b) {
            self.set_is_extend_sp_effect_life(b);
        }

        let mut b: bool = self.request_leave_coliseum_session();
        if ui.checkbox("requestLeaveColiseumSession", &mut b) {
            self.set_request_leave_coliseum_session(b);
        }

        let mut b: bool = self.disable_frost();
        if ui.checkbox("disableFrost", &mut b) {
            self.set_disable_frost(b);
        }

        let mut b: bool = self.charge_attack_param_change();
        if ui.checkbox("chargeAttackParamChange", &mut b) {
            self.set_charge_attack_param_change(b);
        }

        let mut b: bool = self.throw_attack_param_change();
        if ui.checkbox("throwAttackParamChange", &mut b) {
            self.set_throw_attack_param_change(b);
        }

        let mut b: bool = self.enable_equip_slot_check();
        if ui.checkbox("enableEquipSlotCheck", &mut b) {
            self.set_enable_equip_slot_check(b);
        }

        let mut b: bool = self.vow_type0();
        if ui.checkbox("vowType0", &mut b) {
            self.set_vow_type0(b);
        }

        let mut b: bool = self.vow_type1();
        if ui.checkbox("vowType1", &mut b) {
            self.set_vow_type1(b);
        }

        let mut b: bool = self.vow_type2();
        if ui.checkbox("vowType2", &mut b) {
            self.set_vow_type2(b);
        }

        let mut b: bool = self.vow_type3();
        if ui.checkbox("vowType3", &mut b) {
            self.set_vow_type3(b);
        }

        let mut b: bool = self.vow_type4();
        if ui.checkbox("vowType4", &mut b) {
            self.set_vow_type4(b);
        }

        let mut b: bool = self.vow_type5();
        if ui.checkbox("vowType5", &mut b) {
            self.set_vow_type5(b);
        }

        let mut b: bool = self.vow_type6();
        if ui.checkbox("vowType6", &mut b) {
            self.set_vow_type6(b);
        }

        let mut b: bool = self.vow_type7();
        if ui.checkbox("vowType7", &mut b) {
            self.set_vow_type7(b);
        }

        let mut b: bool = self.vow_type8();
        if ui.checkbox("vowType8", &mut b) {
            self.set_vow_type8(b);
        }

        let mut b: bool = self.vow_type9();
        if ui.checkbox("vowType9", &mut b) {
            self.set_vow_type9(b);
        }

        let mut b: bool = self.vow_type10();
        if ui.checkbox("vowType10", &mut b) {
            self.set_vow_type10(b);
        }

        let mut b: bool = self.vow_type11();
        if ui.checkbox("vowType11", &mut b) {
            self.set_vow_type11(b);
        }

        let mut b: bool = self.vow_type12();
        if ui.checkbox("vowType12", &mut b) {
            self.set_vow_type12(b);
        }

        let mut b: bool = self.vow_type13();
        if ui.checkbox("vowType13", &mut b) {
            self.set_vow_type13(b);
        }

        let mut b: bool = self.vow_type14();
        if ui.checkbox("vowType14", &mut b) {
            self.set_vow_type14(b);
        }

        let mut b: bool = self.vow_type15();
        if ui.checkbox("vowType15", &mut b) {
            self.set_vow_type15(b);
        }

        let mut i: i32 = self.damage_change_state as _;
        if ui.input_int("DamageChangeState", &mut i).build() {
            self.damage_change_state = i as _;
        }

        let mut i: f32 = self.unk1;
        if ui.input_float("Unk1", &mut i).build() {
            self.unk1 = i;
        }

        let mut b: bool = self.effect_target_oppose_target();
        if ui.checkbox("effectTargetOpposeTarget", &mut b) {
            self.set_effect_target_oppose_target(b);
        }

        let mut b: bool = self.effect_target_friendly_target();
        if ui.checkbox("effectTargetFriendlyTarget", &mut b) {
            self.set_effect_target_friendly_target(b);
        }

        let mut b: bool = self.effect_target_self_target();
        if ui.checkbox("effectTargetSelfTarget", &mut b) {
            self.set_effect_target_self_target(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut b: bool = self.unk6();
        if ui.checkbox("Unk6", &mut b) {
            self.set_unk6(b);
        }

        let mut i: i32 = self.unk7 as _;
        if ui.input_int("Unk7", &mut i).build() {
            self.unk7 = i as _;
        }

        let mut i: i32 = self.unk8 as _;
        if ui.input_int("Unk8", &mut i).build() {
            self.unk8 = i as _;
        }

        let mut i: i32 = self.effect_vfx0 as _;
        if ui.input_int("EffectVfx0", &mut i).build() {
            self.effect_vfx0 = i as _;
        }

        let mut i: i32 = self.state_sp_effect0 as _;
        if ui.input_int("stateSpEffect0", &mut i).build() {
            self.state_sp_effect0 = i as _;
        }

        let mut i: i32 = self.state_sp_effect1 as _;
        if ui.input_int("stateSpEffect1", &mut i).build() {
            self.state_sp_effect1 = i as _;
        }

        let mut i: i32 = self.state_sp_effect2 as _;
        if ui.input_int("stateSpEffect2", &mut i).build() {
            self.state_sp_effect2 = i as _;
        }

        let mut i: i32 = self.state_sp_effect3 as _;
        if ui.input_int("stateSpEffect3", &mut i).build() {
            self.state_sp_effect3 = i as _;
        }

        let mut i: i32 = self.stability_val as _;
        if ui.input_int("stabilityVal", &mut i).build() {
            self.stability_val = i as _;
        }

        let mut i: i32 = self.unk9 as _;
        if ui.input_int("Unk9", &mut i).build() {
            self.unk9 = i as _;
        }

        let mut i: i32 = self.unk10 as _;
        if ui.input_int("Unk10", &mut i).build() {
            self.unk10 = i as _;
        }

        let mut i: i32 = self.unk11 as _;
        if ui.input_int("Unk11", &mut i).build() {
            self.unk11 = i as _;
        }

        let mut i: i32 = self.effect_vfx1 as _;
        if ui.input_int("EffectVfx1", &mut i).build() {
            self.effect_vfx1 = i as _;
        }

        let mut i: i32 = self.effect_vfx2 as _;
        if ui.input_int("EffectVfx2", &mut i).build() {
            self.effect_vfx2 = i as _;
        }

        let mut i: i32 = self.effect_vfx3 as _;
        if ui.input_int("EffectVfx3", &mut i).build() {
            self.effect_vfx3 = i as _;
        }

        let mut i: i32 = self.effect_vfx4 as _;
        if ui.input_int("EffectVfx4", &mut i).build() {
            self.effect_vfx4 = i as _;
        }

        let mut i: i32 = self.effect_vfx5 as _;
        if ui.input_int("EffectVfx5", &mut i).build() {
            self.effect_vfx5 = i as _;
        }

        let mut i: i32 = self.effect_vfx6 as _;
        if ui.input_int("EffectVfx6", &mut i).build() {
            self.effect_vfx6 = i as _;
        }

        let mut i: i32 = self.effect_vfx7 as _;
        if ui.input_int("EffectVfx7", &mut i).build() {
            self.effect_vfx7 = i as _;
        }

        let mut i: i32 = self.regist_frost as _;
        if ui.input_int("registFrost", &mut i).build() {
            self.regist_frost = i as _;
        }

        let mut i: i32 = self.unk12 as _;
        if ui.input_int("Unk12", &mut i).build() {
            self.unk12 = i as _;
        }

        let mut i: i32 = self.unk13 as _;
        if ui.input_int("Unk13", &mut i).build() {
            self.unk13 = i as _;
        }

        let mut i: i32 = self.unk14 as _;
        if ui.input_int("Unk14", &mut i).build() {
            self.unk14 = i as _;
        }

        let mut i: i32 = self.unk15 as _;
        if ui.input_int("Unk15", &mut i).build() {
            self.unk15 = i as _;
        }

        let mut i: f32 = self.poise_rate;
        if ui.input_float("poiseRate", &mut i).build() {
            self.poise_rate = i;
        }

        let mut i: f32 = self.phys_rate;
        if ui.input_float("physRate", &mut i).build() {
            self.phys_rate = i;
        }

        let mut i: f32 = self.magic_rate;
        if ui.input_float("magicRate", &mut i).build() {
            self.magic_rate = i;
        }

        let mut i: f32 = self.fire_rate;
        if ui.input_float("fireRate", &mut i).build() {
            self.fire_rate = i;
        }

        let mut i: f32 = self.thunder_rate;
        if ui.input_float("thunderRate", &mut i).build() {
            self.thunder_rate = i;
        }

        let mut i: f32 = self.dark_rate;
        if ui.input_float("darkRate", &mut i).build() {
            self.dark_rate = i;
        }

        let mut i: f32 = self.stamina_rate;
        if ui.input_float("staminaRate", &mut i).build() {
            self.stamina_rate = i;
        }

        let mut i: f32 = self.dark_damage_cut_rate;
        if ui.input_float("darkDamageCutRate", &mut i).build() {
            self.dark_damage_cut_rate = i;
        }

        let mut i: f32 = self.dark_def_rate;
        if ui.input_float("darkDefRate", &mut i).build() {
            self.dark_def_rate = i;
        }

        let mut i: f32 = self.unk16;
        if ui.input_float("Unk16", &mut i).build() {
            self.unk16 = i;
        }

        let mut i: f32 = self.unk17;
        if ui.input_float("Unk17", &mut i).build() {
            self.unk17 = i;
        }

        let mut i: f32 = self.dark_attack_power_rate;
        if ui.input_float("darkAttackPowerRate", &mut i).build() {
            self.dark_attack_power_rate = i;
        }

        let mut i: i32 = self.dark_atk_power as _;
        if ui.input_int("darkAtkPower", &mut i).build() {
            self.dark_atk_power = i as _;
        }

        let mut i: f32 = self.unk18;
        if ui.input_float("Unk18", &mut i).build() {
            self.unk18 = i;
        }

        let mut i: i32 = self.unk19 as _;
        if ui.input_int("Unk19", &mut i).build() {
            self.unk19 = i as _;
        }

        let mut i: f32 = self.condition_max_hp;
        if ui.input_float("conditionMaxHp", &mut i).build() {
            self.condition_max_hp = i;
        }

        let mut i: f32 = self.unk20;
        if ui.input_float("Unk20", &mut i).build() {
            self.unk20 = i;
        }

        let mut i: f32 = self.drop_rate;
        if ui.input_float("dropRate", &mut i).build() {
            self.drop_rate = i;
        }

        let mut i: f32 = self.unk21;
        if ui.input_float("Unk21", &mut i).build() {
            self.unk21 = i;
        }

        let mut i: f32 = self.poison_resist_change;
        if ui.input_float("PoisonResistChange", &mut i).build() {
            self.poison_resist_change = i;
        }

        let mut i: f32 = self.toxic_resist_change;
        if ui.input_float("ToxicResistChange", &mut i).build() {
            self.toxic_resist_change = i;
        }

        let mut i: f32 = self.bleed_resist_change;
        if ui.input_float("BleedResistChange", &mut i).build() {
            self.bleed_resist_change = i;
        }

        let mut i: f32 = self.curse_resist_change;
        if ui.input_float("CurseResistChange", &mut i).build() {
            self.curse_resist_change = i;
        }

        let mut i: f32 = self.frost_resist_change;
        if ui.input_float("FrostResistChange", &mut i).build() {
            self.frost_resist_change = i;
        }

        let mut i: f32 = self.unk_damage_rate0;
        if ui.input_float("UnkDamageRate0", &mut i).build() {
            self.unk_damage_rate0 = i;
        }

        let mut i: f32 = self.unk_damage_rate1;
        if ui.input_float("UnkDamageRate1", &mut i).build() {
            self.unk_damage_rate1 = i;
        }

        let mut i: f32 = self.unk_damage_rate2;
        if ui.input_float("UnkDamageRate2", &mut i).build() {
            self.unk_damage_rate2 = i;
        }

        let mut i: f32 = self.unk_damage_rate3;
        if ui.input_float("UnkDamageRate3", &mut i).build() {
            self.unk_damage_rate3 = i;
        }

        let mut i: f32 = self.poison_atk_rate;
        if ui.input_float("poisonAtkRate", &mut i).build() {
            self.poison_atk_rate = i;
        }

        let mut i: f32 = self.toxic_atk_rate;
        if ui.input_float("toxicAtkRate", &mut i).build() {
            self.toxic_atk_rate = i;
        }

        let mut i: f32 = self.bleed_atk_rate;
        if ui.input_float("bleedAtkRate", &mut i).build() {
            self.bleed_atk_rate = i;
        }

        let mut i: f32 = self.toxic_atk_rate_0;
        if ui.input_float("toxicAtkRate_0", &mut i).build() {
            self.toxic_atk_rate_0 = i;
        }

        let mut i: f32 = self.unk22;
        if ui.input_float("Unk22", &mut i).build() {
            self.unk22 = i;
        }

        let mut i: f32 = self.slash_sp_attack_rate;
        if ui.input_float("slashSpAttackRate", &mut i).build() {
            self.slash_sp_attack_rate = i;
        }

        let mut i: f32 = self.blow_sp_attack_rate;
        if ui.input_float("blowSpAttackRate", &mut i).build() {
            self.blow_sp_attack_rate = i;
        }

        let mut i: f32 = self.thrust_sp_attack_rate;
        if ui.input_float("thrustSpAttackRate", &mut i).build() {
            self.thrust_sp_attack_rate = i;
        }

        let mut i: f32 = self.phys_sp_attack_rate;
        if ui.input_float("physSpAttackRate", &mut i).build() {
            self.phys_sp_attack_rate = i;
        }

        let mut i: f32 = self.magic_sp_attack_rate;
        if ui.input_float("magicSpAttackRate", &mut i).build() {
            self.magic_sp_attack_rate = i;
        }

        let mut i: f32 = self.fire_sp_attack_rate;
        if ui.input_float("fireSpAttackRate", &mut i).build() {
            self.fire_sp_attack_rate = i;
        }

        let mut i: f32 = self.thunder_sp_attack_rate;
        if ui.input_float("ThunderSpAttackRate", &mut i).build() {
            self.thunder_sp_attack_rate = i;
        }

        let mut i: f32 = self.dark_sp_attack_rate;
        if ui.input_float("DarkSpAttackRate", &mut i).build() {
            self.dark_sp_attack_rate = i;
        }

        let mut i: i32 = self.player_base_val0 as _;
        if ui.input_int("playerBaseVal0", &mut i).build() {
            self.player_base_val0 = i as _;
        }

        let mut i: i32 = self.player_base_val1 as _;
        if ui.input_int("playerBaseVal1", &mut i).build() {
            self.player_base_val1 = i as _;
        }

        let mut i: i32 = self.player_base_val2 as _;
        if ui.input_int("playerBaseVal2", &mut i).build() {
            self.player_base_val2 = i as _;
        }

        let mut i: i32 = self.player_base_val3 as _;
        if ui.input_int("playerBaseVal3", &mut i).build() {
            self.player_base_val3 = i as _;
        }

        let mut i: i32 = self.unk23 as _;
        if ui.input_int("Unk23", &mut i).build() {
            self.unk23 = i as _;
        }

        let mut b: bool = self.unk24();
        if ui.checkbox("Unk24", &mut b) {
            self.set_unk24(b);
        }

        let mut b: bool = self.use_sp_val_correction();
        if ui.checkbox("useSpValCorrection", &mut b) {
            self.set_use_sp_val_correction(b);
        }

        let mut b: bool = self.use_different_val();
        if ui.checkbox("useDifferentVal", &mut b) {
            self.set_use_different_val(b);
        }

        let mut b: bool = self.insta_death();
        if ui.checkbox("instaDeath", &mut b) {
            self.set_insta_death(b);
        }

        let mut b: bool = self.unk25();
        if ui.checkbox("Unk25", &mut b) {
            self.set_unk25(b);
        }

        let mut b: bool = self.unk26();
        if ui.checkbox("Unk26", &mut b) {
            self.set_unk26(b);
        }

        let mut b: bool = self.unk27();
        if ui.checkbox("Unk27", &mut b) {
            self.set_unk27(b);
        }

        let mut b: bool = self.disable_multi_play_use();
        if ui.checkbox("DisableMultiPlayUse", &mut b) {
            self.set_disable_multi_play_use(b);
        }

        let mut i: i32 = self.unk28 as _;
        if ui.input_int("Unk28", &mut i).build() {
            self.unk28 = i as _;
        }

        let mut i: i32 = self.unk29 as _;
        if ui.input_int("Unk29", &mut i).build() {
            self.unk29 = i as _;
        }

        let mut i: f32 = self.unk30;
        if ui.input_float("Unk30", &mut i).build() {
            self.unk30 = i;
        }

        let mut i: f32 = self.phys_def_cut_rate_mp;
        if ui.input_float("PhysDefCutRateMP", &mut i).build() {
            self.phys_def_cut_rate_mp = i;
        }

        let mut i: f32 = self.magic_def_cut_rate_mp;
        if ui.input_float("MagicDefCutRateMP", &mut i).build() {
            self.magic_def_cut_rate_mp = i;
        }

        let mut i: f32 = self.fire_def_cut_rate_mp;
        if ui.input_float("FireDefCutRateMP", &mut i).build() {
            self.fire_def_cut_rate_mp = i;
        }

        let mut i: f32 = self.thunder_def_cut_rate_mp;
        if ui.input_float("ThunderDefCutRateMP", &mut i).build() {
            self.thunder_def_cut_rate_mp = i;
        }

        let mut i: f32 = self.dark_def_cut_rate_mp;
        if ui.input_float("DarkDefCutRateMP", &mut i).build() {
            self.dark_def_cut_rate_mp = i;
        }

        let mut i: f32 = self.phys_def_cut_rate2;
        if ui.input_float("PhysDefCutRate2", &mut i).build() {
            self.phys_def_cut_rate2 = i;
        }

        let mut i: f32 = self.magic_def_cut_rate2;
        if ui.input_float("MagicDefCutRate2", &mut i).build() {
            self.magic_def_cut_rate2 = i;
        }

        let mut i: f32 = self.fire_def_cut_rate2;
        if ui.input_float("FireDefCutRate2", &mut i).build() {
            self.fire_def_cut_rate2 = i;
        }

        let mut i: f32 = self.thunder_def_cut_rate2;
        if ui.input_float("ThunderDefCutRate2", &mut i).build() {
            self.thunder_def_cut_rate2 = i;
        }

        let mut i: f32 = self.dark_def_cut_rate2;
        if ui.input_float("DarkDefCutRate2", &mut i).build() {
            self.dark_def_cut_rate2 = i;
        }

        let mut i: f32 = self.unk36;
        if ui.input_float("Unk36", &mut i).build() {
            self.unk36 = i;
        }

        let mut i: f32 = self.phys_unk_rate;
        if ui.input_float("physUnkRate", &mut i).build() {
            self.phys_unk_rate = i;
        }

        let mut i: f32 = self.magic_unk_rate;
        if ui.input_float("magicUnkRate", &mut i).build() {
            self.magic_unk_rate = i;
        }

        let mut i: f32 = self.fire_unk_rate;
        if ui.input_float("fireUnkRate", &mut i).build() {
            self.fire_unk_rate = i;
        }

        let mut i: f32 = self.thunder_unk_rate;
        if ui.input_float("thunderUnkRate", &mut i).build() {
            self.thunder_unk_rate = i;
        }

        let mut i: f32 = self.dark_unk_rate;
        if ui.input_float("darkUnkRate", &mut i).build() {
            self.dark_unk_rate = i;
        }

        let mut i: f32 = self.phys_damage_rate2;
        if ui.input_float("physDamageRate2", &mut i).build() {
            self.phys_damage_rate2 = i;
        }

        let mut i: f32 = self.magic_damage_rate2;
        if ui.input_float("magicDamageRate2", &mut i).build() {
            self.magic_damage_rate2 = i;
        }

        let mut i: f32 = self.fire_damage_rate2;
        if ui.input_float("fireDamageRate2", &mut i).build() {
            self.fire_damage_rate2 = i;
        }

        let mut i: f32 = self.thunder_damage_rate2;
        if ui.input_float("thunderDamageRate2", &mut i).build() {
            self.thunder_damage_rate2 = i;
        }

        let mut i: f32 = self.dark_damage_rate2;
        if ui.input_float("darkDamageRate2", &mut i).build() {
            self.dark_damage_rate2 = i;
        }

        let mut i: f32 = self.regist_frost_change_rate;
        if ui.input_float("registFrostChangeRate", &mut i).build() {
            self.regist_frost_change_rate = i;
        }

        let mut i: i32 = self.condition_hp_change0 as _;
        if ui.input_int("ConditionHpChange0", &mut i).build() {
            self.condition_hp_change0 = i as _;
        }

        let mut i: i32 = self.condition_hp_change1 as _;
        if ui.input_int("ConditionHpChange1", &mut i).build() {
            self.condition_hp_change1 = i as _;
        }

        let mut i: i32 = self.condition_hp_change2 as _;
        if ui.input_int("ConditionHpChange2", &mut i).build() {
            self.condition_hp_change2 = i as _;
        }

        let mut i: i32 = self.unk37 as _;
        if ui.input_int("Unk37", &mut i).build() {
            self.unk37 = i as _;
        }

        let mut i: i32 = self.fake_dexterity_cast_speed as _;
        if ui.input_int("fakeDexterity_castSpeed", &mut i).build() {
            self.fake_dexterity_cast_speed = i as _;
        }

        let mut i: f32 = self.unk38;
        if ui.input_float("Unk38", &mut i).build() {
            self.unk38 = i;
        }

        let mut i: f32 = self.sword_art_mp_change_rate;
        if ui.input_float("swordArtMpChangeRate", &mut i).build() {
            self.sword_art_mp_change_rate = i;
        }

        let mut i: f32 = self.magic_mp_change_rate;
        if ui.input_float("magicMpChangeRate", &mut i).build() {
            self.magic_mp_change_rate = i;
        }

        let mut i: f32 = self.pyro_mp_change_rate;
        if ui.input_float("PyroMpChangeRate", &mut i).build() {
            self.pyro_mp_change_rate = i;
        }

        let mut i: f32 = self.miracle_mp_change_rate;
        if ui.input_float("MiracleMpChangeRate", &mut i).build() {
            self.miracle_mp_change_rate = i;
        }

        let mut i: f32 = self.sub_change_hp_rate;
        if ui.input_float("subChangeHpRate", &mut i).build() {
            self.sub_change_hp_rate = i;
        }

        let mut i: i32 = self.sub_hp_point as _;
        if ui.input_int("subHpPoint", &mut i).build() {
            self.sub_hp_point = i as _;
        }

        let mut i: f32 = self.sub_change_mp_rate;
        if ui.input_float("subChangeMpRate", &mut i).build() {
            self.sub_change_mp_rate = i;
        }

        let mut i: i32 = self.sub_mp_point as _;
        if ui.input_int("subMpPoint", &mut i).build() {
            self.sub_mp_point = i as _;
        }

        let mut i: f32 = self.sub_hp_restore_rate;
        if ui.input_float("subHpRestoreRate", &mut i).build() {
            self.sub_hp_restore_rate = i;
        }

        let mut i: f32 = self.sub_mp_restore_rate;
        if ui.input_float("subMpRestoreRate", &mut i).build() {
            self.sub_mp_restore_rate = i;
        }

        let mut i: i32 = self.death_occurence_sp_effect_id as _;
        if ui.input_int("DeathOccurenceSpEffectId", &mut i).build() {
            self.death_occurence_sp_effect_id = i as _;
        }

        let mut i: f32 = self.effect_endurance_rate;
        if ui.input_float("effectEnduranceRate", &mut i).build() {
            self.effect_endurance_rate = i;
        }

        let mut i: f32 = self.unk39;
        if ui.input_float("Unk39", &mut i).build() {
            self.unk39 = i;
        }

        let mut i: i32 = self.unk40 as _;
        if ui.input_int("Unk40", &mut i).build() {
            self.unk40 = i as _;
        }

        let mut i: i32 = self.unk41 as _;
        if ui.input_int("Unk41", &mut i).build() {
            self.unk41 = i as _;
        }

        let mut i: i32 = self.sub_sp_category as _;
        if ui.input_int("subSpCategory", &mut i).build() {
            self.sub_sp_category = i as _;
        }

        let mut i: f32 = self.unk42;
        if ui.input_float("Unk42", &mut i).build() {
            self.unk42 = i;
        }

        let mut i: i32 = self.vigor as _;
        if ui.input_int("Vigor", &mut i).build() {
            self.vigor = i as _;
        }

        let mut i: i32 = self.attunement as _;
        if ui.input_int("Attunement", &mut i).build() {
            self.attunement = i as _;
        }

        let mut i: i32 = self.endurance as _;
        if ui.input_int("Endurance", &mut i).build() {
            self.endurance = i as _;
        }

        let mut i: i32 = self.vitality as _;
        if ui.input_int("Vitality", &mut i).build() {
            self.vitality = i as _;
        }

        let mut i: i32 = self.strength as _;
        if ui.input_int("Strength", &mut i).build() {
            self.strength = i as _;
        }

        let mut i: i32 = self.dexterity as _;
        if ui.input_int("Dexterity", &mut i).build() {
            self.dexterity = i as _;
        }

        let mut i: i32 = self.intelligence as _;
        if ui.input_int("Intelligence", &mut i).build() {
            self.intelligence = i as _;
        }

        let mut i: i32 = self.faith as _;
        if ui.input_int("Faith", &mut i).build() {
            self.faith = i as _;
        }

        let mut i: i32 = self.luck as _;
        if ui.input_int("Luck", &mut i).build() {
            self.luck = i as _;
        }

        let mut i: i32 = self.human_point as _;
        if ui.input_int("HumanPoint", &mut i).build() {
            self.human_point = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct SpEffectVfxParam {
    pub midst_sfx_id: i32,
    pub midst_se_id: i32,
    pub init_sfx_id: i32,
    pub init_se_id: i32,
    pub finish_sfx_id: i32,
    pub finish_se_id: i32,
    pub camouflage_begin_dist: f32,
    pub camouflage_end_dist: f32,
    pub transform_protector_id: i32,
    pub midst_dmy_id: i16,
    pub init_dmy_id: i16,
    pub finish_dmy_id: i16,
    pub effect_type: u8,
    pub soul_param_id_for_wep_enchant1: u8,
    pub play_category: u8,
    pub play_priority: u8,
    pub bitfield0: u8,
    pub bitfield1: u8,
    pub decal_id0: i32,
    pub decal_id1: i32,
    pub soul_param_id_for_wep_enchant2: u8,
    pub sp_effect_sp0: u8,
    pub sp_effect_sp1: u8,
    pub body_protector_type: u8,
    pub sp_sfx_id0: i32,
    pub sp_sfx_id1: i32,
    pub sp_sfx_id2: i32,
    pub sp_sfx_id3: i32,
    pub sp_sfx_id4: i32,
    pub sp_sfx_id5: i32,
    pub sp_sfx_id6: i32,
    pub sp_sfx_id7: i32,
    pub sp_sfx_id8: i32,
    pub sp_sfx_id9: i32,
    pub sp_sfx_id10: i32,
    pub sp_sfx_id11: i32,
    pub sp_sfx_id12: i32,
    pub sp_sfx_id13: i32,
    pub sp_sfx_id14: i32,
    pub sp_sfx_id15: i32,
    pub unk10: u8,
    pub phantom_type: u8,
    pub camouflage_ghost: u8,
    pub unk12: u8,
    pub phantom_param_id: i32,
    pub emissive_intensity_scale: f32,
    pub unk13: f32,
    pub body_protector_val: i16,
    pub unk14: i16,
    pub cinder_intensity_scale: f32,
    pub pad1: [u8; 8],
}

impl SpEffectVfxParam {
    #[allow(unused)]
    pub fn set_exist_effect_for_large(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn exist_effect_for_large(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_exist_effect_for_soul(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn exist_effect_for_soul(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_exist_invisible_at_camouflage(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn exist_invisible_at_camouflage(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_use_camouflage(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn use_camouflage(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_invisible_at_friend_camouflage(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn invisible_at_friend_camouflage(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_add_map_area_block_offset(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn add_map_area_block_offset(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_half_camouflage(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn half_camouflage(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_full_body_protector_id(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_full_body_protector_id(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_invisible_weapon(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_invisible_weapon(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_silence(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_silence(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_gauntlet_protector_id(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_gauntlet_protector_id(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield1 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield1;
        self.bitfield1 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield1 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for SpEffectVfxParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.midst_sfx_id as _;
        if ui.input_int("midstSfxId", &mut i).build() {
            self.midst_sfx_id = i as _;
        }

        let mut i: i32 = self.midst_se_id as _;
        if ui.input_int("midstSeId", &mut i).build() {
            self.midst_se_id = i as _;
        }

        let mut i: i32 = self.init_sfx_id as _;
        if ui.input_int("InitSfxId", &mut i).build() {
            self.init_sfx_id = i as _;
        }

        let mut i: i32 = self.init_se_id as _;
        if ui.input_int("InitSeId", &mut i).build() {
            self.init_se_id = i as _;
        }

        let mut i: i32 = self.finish_sfx_id as _;
        if ui.input_int("finishSfxId", &mut i).build() {
            self.finish_sfx_id = i as _;
        }

        let mut i: i32 = self.finish_se_id as _;
        if ui.input_int("finishSeId", &mut i).build() {
            self.finish_se_id = i as _;
        }

        let mut i: f32 = self.camouflage_begin_dist;
        if ui.input_float("camouflageBeginDist", &mut i).build() {
            self.camouflage_begin_dist = i;
        }

        let mut i: f32 = self.camouflage_end_dist;
        if ui.input_float("camouflageEndDist", &mut i).build() {
            self.camouflage_end_dist = i;
        }

        let mut i: i32 = self.transform_protector_id as _;
        if ui.input_int("transformProtectorId", &mut i).build() {
            self.transform_protector_id = i as _;
        }

        let mut i: i32 = self.midst_dmy_id as _;
        if ui.input_int("midstDmyId", &mut i).build() {
            self.midst_dmy_id = i as _;
        }

        let mut i: i32 = self.init_dmy_id as _;
        if ui.input_int("initDmyId", &mut i).build() {
            self.init_dmy_id = i as _;
        }

        let mut i: i32 = self.finish_dmy_id as _;
        if ui.input_int("finishDmyId", &mut i).build() {
            self.finish_dmy_id = i as _;
        }

        let mut i: i32 = self.effect_type as _;
        if ui.input_int("effectType", &mut i).build() {
            self.effect_type = i as _;
        }

        let mut i: i32 = self.soul_param_id_for_wep_enchant1 as _;
        if ui.input_int("soulParamIdForWepEnchant1", &mut i).build() {
            self.soul_param_id_for_wep_enchant1 = i as _;
        }

        let mut i: i32 = self.play_category as _;
        if ui.input_int("playCategory", &mut i).build() {
            self.play_category = i as _;
        }

        let mut i: i32 = self.play_priority as _;
        if ui.input_int("playPriority", &mut i).build() {
            self.play_priority = i as _;
        }

        let mut b: bool = self.exist_effect_for_large();
        if ui.checkbox("existEffectForLarge", &mut b) {
            self.set_exist_effect_for_large(b);
        }

        let mut b: bool = self.exist_effect_for_soul();
        if ui.checkbox("existEffectForSoul", &mut b) {
            self.set_exist_effect_for_soul(b);
        }

        let mut b: bool = self.exist_invisible_at_camouflage();
        if ui.checkbox("existInvisibleAtCamouflage", &mut b) {
            self.set_exist_invisible_at_camouflage(b);
        }

        let mut b: bool = self.use_camouflage();
        if ui.checkbox("useCamouflage", &mut b) {
            self.set_use_camouflage(b);
        }

        let mut b: bool = self.invisible_at_friend_camouflage();
        if ui.checkbox("invisibleAtFriendCamouflage", &mut b) {
            self.set_invisible_at_friend_camouflage(b);
        }

        let mut b: bool = self.add_map_area_block_offset();
        if ui.checkbox("addMapAreaBlockOffset", &mut b) {
            self.set_add_map_area_block_offset(b);
        }

        let mut b: bool = self.half_camouflage();
        if ui.checkbox("halfCamouflage", &mut b) {
            self.set_half_camouflage(b);
        }

        let mut b: bool = self.is_full_body_protector_id();
        if ui.checkbox("isFullBodyProtectorId", &mut b) {
            self.set_is_full_body_protector_id(b);
        }

        let mut b: bool = self.is_invisible_weapon();
        if ui.checkbox("isInvisibleWeapon", &mut b) {
            self.set_is_invisible_weapon(b);
        }

        let mut b: bool = self.is_silence();
        if ui.checkbox("isSilence", &mut b) {
            self.set_is_silence(b);
        }

        let mut b: bool = self.is_gauntlet_protector_id();
        if ui.checkbox("isGauntletProtectorId", &mut b) {
            self.set_is_gauntlet_protector_id(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut i: i32 = self.decal_id0 as _;
        if ui.input_int("DecalId0", &mut i).build() {
            self.decal_id0 = i as _;
        }

        let mut i: i32 = self.decal_id1 as _;
        if ui.input_int("DecalId1", &mut i).build() {
            self.decal_id1 = i as _;
        }

        let mut i: i32 = self.soul_param_id_for_wep_enchant2 as _;
        if ui.input_int("soulParamIdForWepEnchant2", &mut i).build() {
            self.soul_param_id_for_wep_enchant2 = i as _;
        }

        let mut i: i32 = self.sp_effect_sp0 as _;
        if ui.input_int("SpEffectSp0", &mut i).build() {
            self.sp_effect_sp0 = i as _;
        }

        let mut i: i32 = self.sp_effect_sp1 as _;
        if ui.input_int("SpEffectSp1", &mut i).build() {
            self.sp_effect_sp1 = i as _;
        }

        let mut i: i32 = self.body_protector_type as _;
        if ui.input_int("bodyProtectorType", &mut i).build() {
            self.body_protector_type = i as _;
        }

        let mut i: i32 = self.sp_sfx_id0 as _;
        if ui.input_int("SpSfxId0", &mut i).build() {
            self.sp_sfx_id0 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id1 as _;
        if ui.input_int("SpSfxId1", &mut i).build() {
            self.sp_sfx_id1 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id2 as _;
        if ui.input_int("SpSfxId2", &mut i).build() {
            self.sp_sfx_id2 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id3 as _;
        if ui.input_int("SpSfxId3", &mut i).build() {
            self.sp_sfx_id3 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id4 as _;
        if ui.input_int("SpSfxId4", &mut i).build() {
            self.sp_sfx_id4 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id5 as _;
        if ui.input_int("SpSfxId5", &mut i).build() {
            self.sp_sfx_id5 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id6 as _;
        if ui.input_int("SpSfxId6", &mut i).build() {
            self.sp_sfx_id6 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id7 as _;
        if ui.input_int("SpSfxId7", &mut i).build() {
            self.sp_sfx_id7 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id8 as _;
        if ui.input_int("SpSfxId8", &mut i).build() {
            self.sp_sfx_id8 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id9 as _;
        if ui.input_int("SpSfxId9", &mut i).build() {
            self.sp_sfx_id9 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id10 as _;
        if ui.input_int("SpSfxId10", &mut i).build() {
            self.sp_sfx_id10 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id11 as _;
        if ui.input_int("SpSfxId11", &mut i).build() {
            self.sp_sfx_id11 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id12 as _;
        if ui.input_int("SpSfxId12", &mut i).build() {
            self.sp_sfx_id12 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id13 as _;
        if ui.input_int("SpSfxId13", &mut i).build() {
            self.sp_sfx_id13 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id14 as _;
        if ui.input_int("SpSfxId14", &mut i).build() {
            self.sp_sfx_id14 = i as _;
        }

        let mut i: i32 = self.sp_sfx_id15 as _;
        if ui.input_int("SpSfxId15", &mut i).build() {
            self.sp_sfx_id15 = i as _;
        }

        let mut i: i32 = self.unk10 as _;
        if ui.input_int("Unk10", &mut i).build() {
            self.unk10 = i as _;
        }

        let mut i: i32 = self.phantom_type as _;
        if ui.input_int("PhantomType", &mut i).build() {
            self.phantom_type = i as _;
        }

        let mut i: i32 = self.camouflage_ghost as _;
        if ui.input_int("CamouflageGhost", &mut i).build() {
            self.camouflage_ghost = i as _;
        }

        let mut i: i32 = self.unk12 as _;
        if ui.input_int("Unk12", &mut i).build() {
            self.unk12 = i as _;
        }

        let mut i: i32 = self.phantom_param_id as _;
        if ui.input_int("PhantomParamId", &mut i).build() {
            self.phantom_param_id = i as _;
        }

        let mut i: f32 = self.emissive_intensity_scale;
        if ui.input_float("EmissiveIntensityScale", &mut i).build() {
            self.emissive_intensity_scale = i;
        }

        let mut i: f32 = self.unk13;
        if ui.input_float("Unk13", &mut i).build() {
            self.unk13 = i;
        }

        let mut i: i32 = self.body_protector_val as _;
        if ui.input_int("bodyProtectorVal", &mut i).build() {
            self.body_protector_val = i as _;
        }

        let mut i: i32 = self.unk14 as _;
        if ui.input_int("Unk14", &mut i).build() {
            self.unk14 = i as _;
        }

        let mut i: f32 = self.cinder_intensity_scale;
        if ui.input_float("CinderIntensityScale", &mut i).build() {
            self.cinder_intensity_scale = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct SwordArtsParam {
    pub action_id: u8,
    pub action_correction: u8,
    pub reserve_art_point_type: u8,
    pub unused_field: u8,
    pub reserve_arts_point0: i8,
    pub reserve_arts_point1: i8,
    pub reserve_arts_point2: i8,
    pub reserve_arts_point3: i8,
    pub debug_text_id: i32,
    pub sub_fpcost: i16,
    pub f_pcost: i16,
    pub f_pcost_light: i16,
    pub fp_cost_strong: i16,
    pub shield_category: u8,
    pub pad1: [u8; 11],
}

impl RenderableParam for SwordArtsParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.action_id as _;
        if ui.input_int("ActionId", &mut i).build() {
            self.action_id = i as _;
        }

        let mut i: i32 = self.action_correction as _;
        if ui.input_int("ActionCorrection", &mut i).build() {
            self.action_correction = i as _;
        }

        let mut i: i32 = self.reserve_art_point_type as _;
        if ui.input_int("ReserveArtPointType", &mut i).build() {
            self.reserve_art_point_type = i as _;
        }

        let mut i: i32 = self.unused_field as _;
        if ui.input_int("UnusedField", &mut i).build() {
            self.unused_field = i as _;
        }

        let mut i: i32 = self.reserve_arts_point0 as _;
        if ui.input_int("reserveArtsPoint0", &mut i).build() {
            self.reserve_arts_point0 = i as _;
        }

        let mut i: i32 = self.reserve_arts_point1 as _;
        if ui.input_int("reserveArtsPoint1", &mut i).build() {
            self.reserve_arts_point1 = i as _;
        }

        let mut i: i32 = self.reserve_arts_point2 as _;
        if ui.input_int("reserveArtsPoint2", &mut i).build() {
            self.reserve_arts_point2 = i as _;
        }

        let mut i: i32 = self.reserve_arts_point3 as _;
        if ui.input_int("reserveArtsPoint3", &mut i).build() {
            self.reserve_arts_point3 = i as _;
        }

        let mut i: i32 = self.debug_text_id as _;
        if ui.input_int("DebugTextId", &mut i).build() {
            self.debug_text_id = i as _;
        }

        let mut i: i32 = self.sub_fpcost as _;
        if ui.input_int("subFPCost", &mut i).build() {
            self.sub_fpcost = i as _;
        }

        let mut i: i32 = self.f_pcost as _;
        if ui.input_int("FPCost", &mut i).build() {
            self.f_pcost = i as _;
        }

        let mut i: i32 = self.f_pcost_light as _;
        if ui.input_int("FPCostLight", &mut i).build() {
            self.f_pcost_light = i as _;
        }

        let mut i: i32 = self.fp_cost_strong as _;
        if ui.input_int("FpCostStrong", &mut i).build() {
            self.fp_cost_strong = i as _;
        }

        let mut i: i32 = self.shield_category as _;
        if ui.input_int("ShieldCategory", &mut i).build() {
            self.shield_category = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct TalkParam {
    pub pc_gender_female1: i32,
    pub pc_gender_male1: i32,
    pub sp_effect_id0: i32,
    pub animation_id0: i32,
    pub sp_effect_id1: i32,
    pub animation_id1: i32,
    pub sp_effect_id2: i32,
    pub animation_id2: i32,
    pub event_flag_id: i32,
    pub event_id_female: i32,
    pub event_id_male: i32,
    pub talk_time: f32,
}

impl RenderableParam for TalkParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.pc_gender_female1 as _;
        if ui.input_int("PcGenderFemale1", &mut i).build() {
            self.pc_gender_female1 = i as _;
        }

        let mut i: i32 = self.pc_gender_male1 as _;
        if ui.input_int("PcGenderMale1", &mut i).build() {
            self.pc_gender_male1 = i as _;
        }

        let mut i: i32 = self.sp_effect_id0 as _;
        if ui.input_int("SpEffectId0", &mut i).build() {
            self.sp_effect_id0 = i as _;
        }

        let mut i: i32 = self.animation_id0 as _;
        if ui.input_int("AnimationId0", &mut i).build() {
            self.animation_id0 = i as _;
        }

        let mut i: i32 = self.sp_effect_id1 as _;
        if ui.input_int("SpEffectId1", &mut i).build() {
            self.sp_effect_id1 = i as _;
        }

        let mut i: i32 = self.animation_id1 as _;
        if ui.input_int("AnimationId1", &mut i).build() {
            self.animation_id1 = i as _;
        }

        let mut i: i32 = self.sp_effect_id2 as _;
        if ui.input_int("SpEffectId2", &mut i).build() {
            self.sp_effect_id2 = i as _;
        }

        let mut i: i32 = self.animation_id2 as _;
        if ui.input_int("AnimationId2", &mut i).build() {
            self.animation_id2 = i as _;
        }

        let mut i: i32 = self.event_flag_id as _;
        if ui.input_int("EventFlagId", &mut i).build() {
            self.event_flag_id = i as _;
        }

        let mut i: i32 = self.event_id_female as _;
        if ui.input_int("EventID_Female", &mut i).build() {
            self.event_id_female = i as _;
        }

        let mut i: i32 = self.event_id_male as _;
        if ui.input_int("EventID_Male", &mut i).build() {
            self.event_id_male = i as _;
        }

        let mut i: f32 = self.talk_time;
        if ui.input_float("TalkTime", &mut i).build() {
            self.talk_time = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ThrowDirectionSfxParam {
    pub sfx_id1: i32,
    pub sfx_id2: i32,
    pub sfx_id3: i32,
    pub sfx_id4: i32,
    pub sfx_id5: i32,
    pub sfx_id6: i32,
    pub sfx_id7: i32,
    pub sfx_id8: i32,
    pub sfx_id9: i32,
    pub sfx_id10: i32,
    pub sfx_id11: i32,
    pub sfx_id12: i32,
    pub sfx_id13: i32,
    pub sfx_id14: i32,
    pub sfx_id15: i32,
    pub sfx_id16: i32,
    pub sfx_id17: i32,
    pub sfx_id18: i32,
    pub sfx_id19: i32,
    pub sfx_id20: i32,
    pub sfx_id21: i32,
    pub sfx_id22: i32,
    pub sfx_id23: i32,
    pub sfx_id24: i32,
    pub sfx_id25: i32,
    pub sfx_id26: i32,
    pub sfx_id27: i32,
    pub sfx_id28: i32,
    pub sfx_id29: i32,
    pub sfx_id30: i32,
    pub pad1: [u8; 24],
}

impl RenderableParam for ThrowDirectionSfxParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.sfx_id1 as _;
        if ui.input_int("SfxId1", &mut i).build() {
            self.sfx_id1 = i as _;
        }

        let mut i: i32 = self.sfx_id2 as _;
        if ui.input_int("SfxId2", &mut i).build() {
            self.sfx_id2 = i as _;
        }

        let mut i: i32 = self.sfx_id3 as _;
        if ui.input_int("SfxId3", &mut i).build() {
            self.sfx_id3 = i as _;
        }

        let mut i: i32 = self.sfx_id4 as _;
        if ui.input_int("SfxId4", &mut i).build() {
            self.sfx_id4 = i as _;
        }

        let mut i: i32 = self.sfx_id5 as _;
        if ui.input_int("SfxId5", &mut i).build() {
            self.sfx_id5 = i as _;
        }

        let mut i: i32 = self.sfx_id6 as _;
        if ui.input_int("SfxId6", &mut i).build() {
            self.sfx_id6 = i as _;
        }

        let mut i: i32 = self.sfx_id7 as _;
        if ui.input_int("SfxId7", &mut i).build() {
            self.sfx_id7 = i as _;
        }

        let mut i: i32 = self.sfx_id8 as _;
        if ui.input_int("SfxId8", &mut i).build() {
            self.sfx_id8 = i as _;
        }

        let mut i: i32 = self.sfx_id9 as _;
        if ui.input_int("SfxId9", &mut i).build() {
            self.sfx_id9 = i as _;
        }

        let mut i: i32 = self.sfx_id10 as _;
        if ui.input_int("SfxId10", &mut i).build() {
            self.sfx_id10 = i as _;
        }

        let mut i: i32 = self.sfx_id11 as _;
        if ui.input_int("SfxId11", &mut i).build() {
            self.sfx_id11 = i as _;
        }

        let mut i: i32 = self.sfx_id12 as _;
        if ui.input_int("SfxId12", &mut i).build() {
            self.sfx_id12 = i as _;
        }

        let mut i: i32 = self.sfx_id13 as _;
        if ui.input_int("SfxId13", &mut i).build() {
            self.sfx_id13 = i as _;
        }

        let mut i: i32 = self.sfx_id14 as _;
        if ui.input_int("SfxId14", &mut i).build() {
            self.sfx_id14 = i as _;
        }

        let mut i: i32 = self.sfx_id15 as _;
        if ui.input_int("SfxId15", &mut i).build() {
            self.sfx_id15 = i as _;
        }

        let mut i: i32 = self.sfx_id16 as _;
        if ui.input_int("SfxId16", &mut i).build() {
            self.sfx_id16 = i as _;
        }

        let mut i: i32 = self.sfx_id17 as _;
        if ui.input_int("SfxId17", &mut i).build() {
            self.sfx_id17 = i as _;
        }

        let mut i: i32 = self.sfx_id18 as _;
        if ui.input_int("SfxId18", &mut i).build() {
            self.sfx_id18 = i as _;
        }

        let mut i: i32 = self.sfx_id19 as _;
        if ui.input_int("SfxId19", &mut i).build() {
            self.sfx_id19 = i as _;
        }

        let mut i: i32 = self.sfx_id20 as _;
        if ui.input_int("SfxId20", &mut i).build() {
            self.sfx_id20 = i as _;
        }

        let mut i: i32 = self.sfx_id21 as _;
        if ui.input_int("SfxId21", &mut i).build() {
            self.sfx_id21 = i as _;
        }

        let mut i: i32 = self.sfx_id22 as _;
        if ui.input_int("SfxId22", &mut i).build() {
            self.sfx_id22 = i as _;
        }

        let mut i: i32 = self.sfx_id23 as _;
        if ui.input_int("SfxId23", &mut i).build() {
            self.sfx_id23 = i as _;
        }

        let mut i: i32 = self.sfx_id24 as _;
        if ui.input_int("SfxId24", &mut i).build() {
            self.sfx_id24 = i as _;
        }

        let mut i: i32 = self.sfx_id25 as _;
        if ui.input_int("SfxId25", &mut i).build() {
            self.sfx_id25 = i as _;
        }

        let mut i: i32 = self.sfx_id26 as _;
        if ui.input_int("SfxId26", &mut i).build() {
            self.sfx_id26 = i as _;
        }

        let mut i: i32 = self.sfx_id27 as _;
        if ui.input_int("SfxId27", &mut i).build() {
            self.sfx_id27 = i as _;
        }

        let mut i: i32 = self.sfx_id28 as _;
        if ui.input_int("SfxId28", &mut i).build() {
            self.sfx_id28 = i as _;
        }

        let mut i: i32 = self.sfx_id29 as _;
        if ui.input_int("SfxId29", &mut i).build() {
            self.sfx_id29 = i as _;
        }

        let mut i: i32 = self.sfx_id30 as _;
        if ui.input_int("SfxId30", &mut i).build() {
            self.sfx_id30 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ThrowParam {
    pub atk_chr_id: i32,
    pub def_chr_id: i32,
    pub dist: f32,
    pub diff_ang_min: f32,
    pub diff_ang_max: f32,
    pub upper_yrange: f32,
    pub lower_yrange: f32,
    pub diff_ang_my_to_def: f32,
    pub throw_type_id: i32,
    pub atk_animid: i32,
    pub def_anim_id: i32,
    pub esc_hp: i16,
    pub self_esc_cycle_time: i16,
    pub sphere_cast_radius_rate_top: i16,
    pub sphere_cast_radius_rate_low: i16,
    pub pad_type: u8,
    pub atk_enable_state: u8,
    pub atk_sorb_dmy_id: u8,
    pub def_sorb_dmy_id: u8,
    pub throw_type: u8,
    pub self_esc_cycle_int: u8,
    pub dmy_has_chr_dir_type: u8,
    pub bitfield0: u8,
    pub sub_atk_sorb_dmy_id: i16,
    pub sub_def_sorb_dmy_id: i16,
    pub dist2: f32,
    pub diff_ang_min2: f32,
    pub diff_ang_max2: f32,
    pub upper_yrange2: f32,
    pub lower_yrange2: f32,
    pub diff_ang_my_to_def2: f32,
    pub perform_dmy_id0: i32,
    pub perform_dmy_id1: i32,
    pub pad1: [u8; 32],
}

impl ThrowParam {
    #[allow(unused)]
    pub fn set_is_turn_atker(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 0;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_turn_atker(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 0;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_skip_wep_cate(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 1;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_skip_wep_cate(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 1;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_is_skip_sphere_cast(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 2;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn is_skip_sphere_cast(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 2;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk1(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 3;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk1(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 3;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk2(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 4;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk2(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 4;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk3(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 5;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk3(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 5;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk4(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 6;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk4(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 6;
        (self.bitfield0 & FIELD_INDEX) != 0
    }

    #[allow(unused)]
    pub fn set_unk5(&mut self, state: bool) {
        const FIELD_INDEX: u8 = 1 << 7;
        let val = self.bitfield0;
        self.bitfield0 = if state {
            val | FIELD_INDEX
        } else {
            val & !FIELD_INDEX
        };
    }

    #[allow(unused)]
    pub fn unk5(&mut self) -> bool {
        const FIELD_INDEX: u8 = 1 << 7;
        (self.bitfield0 & FIELD_INDEX) != 0
    }
}

impl RenderableParam for ThrowParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.atk_chr_id as _;
        if ui.input_int("AtkChrId", &mut i).build() {
            self.atk_chr_id = i as _;
        }

        let mut i: i32 = self.def_chr_id as _;
        if ui.input_int("DefChrId", &mut i).build() {
            self.def_chr_id = i as _;
        }

        let mut i: f32 = self.dist;
        if ui.input_float("Dist", &mut i).build() {
            self.dist = i;
        }

        let mut i: f32 = self.diff_ang_min;
        if ui.input_float("DiffAngMin", &mut i).build() {
            self.diff_ang_min = i;
        }

        let mut i: f32 = self.diff_ang_max;
        if ui.input_float("DiffAngMax", &mut i).build() {
            self.diff_ang_max = i;
        }

        let mut i: f32 = self.upper_yrange;
        if ui.input_float("UpperYrange", &mut i).build() {
            self.upper_yrange = i;
        }

        let mut i: f32 = self.lower_yrange;
        if ui.input_float("LowerYrange", &mut i).build() {
            self.lower_yrange = i;
        }

        let mut i: f32 = self.diff_ang_my_to_def;
        if ui.input_float("DiffAngMyToDef", &mut i).build() {
            self.diff_ang_my_to_def = i;
        }

        let mut i: i32 = self.throw_type_id as _;
        if ui.input_int("throwTypeId", &mut i).build() {
            self.throw_type_id = i as _;
        }

        let mut i: i32 = self.atk_animid as _;
        if ui.input_int("atkAnimid", &mut i).build() {
            self.atk_animid = i as _;
        }

        let mut i: i32 = self.def_anim_id as _;
        if ui.input_int("defAnimId", &mut i).build() {
            self.def_anim_id = i as _;
        }

        let mut i: i32 = self.esc_hp as _;
        if ui.input_int("escHp", &mut i).build() {
            self.esc_hp = i as _;
        }

        let mut i: i32 = self.self_esc_cycle_time as _;
        if ui.input_int("selfEscCycleTime", &mut i).build() {
            self.self_esc_cycle_time = i as _;
        }

        let mut i: i32 = self.sphere_cast_radius_rate_top as _;
        if ui.input_int("SphereCastRadiusRateTop", &mut i).build() {
            self.sphere_cast_radius_rate_top = i as _;
        }

        let mut i: i32 = self.sphere_cast_radius_rate_low as _;
        if ui.input_int("SphereCastRadiusRateLow", &mut i).build() {
            self.sphere_cast_radius_rate_low = i as _;
        }

        let mut i: i32 = self.pad_type as _;
        if ui.input_int("PadType", &mut i).build() {
            self.pad_type = i as _;
        }

        let mut i: i32 = self.atk_enable_state as _;
        if ui.input_int("AtkEnableState", &mut i).build() {
            self.atk_enable_state = i as _;
        }

        let mut i: i32 = self.atk_sorb_dmy_id as _;
        if ui.input_int("AtkSorbDmyId", &mut i).build() {
            self.atk_sorb_dmy_id = i as _;
        }

        let mut i: i32 = self.def_sorb_dmy_id as _;
        if ui.input_int("DefSorbDmyId", &mut i).build() {
            self.def_sorb_dmy_id = i as _;
        }

        let mut i: i32 = self.throw_type as _;
        if ui.input_int("ThrowType", &mut i).build() {
            self.throw_type = i as _;
        }

        let mut i: i32 = self.self_esc_cycle_int as _;
        if ui.input_int("SelfEscCycleInt", &mut i).build() {
            self.self_esc_cycle_int = i as _;
        }

        let mut i: i32 = self.dmy_has_chr_dir_type as _;
        if ui.input_int("DmyHasChrDirType", &mut i).build() {
            self.dmy_has_chr_dir_type = i as _;
        }

        let mut b: bool = self.is_turn_atker();
        if ui.checkbox("isTurnAtker", &mut b) {
            self.set_is_turn_atker(b);
        }

        let mut b: bool = self.is_skip_wep_cate();
        if ui.checkbox("isSkipWepCate", &mut b) {
            self.set_is_skip_wep_cate(b);
        }

        let mut b: bool = self.is_skip_sphere_cast();
        if ui.checkbox("isSkipSphereCast", &mut b) {
            self.set_is_skip_sphere_cast(b);
        }

        let mut b: bool = self.unk1();
        if ui.checkbox("Unk1", &mut b) {
            self.set_unk1(b);
        }

        let mut b: bool = self.unk2();
        if ui.checkbox("Unk2", &mut b) {
            self.set_unk2(b);
        }

        let mut b: bool = self.unk3();
        if ui.checkbox("Unk3", &mut b) {
            self.set_unk3(b);
        }

        let mut b: bool = self.unk4();
        if ui.checkbox("Unk4", &mut b) {
            self.set_unk4(b);
        }

        let mut b: bool = self.unk5();
        if ui.checkbox("Unk5", &mut b) {
            self.set_unk5(b);
        }

        let mut i: i32 = self.sub_atk_sorb_dmy_id as _;
        if ui.input_int("subAtkSorbDmyId", &mut i).build() {
            self.sub_atk_sorb_dmy_id = i as _;
        }

        let mut i: i32 = self.sub_def_sorb_dmy_id as _;
        if ui.input_int("subDefSorbDmyId", &mut i).build() {
            self.sub_def_sorb_dmy_id = i as _;
        }

        let mut i: f32 = self.dist2;
        if ui.input_float("Dist2", &mut i).build() {
            self.dist2 = i;
        }

        let mut i: f32 = self.diff_ang_min2;
        if ui.input_float("DiffAngMin2", &mut i).build() {
            self.diff_ang_min2 = i;
        }

        let mut i: f32 = self.diff_ang_max2;
        if ui.input_float("DiffAngMax2", &mut i).build() {
            self.diff_ang_max2 = i;
        }

        let mut i: f32 = self.upper_yrange2;
        if ui.input_float("UpperYrange2", &mut i).build() {
            self.upper_yrange2 = i;
        }

        let mut i: f32 = self.lower_yrange2;
        if ui.input_float("LowerYrange2", &mut i).build() {
            self.lower_yrange2 = i;
        }

        let mut i: f32 = self.diff_ang_my_to_def2;
        if ui.input_float("DiffAngMyToDef2", &mut i).build() {
            self.diff_ang_my_to_def2 = i;
        }

        let mut i: i32 = self.perform_dmy_id0 as _;
        if ui.input_int("performDmyId0", &mut i).build() {
            self.perform_dmy_id0 = i as _;
        }

        let mut i: i32 = self.perform_dmy_id1 as _;
        if ui.input_int("performDmyId1", &mut i).build() {
            self.perform_dmy_id1 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct ToughnessParam {
    pub toughness: f32,
    pub damage_lvl_threshold: i16,
    pub is_toughness_effective: u8,
    pub pad1: [u8; 1],
    pub sp_effect_id: i32,
    pub pad2: [u8; 20],
}

impl RenderableParam for ToughnessParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.toughness;
        if ui.input_float("Toughness", &mut i).build() {
            self.toughness = i;
        }

        let mut i: i32 = self.damage_lvl_threshold as _;
        if ui.input_int("DamageLvlThreshold", &mut i).build() {
            self.damage_lvl_threshold = i as _;
        }

        let mut i: i32 = self.is_toughness_effective as _;
        if ui.input_int("IsToughnessEffective", &mut i).build() {
            self.is_toughness_effective = i as _;
        }

        let mut i: i32 = self.sp_effect_id as _;
        if ui.input_int("SpEffectId", &mut i).build() {
            self.sp_effect_id = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct UpperArmParam {
    pub arm_z0: f32,
    pub arm_xy0: f32,
    pub arm_z1: f32,
    pub arm_xy1: f32,
    pub arm_z2: f32,
    pub arm_xy2: f32,
    pub arm_z3: f32,
    pub arm_xy3: f32,
    pub arm_z4: f32,
    pub arm_xy4: f32,
    pub arm_z5: f32,
    pub arm_xy5: f32,
    pub arm_z6: f32,
    pub arm_xy6: f32,
    pub arm_z7: f32,
    pub arm_xy7: f32,
    pub arm_z8: f32,
    pub arm_xy8: f32,
    pub arm_z9: f32,
    pub arm_xy9: f32,
    pub pad1: [u8; 48],
}

impl RenderableParam for UpperArmParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.arm_z0;
        if ui.input_float("ArmZ0", &mut i).build() {
            self.arm_z0 = i;
        }

        let mut i: f32 = self.arm_xy0;
        if ui.input_float("ArmXY0", &mut i).build() {
            self.arm_xy0 = i;
        }

        let mut i: f32 = self.arm_z1;
        if ui.input_float("ArmZ1", &mut i).build() {
            self.arm_z1 = i;
        }

        let mut i: f32 = self.arm_xy1;
        if ui.input_float("ArmXY1", &mut i).build() {
            self.arm_xy1 = i;
        }

        let mut i: f32 = self.arm_z2;
        if ui.input_float("ArmZ2", &mut i).build() {
            self.arm_z2 = i;
        }

        let mut i: f32 = self.arm_xy2;
        if ui.input_float("ArmXY2", &mut i).build() {
            self.arm_xy2 = i;
        }

        let mut i: f32 = self.arm_z3;
        if ui.input_float("ArmZ3", &mut i).build() {
            self.arm_z3 = i;
        }

        let mut i: f32 = self.arm_xy3;
        if ui.input_float("ArmXY3", &mut i).build() {
            self.arm_xy3 = i;
        }

        let mut i: f32 = self.arm_z4;
        if ui.input_float("ArmZ4", &mut i).build() {
            self.arm_z4 = i;
        }

        let mut i: f32 = self.arm_xy4;
        if ui.input_float("ArmXY4", &mut i).build() {
            self.arm_xy4 = i;
        }

        let mut i: f32 = self.arm_z5;
        if ui.input_float("ArmZ5", &mut i).build() {
            self.arm_z5 = i;
        }

        let mut i: f32 = self.arm_xy5;
        if ui.input_float("ArmXY5", &mut i).build() {
            self.arm_xy5 = i;
        }

        let mut i: f32 = self.arm_z6;
        if ui.input_float("ArmZ6", &mut i).build() {
            self.arm_z6 = i;
        }

        let mut i: f32 = self.arm_xy6;
        if ui.input_float("ArmXY6", &mut i).build() {
            self.arm_xy6 = i;
        }

        let mut i: f32 = self.arm_z7;
        if ui.input_float("ArmZ7", &mut i).build() {
            self.arm_z7 = i;
        }

        let mut i: f32 = self.arm_xy7;
        if ui.input_float("ArmXY7", &mut i).build() {
            self.arm_xy7 = i;
        }

        let mut i: f32 = self.arm_z8;
        if ui.input_float("ArmZ8", &mut i).build() {
            self.arm_z8 = i;
        }

        let mut i: f32 = self.arm_xy8;
        if ui.input_float("ArmXY8", &mut i).build() {
            self.arm_xy8 = i;
        }

        let mut i: f32 = self.arm_z9;
        if ui.input_float("ArmZ9", &mut i).build() {
            self.arm_z9 = i;
        }

        let mut i: f32 = self.arm_xy9;
        if ui.input_float("ArmXY9", &mut i).build() {
            self.arm_xy9 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct WeaponGenParam {
    pub wep_param_id: i32,
    pub gem_slot_type_0: i32,
    pub gem_gen_id0: i32,
    pub gem_slot_type_1: i32,
    pub gem_gen_id1: i32,
    pub gem_slot_type_2: i32,
    pub gem_gen_id2: i32,
    pub gem_slot_type_3: i32,
    pub gem_gen_id3: i32,
    pub gem_slot_type_4: i32,
    pub gem_gen_id4: i32,
}

impl RenderableParam for WeaponGenParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.wep_param_id as _;
        if ui.input_int("wepParamId", &mut i).build() {
            self.wep_param_id = i as _;
        }

        let mut i: i32 = self.gem_slot_type_0 as _;
        if ui.input_int("gemSlotType_0", &mut i).build() {
            self.gem_slot_type_0 = i as _;
        }

        let mut i: i32 = self.gem_gen_id0 as _;
        if ui.input_int("gemGenId0", &mut i).build() {
            self.gem_gen_id0 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_1 as _;
        if ui.input_int("gemSlotType_1", &mut i).build() {
            self.gem_slot_type_1 = i as _;
        }

        let mut i: i32 = self.gem_gen_id1 as _;
        if ui.input_int("gemGenId1", &mut i).build() {
            self.gem_gen_id1 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_2 as _;
        if ui.input_int("gemSlotType_2", &mut i).build() {
            self.gem_slot_type_2 = i as _;
        }

        let mut i: i32 = self.gem_gen_id2 as _;
        if ui.input_int("gemGenId2", &mut i).build() {
            self.gem_gen_id2 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_3 as _;
        if ui.input_int("gemSlotType_3", &mut i).build() {
            self.gem_slot_type_3 = i as _;
        }

        let mut i: i32 = self.gem_gen_id3 as _;
        if ui.input_int("gemGenId3", &mut i).build() {
            self.gem_gen_id3 = i as _;
        }

        let mut i: i32 = self.gem_slot_type_4 as _;
        if ui.input_int("gemSlotType_4", &mut i).build() {
            self.gem_slot_type_4 = i as _;
        }

        let mut i: i32 = self.gem_gen_id4 as _;
        if ui.input_int("gemGenId4", &mut i).build() {
            self.gem_gen_id4 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct WepAbsorpPosParam {
    pub shealth_time: u8,
    pub pad1: [u8; 3],
    pub one_hand_damipoly_id0: u16,
    pub one_hand_damipoly_id1: u16,
    pub both_hand_damipoly_id0: u16,
    pub shealth_damipoly_id0: u16,
    pub shealth_damipoly_id1: u16,
    pub one_hand_damipoly_id2: u16,
    pub one_hand_damipoly_id3: u16,
    pub both_hand_damipoly_id1: u16,
    pub shealth_damipoly_id2: u16,
    pub shealth_damipoly_id3: u16,
    pub one_hand_damipoly_id4: u16,
    pub one_hand_damipoly_id5: u16,
    pub both_hand_damipoly_id2: u16,
    pub shealth_damipoly_id4: u16,
    pub shealth_damipoly_id5: u16,
    pub one_hand_damipoly_id6: u16,
    pub one_hand_damipoly_id7: u16,
    pub both_hand_damipoly_id3: u16,
    pub shealth_damipoly_id6: u16,
    pub shealth_damipoly_id7: u16,
    pub unk22: u8,
    pub unk23: u8,
    pub unk24: u8,
    pub unk25: u8,
    pub both_hand_damipoly_id4: i16,
    pub both_hand_damipoly_id5: i16,
    pub both_hand_damipoly_id6: i16,
    pub both_hand_damipoly_id7: i16,
    pub unk30: u8,
    pub unk31: u8,
    pub unk32: u8,
    pub unk33: u8,
    pub unk34: u8,
    pub unk35: u8,
    pub unk36: u8,
    pub unk37: u8,
    pub unk38: u8,
    pub unk39: u8,
    pub unk40: u8,
    pub unk41: u8,
    pub unk42: u8,
    pub unk43: u8,
    pub unk44: u8,
    pub unk45: u8,
    pub unk46: u8,
    pub unk47: u8,
    pub unk48: u8,
    pub unk49: u8,
    pub unk50: u8,
    pub unk51: u8,
    pub unk52: u8,
    pub unk53: u8,
    pub pad2: [u8; 16],
}

impl RenderableParam for WepAbsorpPosParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.shealth_time as _;
        if ui.input_int("ShealthTime", &mut i).build() {
            self.shealth_time = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id0 as _;
        if ui.input_int("OneHandDamipolyId0", &mut i).build() {
            self.one_hand_damipoly_id0 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id1 as _;
        if ui.input_int("OneHandDamipolyId1", &mut i).build() {
            self.one_hand_damipoly_id1 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id0 as _;
        if ui.input_int("BothHandDamipolyId0", &mut i).build() {
            self.both_hand_damipoly_id0 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id0 as _;
        if ui.input_int("ShealthDamipolyId0", &mut i).build() {
            self.shealth_damipoly_id0 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id1 as _;
        if ui.input_int("ShealthDamipolyId1", &mut i).build() {
            self.shealth_damipoly_id1 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id2 as _;
        if ui.input_int("OneHandDamipolyId2", &mut i).build() {
            self.one_hand_damipoly_id2 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id3 as _;
        if ui.input_int("OneHandDamipolyId3", &mut i).build() {
            self.one_hand_damipoly_id3 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id1 as _;
        if ui.input_int("BothHandDamipolyId1", &mut i).build() {
            self.both_hand_damipoly_id1 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id2 as _;
        if ui.input_int("ShealthDamipolyId2", &mut i).build() {
            self.shealth_damipoly_id2 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id3 as _;
        if ui.input_int("ShealthDamipolyId3", &mut i).build() {
            self.shealth_damipoly_id3 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id4 as _;
        if ui.input_int("OneHandDamipolyId4", &mut i).build() {
            self.one_hand_damipoly_id4 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id5 as _;
        if ui.input_int("OneHandDamipolyId5", &mut i).build() {
            self.one_hand_damipoly_id5 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id2 as _;
        if ui.input_int("BothHandDamipolyId2", &mut i).build() {
            self.both_hand_damipoly_id2 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id4 as _;
        if ui.input_int("ShealthDamipolyId4", &mut i).build() {
            self.shealth_damipoly_id4 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id5 as _;
        if ui.input_int("ShealthDamipolyId5", &mut i).build() {
            self.shealth_damipoly_id5 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id6 as _;
        if ui.input_int("OneHandDamipolyId6", &mut i).build() {
            self.one_hand_damipoly_id6 = i as _;
        }

        let mut i: i32 = self.one_hand_damipoly_id7 as _;
        if ui.input_int("OneHandDamipolyId7", &mut i).build() {
            self.one_hand_damipoly_id7 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id3 as _;
        if ui.input_int("BothHandDamipolyId3", &mut i).build() {
            self.both_hand_damipoly_id3 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id6 as _;
        if ui.input_int("ShealthDamipolyId6", &mut i).build() {
            self.shealth_damipoly_id6 = i as _;
        }

        let mut i: i32 = self.shealth_damipoly_id7 as _;
        if ui.input_int("ShealthDamipolyId7", &mut i).build() {
            self.shealth_damipoly_id7 = i as _;
        }

        let mut i: i32 = self.unk22 as _;
        if ui.input_int("Unk22", &mut i).build() {
            self.unk22 = i as _;
        }

        let mut i: i32 = self.unk23 as _;
        if ui.input_int("Unk23", &mut i).build() {
            self.unk23 = i as _;
        }

        let mut i: i32 = self.unk24 as _;
        if ui.input_int("Unk24", &mut i).build() {
            self.unk24 = i as _;
        }

        let mut i: i32 = self.unk25 as _;
        if ui.input_int("Unk25", &mut i).build() {
            self.unk25 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id4 as _;
        if ui.input_int("BothHandDamipolyId4", &mut i).build() {
            self.both_hand_damipoly_id4 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id5 as _;
        if ui.input_int("BothHandDamipolyId5", &mut i).build() {
            self.both_hand_damipoly_id5 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id6 as _;
        if ui.input_int("BothHandDamipolyId6", &mut i).build() {
            self.both_hand_damipoly_id6 = i as _;
        }

        let mut i: i32 = self.both_hand_damipoly_id7 as _;
        if ui.input_int("BothHandDamipolyId7", &mut i).build() {
            self.both_hand_damipoly_id7 = i as _;
        }

        let mut i: i32 = self.unk30 as _;
        if ui.input_int("Unk30", &mut i).build() {
            self.unk30 = i as _;
        }

        let mut i: i32 = self.unk31 as _;
        if ui.input_int("Unk31", &mut i).build() {
            self.unk31 = i as _;
        }

        let mut i: i32 = self.unk32 as _;
        if ui.input_int("Unk32", &mut i).build() {
            self.unk32 = i as _;
        }

        let mut i: i32 = self.unk33 as _;
        if ui.input_int("Unk33", &mut i).build() {
            self.unk33 = i as _;
        }

        let mut i: i32 = self.unk34 as _;
        if ui.input_int("Unk34", &mut i).build() {
            self.unk34 = i as _;
        }

        let mut i: i32 = self.unk35 as _;
        if ui.input_int("Unk35", &mut i).build() {
            self.unk35 = i as _;
        }

        let mut i: i32 = self.unk36 as _;
        if ui.input_int("Unk36", &mut i).build() {
            self.unk36 = i as _;
        }

        let mut i: i32 = self.unk37 as _;
        if ui.input_int("Unk37", &mut i).build() {
            self.unk37 = i as _;
        }

        let mut i: i32 = self.unk38 as _;
        if ui.input_int("Unk38", &mut i).build() {
            self.unk38 = i as _;
        }

        let mut i: i32 = self.unk39 as _;
        if ui.input_int("Unk39", &mut i).build() {
            self.unk39 = i as _;
        }

        let mut i: i32 = self.unk40 as _;
        if ui.input_int("Unk40", &mut i).build() {
            self.unk40 = i as _;
        }

        let mut i: i32 = self.unk41 as _;
        if ui.input_int("Unk41", &mut i).build() {
            self.unk41 = i as _;
        }

        let mut i: i32 = self.unk42 as _;
        if ui.input_int("Unk42", &mut i).build() {
            self.unk42 = i as _;
        }

        let mut i: i32 = self.unk43 as _;
        if ui.input_int("Unk43", &mut i).build() {
            self.unk43 = i as _;
        }

        let mut i: i32 = self.unk44 as _;
        if ui.input_int("Unk44", &mut i).build() {
            self.unk44 = i as _;
        }

        let mut i: i32 = self.unk45 as _;
        if ui.input_int("Unk45", &mut i).build() {
            self.unk45 = i as _;
        }

        let mut i: i32 = self.unk46 as _;
        if ui.input_int("Unk46", &mut i).build() {
            self.unk46 = i as _;
        }

        let mut i: i32 = self.unk47 as _;
        if ui.input_int("Unk47", &mut i).build() {
            self.unk47 = i as _;
        }

        let mut i: i32 = self.unk48 as _;
        if ui.input_int("Unk48", &mut i).build() {
            self.unk48 = i as _;
        }

        let mut i: i32 = self.unk49 as _;
        if ui.input_int("Unk49", &mut i).build() {
            self.unk49 = i as _;
        }

        let mut i: i32 = self.unk50 as _;
        if ui.input_int("Unk50", &mut i).build() {
            self.unk50 = i as _;
        }

        let mut i: i32 = self.unk51 as _;
        if ui.input_int("Unk51", &mut i).build() {
            self.unk51 = i as _;
        }

        let mut i: i32 = self.unk52 as _;
        if ui.input_int("Unk52", &mut i).build() {
            self.unk52 = i as _;
        }

        let mut i: i32 = self.unk53 as _;
        if ui.input_int("Unk53", &mut i).build() {
            self.unk53 = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct WetAspectParam {
    pub r1: u8,
    pub g1: u8,
    pub b1: u8,
    pub pad1: [u8; 1],
    pub alpha1: f32,
    pub r2: u8,
    pub g2: u8,
    pub b2: u8,
    pub pad2: [u8; 1],
    pub alpha2: f32,
    pub wet_rate: f32,
    pub wet_correction: u8,
    pub pad3: [u8; 11],
}

impl RenderableParam for WetAspectParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.r1 as _;
        if ui.input_int("R1", &mut i).build() {
            self.r1 = i as _;
        }

        let mut i: i32 = self.g1 as _;
        if ui.input_int("G1", &mut i).build() {
            self.g1 = i as _;
        }

        let mut i: i32 = self.b1 as _;
        if ui.input_int("B1", &mut i).build() {
            self.b1 = i as _;
        }

        let mut i: f32 = self.alpha1;
        if ui.input_float("Alpha1", &mut i).build() {
            self.alpha1 = i;
        }

        let mut i: i32 = self.r2 as _;
        if ui.input_int("R2", &mut i).build() {
            self.r2 = i as _;
        }

        let mut i: i32 = self.g2 as _;
        if ui.input_int("G2", &mut i).build() {
            self.g2 = i as _;
        }

        let mut i: i32 = self.b2 as _;
        if ui.input_int("B2", &mut i).build() {
            self.b2 = i as _;
        }

        let mut i: f32 = self.alpha2;
        if ui.input_float("Alpha2", &mut i).build() {
            self.alpha2 = i;
        }

        let mut i: f32 = self.wet_rate;
        if ui.input_float("WetRate", &mut i).build() {
            self.wet_rate = i;
        }

        let mut i: i32 = self.wet_correction as _;
        if ui.input_int("WetCorrection", &mut i).build() {
            self.wet_correction = i as _;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct WhiteSignCoolTimeParam {
    pub time_limit0: f32,
    pub time_limit1: f32,
    pub time_limit2: f32,
    pub time_limit3: f32,
}

impl RenderableParam for WhiteSignCoolTimeParam {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: f32 = self.time_limit0;
        if ui.input_float("timeLimit0", &mut i).build() {
            self.time_limit0 = i;
        }

        let mut i: f32 = self.time_limit1;
        if ui.input_float("timeLimit1", &mut i).build() {
            self.time_limit1 = i;
        }

        let mut i: f32 = self.time_limit2;
        if ui.input_float("timeLimit2", &mut i).build() {
            self.time_limit2 = i;
        }

        let mut i: f32 = self.time_limit3;
        if ui.input_float("timeLimit3", &mut i).build() {
            self.time_limit3 = i;
        }
    }
}

#[derive(Debug)]
#[repr(C)]
#[allow(non_camel_case_types)]
pub struct Wind {
    pub common_capsule_begin_dmy_id: i16,
    pub common_capsule_end_dmy_id: i16,
    pub common_capsule_radius: f32,
    pub pad1: [u8; 120],
    pub pad2: [u8; 3],
    pub sfx_dir_pitch_min: f32,
    pub sfx_dir_pitch_max: f32,
    pub sfx_dir_yaw_min: f32,
    pub sfx_dir_yaw_max: f32,
    pub sfx_cycle_min: f32,
    pub sfx_cycle_max: f32,
    pub sfx_speed_min: f32,
    pub sfx_speed_max: f32,
    pub sfx_maximum_drag: f32,
    pub pad3: [u8; 88],
    pub pad4: [u8; 3],
    pub cloth_dir_pitch_min: f32,
    pub cloth_dir_pitch_max: f32,
    pub cloth_dir_yaw_min: f32,
    pub cloth_dir_yaw_max: f32,
    pub cloth_cycle_min: f32,
    pub cloth_cycle_max: f32,
    pub cloth_speed_min: f32,
    pub cloth_speed_max: f32,
    pub cloth_maximum_drag: f32,
    pub pad5: [u8; 88],
}

impl RenderableParam for Wind {
    fn render_imgui(&mut self, ui: &imgui::Ui) {
        let mut i: i32 = self.common_capsule_begin_dmy_id as _;
        if ui.input_int("commonCapsuleBeginDmyId", &mut i).build() {
            self.common_capsule_begin_dmy_id = i as _;
        }

        let mut i: i32 = self.common_capsule_end_dmy_id as _;
        if ui.input_int("commonCapsuleEndDmyId", &mut i).build() {
            self.common_capsule_end_dmy_id = i as _;
        }

        let mut i: f32 = self.common_capsule_radius;
        if ui.input_float("commonCapsuleRadius", &mut i).build() {
            self.common_capsule_radius = i;
        }

        let mut i: f32 = self.sfx_dir_pitch_min;
        if ui.input_float("SfxDirPitchMin", &mut i).build() {
            self.sfx_dir_pitch_min = i;
        }

        let mut i: f32 = self.sfx_dir_pitch_max;
        if ui.input_float("SfxDirPitchMax", &mut i).build() {
            self.sfx_dir_pitch_max = i;
        }

        let mut i: f32 = self.sfx_dir_yaw_min;
        if ui.input_float("SfxDirYawMin", &mut i).build() {
            self.sfx_dir_yaw_min = i;
        }

        let mut i: f32 = self.sfx_dir_yaw_max;
        if ui.input_float("SfxDirYawMax", &mut i).build() {
            self.sfx_dir_yaw_max = i;
        }

        let mut i: f32 = self.sfx_cycle_min;
        if ui.input_float("SfxCycleMin", &mut i).build() {
            self.sfx_cycle_min = i;
        }

        let mut i: f32 = self.sfx_cycle_max;
        if ui.input_float("SfxCycleMax", &mut i).build() {
            self.sfx_cycle_max = i;
        }

        let mut i: f32 = self.sfx_speed_min;
        if ui.input_float("SfxSpeedMin", &mut i).build() {
            self.sfx_speed_min = i;
        }

        let mut i: f32 = self.sfx_speed_max;
        if ui.input_float("SfxSpeedMax", &mut i).build() {
            self.sfx_speed_max = i;
        }

        let mut i: f32 = self.sfx_maximum_drag;
        if ui.input_float("SfxMaximumDrag", &mut i).build() {
            self.sfx_maximum_drag = i;
        }

        let mut i: f32 = self.cloth_dir_pitch_min;
        if ui.input_float("clothDirPitchMin", &mut i).build() {
            self.cloth_dir_pitch_min = i;
        }

        let mut i: f32 = self.cloth_dir_pitch_max;
        if ui.input_float("clothDirPitchMax", &mut i).build() {
            self.cloth_dir_pitch_max = i;
        }

        let mut i: f32 = self.cloth_dir_yaw_min;
        if ui.input_float("clothDirYawMin", &mut i).build() {
            self.cloth_dir_yaw_min = i;
        }

        let mut i: f32 = self.cloth_dir_yaw_max;
        if ui.input_float("clothDirYawMax", &mut i).build() {
            self.cloth_dir_yaw_max = i;
        }

        let mut i: f32 = self.cloth_cycle_min;
        if ui.input_float("clothCycleMin", &mut i).build() {
            self.cloth_cycle_min = i;
        }

        let mut i: f32 = self.cloth_cycle_max;
        if ui.input_float("clothCycleMax", &mut i).build() {
            self.cloth_cycle_max = i;
        }

        let mut i: f32 = self.cloth_speed_min;
        if ui.input_float("clothSpeedMin", &mut i).build() {
            self.cloth_speed_min = i;
        }

        let mut i: f32 = self.cloth_speed_max;
        if ui.input_float("clothSpeedMax", &mut i).build() {
            self.cloth_speed_max = i;
        }

        let mut i: f32 = self.cloth_maximum_drag;
        if ui.input_float("clothMaximumDrag", &mut i).build() {
            self.cloth_maximum_drag = i;
        }
    }
}

impl Params {
    #[allow(unused)]
    pub unsafe fn get_action_button_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ActionButtonParam>>> {
        self.iter_param::<ActionButtonParam>("ActionButtonParam")
    }

    #[allow(unused)]
    pub unsafe fn get_ai_sound_param(&self) -> Option<impl Iterator<Item = Param<AiSoundParam>>> {
        self.iter_param::<AiSoundParam>("AiSoundParam")
    }

    #[allow(unused)]
    pub unsafe fn get_atk_param_npc(&self) -> Option<impl Iterator<Item = Param<AtkParam_Npc>>> {
        self.iter_param::<AtkParam_Npc>("AtkParam_Npc")
    }

    #[allow(unused)]
    pub unsafe fn get_atk_param_pc(&self) -> Option<impl Iterator<Item = Param<AtkParam_Pc>>> {
        self.iter_param::<AtkParam_Pc>("AtkParam_Pc")
    }

    #[allow(unused)]
    pub unsafe fn get_attack_element_correct_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<AttackElementCorrectParam>>> {
        self.iter_param::<AttackElementCorrectParam>("AttackElementCorrectParam")
    }

    #[allow(unused)]
    pub unsafe fn get_behavior_param(&self) -> Option<impl Iterator<Item = Param<BehaviorParam>>> {
        self.iter_param::<BehaviorParam>("BehaviorParam")
    }

    #[allow(unused)]
    pub unsafe fn get_behavior_param_pc(
        &self,
    ) -> Option<impl Iterator<Item = Param<BehaviorParam_PC>>> {
        self.iter_param::<BehaviorParam_PC>("BehaviorParam_PC")
    }

    #[allow(unused)]
    pub unsafe fn get_bonfire_warp_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<BonfireWarpParam>>> {
        self.iter_param::<BonfireWarpParam>("BonfireWarpParam")
    }

    #[allow(unused)]
    pub unsafe fn get_budget_param(&self) -> Option<impl Iterator<Item = Param<BudgetParam>>> {
        self.iter_param::<BudgetParam>("BudgetParam")
    }

    #[allow(unused)]
    pub unsafe fn get_bullet(&self) -> Option<impl Iterator<Item = Param<Bullet>>> {
        self.iter_param::<Bullet>("Bullet")
    }

    #[allow(unused)]
    pub unsafe fn get_bullet_create_limit_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<BulletCreateLimitParam>>> {
        self.iter_param::<BulletCreateLimitParam>("BulletCreateLimitParam")
    }

    #[allow(unused)]
    pub unsafe fn get_calc_correct_graph(
        &self,
    ) -> Option<impl Iterator<Item = Param<CalcCorrectGraph>>> {
        self.iter_param::<CalcCorrectGraph>("CalcCorrectGraph")
    }

    #[allow(unused)]
    pub unsafe fn get_ceremony(&self) -> Option<impl Iterator<Item = Param<Ceremony>>> {
        self.iter_param::<Ceremony>("Ceremony")
    }

    #[allow(unused)]
    pub unsafe fn get_character_load_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<CharacterLoadParam>>> {
        self.iter_param::<CharacterLoadParam>("CharacterLoadParam")
    }

    #[allow(unused)]
    pub unsafe fn get_chara_init_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<CharaInitParam>>> {
        self.iter_param::<CharaInitParam>("CharaInitParam")
    }

    #[allow(unused)]
    pub unsafe fn get_char_make_menu_list_item_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<CharMakeMenuListItemParam>>> {
        self.iter_param::<CharMakeMenuListItemParam>("CharMakeMenuListItemParam")
    }

    #[allow(unused)]
    pub unsafe fn get_char_make_menu_top_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<CharMakeMenuTopParam>>> {
        self.iter_param::<CharMakeMenuTopParam>("CharMakeMenuTopParam")
    }

    #[allow(unused)]
    pub unsafe fn get_clear_count_correct_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ClearCountCorrectParam>>> {
        self.iter_param::<ClearCountCorrectParam>("ClearCountCorrectParam")
    }

    #[allow(unused)]
    pub unsafe fn get_cool_time_param(&self) -> Option<impl Iterator<Item = Param<CoolTimeParam>>> {
        self.iter_param::<CoolTimeParam>("CoolTimeParam")
    }

    #[allow(unused)]
    pub unsafe fn get_cult_setting_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<CultSettingParam>>> {
        self.iter_param::<CultSettingParam>("CultSettingParam")
    }

    #[allow(unused)]
    pub unsafe fn get_decal_param(&self) -> Option<impl Iterator<Item = Param<DecalParam>>> {
        self.iter_param::<DecalParam>("DecalParam")
    }

    #[allow(unused)]
    pub unsafe fn get_direction_camera_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<DirectionCameraParam>>> {
        self.iter_param::<DirectionCameraParam>("DirectionCameraParam")
    }

    #[allow(unused)]
    pub unsafe fn get_equip_mtrl_set_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<EquipMtrlSetParam>>> {
        self.iter_param::<EquipMtrlSetParam>("EquipMtrlSetParam")
    }

    #[allow(unused)]
    pub unsafe fn get_equip_param_accessory(
        &self,
    ) -> Option<impl Iterator<Item = Param<EquipParamAccessory>>> {
        self.iter_param::<EquipParamAccessory>("EquipParamAccessory")
    }

    #[allow(unused)]
    pub unsafe fn get_equip_param_goods(
        &self,
    ) -> Option<impl Iterator<Item = Param<EquipParamGoods>>> {
        self.iter_param::<EquipParamGoods>("EquipParamGoods")
    }

    #[allow(unused)]
    pub unsafe fn get_equip_param_protector(
        &self,
    ) -> Option<impl Iterator<Item = Param<EquipParamProtector>>> {
        self.iter_param::<EquipParamProtector>("EquipParamProtector")
    }

    #[allow(unused)]
    pub unsafe fn get_equip_param_weapon(
        &self,
    ) -> Option<impl Iterator<Item = Param<EquipParamWeapon>>> {
        self.iter_param::<EquipParamWeapon>("EquipParamWeapon")
    }

    #[allow(unused)]
    pub unsafe fn get_face_gen_param(&self) -> Option<impl Iterator<Item = Param<FaceGenParam>>> {
        self.iter_param::<FaceGenParam>("FaceGenParam")
    }

    #[allow(unused)]
    pub unsafe fn get_face_param(&self) -> Option<impl Iterator<Item = Param<FaceParam>>> {
        self.iter_param::<FaceParam>("FaceParam")
    }

    #[allow(unused)]
    pub unsafe fn get_face_range_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<FaceRangeParam>>> {
        self.iter_param::<FaceRangeParam>("FaceRangeParam")
    }

    #[allow(unused)]
    pub unsafe fn get_foot_sfx_param(&self) -> Option<impl Iterator<Item = Param<FootSfxParam>>> {
        self.iter_param::<FootSfxParam>("FootSfxParam")
    }

    #[allow(unused)]
    pub unsafe fn get_game_area_param(&self) -> Option<impl Iterator<Item = Param<GameAreaParam>>> {
        self.iter_param::<GameAreaParam>("GameAreaParam")
    }

    #[allow(unused)]
    pub unsafe fn get_game_progress_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<GameProgressParam>>> {
        self.iter_param::<GameProgressParam>("GameProgressParam")
    }

    #[allow(unused)]
    pub unsafe fn get_gem_category_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<GemCategoryParam>>> {
        self.iter_param::<GemCategoryParam>("GemCategoryParam")
    }

    #[allow(unused)]
    pub unsafe fn get_gem_drop_doping_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<GemDropDopingParam>>> {
        self.iter_param::<GemDropDopingParam>("GemDropDopingParam")
    }

    #[allow(unused)]
    pub unsafe fn get_gem_drop_modify_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<GemDropModifyParam>>> {
        self.iter_param::<GemDropModifyParam>("GemDropModifyParam")
    }

    #[allow(unused)]
    pub unsafe fn get_gemeffect_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<GemeffectParam>>> {
        self.iter_param::<GemeffectParam>("GemeffectParam")
    }

    #[allow(unused)]
    pub unsafe fn get_gem_gen_param(&self) -> Option<impl Iterator<Item = Param<GemGenParam>>> {
        self.iter_param::<GemGenParam>("GemGenParam")
    }

    #[allow(unused)]
    pub unsafe fn get_hit_effect_se_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<HitEffectSeParam>>> {
        self.iter_param::<HitEffectSeParam>("HitEffectSeParam")
    }

    #[allow(unused)]
    pub unsafe fn get_hit_effect_sfx_concept_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<HitEffectSfxConceptParam>>> {
        self.iter_param::<HitEffectSfxConceptParam>("HitEffectSfxConceptParam")
    }

    #[allow(unused)]
    pub unsafe fn get_hit_effect_sfx_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<HitEffectSfxParam>>> {
        self.iter_param::<HitEffectSfxParam>("HitEffectSfxParam")
    }

    #[allow(unused)]
    pub unsafe fn get_hit_mtrl_param(&self) -> Option<impl Iterator<Item = Param<HitMtrlParam>>> {
        self.iter_param::<HitMtrlParam>("HitMtrlParam")
    }

    #[allow(unused)]
    pub unsafe fn get_h_pestus_flask_recovery_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<HPEstusFlaskRecoveryParam>>> {
        self.iter_param::<HPEstusFlaskRecoveryParam>("HPEstusFlaskRecoveryParam")
    }

    #[allow(unused)]
    pub unsafe fn get_item_lot_param(&self) -> Option<impl Iterator<Item = Param<ItemLotParam>>> {
        self.iter_param::<ItemLotParam>("ItemLotParam")
    }

    #[allow(unused)]
    pub unsafe fn get_knock_back_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<KnockBackParam>>> {
        self.iter_param::<KnockBackParam>("KnockBackParam")
    }

    #[allow(unused)]
    pub unsafe fn get_knowledge_load_screen_item_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<KnowledgeLoadScreenItemParam>>> {
        self.iter_param::<KnowledgeLoadScreenItemParam>("KnowledgeLoadScreenItemParam")
    }

    #[allow(unused)]
    pub unsafe fn get_load_balancer_draw_dist_scale_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<LoadBalancerDrawDistScaleParam>>> {
        self.iter_param::<LoadBalancerDrawDistScaleParam>("LoadBalancerDrawDistScaleParam")
    }

    #[allow(unused)]
    pub unsafe fn get_load_balancer_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<LoadBalancerParam>>> {
        self.iter_param::<LoadBalancerParam>("LoadBalancerParam")
    }

    #[allow(unused)]
    pub unsafe fn get_lock_cam_param(&self) -> Option<impl Iterator<Item = Param<LockCamParam>>> {
        self.iter_param::<LockCamParam>("LockCamParam")
    }

    #[allow(unused)]
    pub unsafe fn get_lod_param(&self) -> Option<impl Iterator<Item = Param<LodParam>>> {
        self.iter_param::<LodParam>("LodParam")
    }

    #[allow(unused)]
    pub unsafe fn get_lod_param_ps4(&self) -> Option<impl Iterator<Item = Param<LodParam_ps4>>> {
        self.iter_param::<LodParam_ps4>("LodParam_ps4")
    }

    #[allow(unused)]
    pub unsafe fn get_lod_param_xb1(&self) -> Option<impl Iterator<Item = Param<LodParam_xb1>>> {
        self.iter_param::<LodParam_xb1>("LodParam_xb1")
    }

    #[allow(unused)]
    pub unsafe fn get_magic(&self) -> Option<impl Iterator<Item = Param<Magic>>> {
        self.iter_param::<Magic>("Magic")
    }

    #[allow(unused)]
    pub unsafe fn get_map_mimicry_establishment_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MapMimicryEstablishmentParam>>> {
        self.iter_param::<MapMimicryEstablishmentParam>("MapMimicryEstablishmentParam")
    }

    #[allow(unused)]
    pub unsafe fn get_menu_offscr_rend_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MenuOffscrRendParam>>> {
        self.iter_param::<MenuOffscrRendParam>("MenuOffscrRendParam")
    }

    #[allow(unused)]
    pub unsafe fn get_menu_property_layout_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MenuPropertyLayoutParam>>> {
        self.iter_param::<MenuPropertyLayoutParam>("MenuPropertyLayoutParam")
    }

    #[allow(unused)]
    pub unsafe fn get_menu_property_spec_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MenuPropertySpecParam>>> {
        self.iter_param::<MenuPropertySpecParam>("MenuPropertySpecParam")
    }

    #[allow(unused)]
    pub unsafe fn get_menu_value_table_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MenuValueTableParam>>> {
        self.iter_param::<MenuValueTableParam>("MenuValueTableParam")
    }

    #[allow(unused)]
    pub unsafe fn get_model_sfx_param(&self) -> Option<impl Iterator<Item = Param<ModelSfxParam>>> {
        self.iter_param::<ModelSfxParam>("ModelSfxParam")
    }

    #[allow(unused)]
    pub unsafe fn get_move_param(&self) -> Option<impl Iterator<Item = Param<MoveParam>>> {
        self.iter_param::<MoveParam>("MoveParam")
    }

    #[allow(unused)]
    pub unsafe fn get_m_pestus_flask_recovery_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MPEstusFlaskRecoveryParam>>> {
        self.iter_param::<MPEstusFlaskRecoveryParam>("MPEstusFlaskRecoveryParam")
    }

    #[allow(unused)]
    pub unsafe fn get_multi_hpestus_flask_bonus_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MultiHPEstusFlaskBonusParam>>> {
        self.iter_param::<MultiHPEstusFlaskBonusParam>("MultiHPEstusFlaskBonusParam")
    }

    #[allow(unused)]
    pub unsafe fn get_multi_mpestus_flask_bonus_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MultiMPEstusFlaskBonusParam>>> {
        self.iter_param::<MultiMPEstusFlaskBonusParam>("MultiMPEstusFlaskBonusParam")
    }

    #[allow(unused)]
    pub unsafe fn get_multi_play_correction_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MultiPlayCorrectionParam>>> {
        self.iter_param::<MultiPlayCorrectionParam>("MultiPlayCorrectionParam")
    }

    #[allow(unused)]
    pub unsafe fn get_multi_soul_bonus_rate_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<MultiSoulBonusRateParam>>> {
        self.iter_param::<MultiSoulBonusRateParam>("MultiSoulBonusRateParam")
    }

    #[allow(unused)]
    pub unsafe fn get_network_area_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<NetworkAreaParam>>> {
        self.iter_param::<NetworkAreaParam>("NetworkAreaParam")
    }

    #[allow(unused)]
    pub unsafe fn get_network_msg_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<NetworkMsgParam>>> {
        self.iter_param::<NetworkMsgParam>("NetworkMsgParam")
    }

    #[allow(unused)]
    pub unsafe fn get_network_param(&self) -> Option<impl Iterator<Item = Param<NetworkParam>>> {
        self.iter_param::<NetworkParam>("NetworkParam")
    }

    #[allow(unused)]
    pub unsafe fn get_new_menu_color_table_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<NewMenuColorTableParam>>> {
        self.iter_param::<NewMenuColorTableParam>("NewMenuColorTableParam")
    }

    #[allow(unused)]
    pub unsafe fn get_npc_ai_action_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<NpcAiActionParam>>> {
        self.iter_param::<NpcAiActionParam>("NpcAiActionParam")
    }

    #[allow(unused)]
    pub unsafe fn get_npc_param(&self) -> Option<impl Iterator<Item = Param<NpcParam>>> {
        self.iter_param::<NpcParam>("NpcParam")
    }

    #[allow(unused)]
    pub unsafe fn get_npc_think_param(&self) -> Option<impl Iterator<Item = Param<NpcThinkParam>>> {
        self.iter_param::<NpcThinkParam>("NpcThinkParam")
    }

    #[allow(unused)]
    pub unsafe fn get_obj_act_param(&self) -> Option<impl Iterator<Item = Param<ObjActParam>>> {
        self.iter_param::<ObjActParam>("ObjActParam")
    }

    #[allow(unused)]
    pub unsafe fn get_object_material_sfx_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ObjectMaterialSfxParam>>> {
        self.iter_param::<ObjectMaterialSfxParam>("ObjectMaterialSfxParam")
    }

    #[allow(unused)]
    pub unsafe fn get_object_param(&self) -> Option<impl Iterator<Item = Param<ObjectParam>>> {
        self.iter_param::<ObjectParam>("ObjectParam")
    }

    #[allow(unused)]
    pub unsafe fn get_phantom_param(&self) -> Option<impl Iterator<Item = Param<PhantomParam>>> {
        self.iter_param::<PhantomParam>("PhantomParam")
    }

    #[allow(unused)]
    pub unsafe fn get_play_region_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<PlayRegionParam>>> {
        self.iter_param::<PlayRegionParam>("PlayRegionParam")
    }

    #[allow(unused)]
    pub unsafe fn get_protector_gen_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ProtectorGenParam>>> {
        self.iter_param::<ProtectorGenParam>("ProtectorGenParam")
    }

    #[allow(unused)]
    pub unsafe fn get_ragdoll_param(&self) -> Option<impl Iterator<Item = Param<RagdollParam>>> {
        self.iter_param::<RagdollParam>("RagdollParam")
    }

    #[allow(unused)]
    pub unsafe fn get_reinforce_param_protector(
        &self,
    ) -> Option<impl Iterator<Item = Param<ReinforceParamProtector>>> {
        self.iter_param::<ReinforceParamProtector>("ReinforceParamProtector")
    }

    #[allow(unused)]
    pub unsafe fn get_reinforce_param_weapon(
        &self,
    ) -> Option<impl Iterator<Item = Param<ReinforceParamWeapon>>> {
        self.iter_param::<ReinforceParamWeapon>("ReinforceParamWeapon")
    }

    #[allow(unused)]
    pub unsafe fn get_role_param(&self) -> Option<impl Iterator<Item = Param<RoleParam>>> {
        self.iter_param::<RoleParam>("RoleParam")
    }

    #[allow(unused)]
    pub unsafe fn get_se_material_convert_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<SeMaterialConvertParam>>> {
        self.iter_param::<SeMaterialConvertParam>("SeMaterialConvertParam")
    }

    #[allow(unused)]
    pub unsafe fn get_shop_lineup_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ShopLineupParam>>> {
        self.iter_param::<ShopLineupParam>("ShopLineupParam")
    }

    #[allow(unused)]
    pub unsafe fn get_skeleton_param(&self) -> Option<impl Iterator<Item = Param<SkeletonParam>>> {
        self.iter_param::<SkeletonParam>("SkeletonParam")
    }

    #[allow(unused)]
    pub unsafe fn get_sp_effect_param(&self) -> Option<impl Iterator<Item = Param<SpEffectParam>>> {
        self.iter_param::<SpEffectParam>("SpEffectParam")
    }

    #[allow(unused)]
    pub unsafe fn get_sp_effect_vfx_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<SpEffectVfxParam>>> {
        self.iter_param::<SpEffectVfxParam>("SpEffectVfxParam")
    }

    #[allow(unused)]
    pub unsafe fn get_sword_arts_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<SwordArtsParam>>> {
        self.iter_param::<SwordArtsParam>("SwordArtsParam")
    }

    #[allow(unused)]
    pub unsafe fn get_talk_param(&self) -> Option<impl Iterator<Item = Param<TalkParam>>> {
        self.iter_param::<TalkParam>("TalkParam")
    }

    #[allow(unused)]
    pub unsafe fn get_throw_direction_sfx_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ThrowDirectionSfxParam>>> {
        self.iter_param::<ThrowDirectionSfxParam>("ThrowDirectionSfxParam")
    }

    #[allow(unused)]
    pub unsafe fn get_throw_param(&self) -> Option<impl Iterator<Item = Param<ThrowParam>>> {
        self.iter_param::<ThrowParam>("ThrowParam")
    }

    #[allow(unused)]
    pub unsafe fn get_toughness_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<ToughnessParam>>> {
        self.iter_param::<ToughnessParam>("ToughnessParam")
    }

    #[allow(unused)]
    pub unsafe fn get_upper_arm_param(&self) -> Option<impl Iterator<Item = Param<UpperArmParam>>> {
        self.iter_param::<UpperArmParam>("UpperArmParam")
    }

    #[allow(unused)]
    pub unsafe fn get_weapon_gen_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<WeaponGenParam>>> {
        self.iter_param::<WeaponGenParam>("WeaponGenParam")
    }

    #[allow(unused)]
    pub unsafe fn get_wep_absorp_pos_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<WepAbsorpPosParam>>> {
        self.iter_param::<WepAbsorpPosParam>("WepAbsorpPosParam")
    }

    #[allow(unused)]
    pub unsafe fn get_wet_aspect_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<WetAspectParam>>> {
        self.iter_param::<WetAspectParam>("WetAspectParam")
    }

    #[allow(unused)]
    pub unsafe fn get_white_sign_cool_time_param(
        &self,
    ) -> Option<impl Iterator<Item = Param<WhiteSignCoolTimeParam>>> {
        self.iter_param::<WhiteSignCoolTimeParam>("WhiteSignCoolTimeParam")
    }

    #[allow(unused)]
    pub unsafe fn get_wind(&self) -> Option<impl Iterator<Item = Param<Wind>>> {
        self.iter_param::<Wind>("Wind")
    }
}
